
ButtonManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  08006ac0  08006ac0  00016ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080074e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000748  20000074  08007554  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00001404  200007bc  08007554  000207bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006a6d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ce00  00000000  00000000  0008a776  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00018b26  00000000  00000000  00097576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001a58  00000000  00000000  000b00a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000039e0  00000000  00000000  000b1af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00036693  00000000  00000000  000b54d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002efd2  00000000  00000000  000ebb6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0011bc25  00000000  00000000  0011ab3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00236762  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000064f8  00000000  00000000  002367e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006aa8 	.word	0x08006aa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006aa8 	.word	0x08006aa8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4c0d      	ldr	r4, [pc, #52]	; (80005f8 <HAL_InitTick+0x38>)
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	490c      	ldr	r1, [pc, #48]	; (80005fc <HAL_InitTick+0x3c>)
{
 80005ca:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	7822      	ldrb	r2, [r4, #0]
 80005ce:	6808      	ldr	r0, [r1, #0]
 80005d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f9f2 	bl	80009c0 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005dc:	b908      	cbnz	r0, 80005e2 <HAL_InitTick+0x22>
 80005de:	2d0f      	cmp	r5, #15
 80005e0:	d901      	bls.n	80005e6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005e2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80005e4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e6:	2200      	movs	r2, #0
 80005e8:	4629      	mov	r1, r5
 80005ea:	f04f 30ff 	mov.w	r0, #4294967295
 80005ee:	f000 f9a3 	bl	8000938 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f2:	6065      	str	r5, [r4, #4]
 80005f4:	2000      	movs	r0, #0
}
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000008 	.word	0x20000008

08000600 <HAL_Init>:
{
 8000600:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000602:	2003      	movs	r0, #3
 8000604:	f000 f984 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ffd9 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 800060e:	f003 f96f 	bl	80038f0 <HAL_MspInit>
}
 8000612:	2000      	movs	r0, #0
 8000614:	bd08      	pop	{r3, pc}
 8000616:	bf00      	nop

08000618 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_IncTick+0x10>)
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_IncTick+0x14>)
 800061c:	6811      	ldr	r1, [r2, #0]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	440b      	add	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000374 	.word	0x20000374
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <HAL_GetTick+0x8>)
 8000632:	6818      	ldr	r0, [r3, #0]
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000374 	.word	0x20000374

0800063c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800063c:	2800      	cmp	r0, #0
 800063e:	f000 8092 	beq.w	8000766 <HAL_ADC_Init+0x12a>
{
 8000642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000644:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000646:	4604      	mov	r4, r0
 8000648:	2d00      	cmp	r5, #0
 800064a:	f000 8082 	beq.w	8000752 <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800064e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000650:	06db      	lsls	r3, r3, #27
 8000652:	d504      	bpl.n	800065e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000654:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8000656:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000658:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800065c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800065e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000660:	4a4e      	ldr	r2, [pc, #312]	; (800079c <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000662:	494f      	ldr	r1, [pc, #316]	; (80007a0 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 8000664:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000666:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000668:	4d4e      	ldr	r5, [pc, #312]	; (80007a4 <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 800066a:	f042 0202 	orr.w	r2, r2, #2
 800066e:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000670:	684a      	ldr	r2, [r1, #4]
 8000672:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000676:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000678:	684a      	ldr	r2, [r1, #4]
 800067a:	6860      	ldr	r0, [r4, #4]
 800067c:	4302      	orrs	r2, r0
 800067e:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000680:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000682:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000688:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800068c:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800068e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000690:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000694:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000698:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800069a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800069c:	6858      	ldr	r0, [r3, #4]
 800069e:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80006a2:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006a4:	6859      	ldr	r1, [r3, #4]
 80006a6:	ea41 010c 	orr.w	r1, r1, ip
 80006aa:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006ac:	6899      	ldr	r1, [r3, #8]
 80006ae:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80006b2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	ea42 0207 	orr.w	r2, r2, r7
 80006ba:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006bc:	d055      	beq.n	800076a <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006be:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006c6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	4316      	orrs	r6, r2
 80006cc:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ce:	6899      	ldr	r1, [r3, #8]
 80006d0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80006d4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	4302      	orrs	r2, r0
 80006da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006dc:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80006de:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006e0:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006e4:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006e8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80006f0:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d142      	bne.n	800077c <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006fc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000702:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000704:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000708:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800070c:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800070e:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000710:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000712:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000714:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000716:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 800071a:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800071c:	689d      	ldr	r5, [r3, #8]
 800071e:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8000722:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000724:	6899      	ldr	r1, [r3, #8]
 8000726:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 800072a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800072c:	6899      	ldr	r1, [r3, #8]
 800072e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000732:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800073a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800073c:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800073e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000740:	f023 0303 	bic.w	r3, r3, #3
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800074a:	2300      	movs	r3, #0
 800074c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8000752:	f003 f8e5 	bl	8003920 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000756:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000758:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800075a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800075e:	06db      	lsls	r3, r3, #27
 8000760:	f53f af78 	bmi.w	8000654 <HAL_ADC_Init+0x18>
 8000764:	e77b      	b.n	800065e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8000766:	2001      	movs	r0, #1
}
 8000768:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	e7af      	b.n	80006dc <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800077c:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800077e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000780:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000784:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000786:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800078e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	e7b1      	b.n	80006fe <HAL_ADC_Init+0xc2>
 800079a:	bf00      	nop
 800079c:	ffffeefd 	.word	0xffffeefd
 80007a0:	40012300 	.word	0x40012300
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 80007a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 80007ac:	2200      	movs	r2, #0
{
 80007ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80007b0:	2b01      	cmp	r3, #1
{
 80007b2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80007b4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80007b6:	f000 809a 	beq.w	80008ee <HAL_ADC_ConfigChannel+0x146>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80007ba:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80007bc:	2201      	movs	r2, #1
 80007be:	6803      	ldr	r3, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80007c0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80007c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 80007c6:	b2af      	uxth	r7, r5
 80007c8:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80007ca:	d828      	bhi.n	800081e <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007cc:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80007d0:	f04f 0c07 	mov.w	ip, #7
 80007d4:	691c      	ldr	r4, [r3, #16]
 80007d6:	fa0c fc06 	lsl.w	ip, ip, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007da:	fa02 f606 	lsl.w	r6, r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007de:	ea24 040c 	bic.w	r4, r4, ip
 80007e2:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	4316      	orrs	r6, r2
 80007e8:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 80007ea:	684e      	ldr	r6, [r1, #4]
 80007ec:	2e06      	cmp	r6, #6
 80007ee:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80007f2:	d82d      	bhi.n	8000850 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007f4:	3a05      	subs	r2, #5
 80007f6:	241f      	movs	r4, #31
 80007f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007fa:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007fc:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000800:	ea21 0104 	bic.w	r1, r1, r4
 8000804:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000806:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000808:	430a      	orrs	r2, r1
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800080c:	4a3c      	ldr	r2, [pc, #240]	; (8000900 <HAL_ADC_ConfigChannel+0x158>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d030      	beq.n	8000874 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 8000812:	2300      	movs	r3, #0
 8000814:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000818:	4618      	mov	r0, r3
}
 800081a:	b003      	add	sp, #12
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800081e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000822:	f04f 0c07 	mov.w	ip, #7
 8000826:	68dc      	ldr	r4, [r3, #12]
 8000828:	3e1e      	subs	r6, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800082a:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8000904 <HAL_ADC_ConfigChannel+0x15c>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800082e:	fa0c fc06 	lsl.w	ip, ip, r6
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000832:	4575      	cmp	r5, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000834:	ea24 040c 	bic.w	r4, r4, ip
 8000838:	60dc      	str	r4, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800083a:	d05b      	beq.n	80008f4 <HAL_ADC_ConfigChannel+0x14c>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800083c:	fa02 f606 	lsl.w	r6, r2, r6
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	4316      	orrs	r6, r2
 8000844:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8000846:	684e      	ldr	r6, [r1, #4]
 8000848:	2e06      	cmp	r6, #6
 800084a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800084e:	d9d1      	bls.n	80007f4 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13)
 8000850:	2e0c      	cmp	r6, #12
 8000852:	d837      	bhi.n	80008c4 <HAL_ADC_ConfigChannel+0x11c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000854:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8000858:	261f      	movs	r6, #31
 800085a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800085c:	40a6      	lsls	r6, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800085e:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000862:	ea21 0106 	bic.w	r1, r1, r6
 8000866:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000868:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800086a:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800086c:	4a24      	ldr	r2, [pc, #144]	; (8000900 <HAL_ADC_ConfigChannel+0x158>)
 800086e:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000870:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000872:	d1ce      	bne.n	8000812 <HAL_ADC_ConfigChannel+0x6a>
 8000874:	2d12      	cmp	r5, #18
 8000876:	d033      	beq.n	80008e0 <HAL_ADC_ConfigChannel+0x138>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <HAL_ADC_ConfigChannel+0x15c>)
 800087a:	429d      	cmp	r5, r3
 800087c:	d001      	beq.n	8000882 <HAL_ADC_ConfigChannel+0xda>
 800087e:	2d11      	cmp	r5, #17
 8000880:	d1c7      	bne.n	8000812 <HAL_ADC_ConfigChannel+0x6a>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000882:	4a21      	ldr	r2, [pc, #132]	; (8000908 <HAL_ADC_ConfigChannel+0x160>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000884:	491f      	ldr	r1, [pc, #124]	; (8000904 <HAL_ADC_ConfigChannel+0x15c>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000886:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000888:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 800088a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800088e:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000890:	d1bf      	bne.n	8000812 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000892:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_ADC_ConfigChannel+0x164>)
 8000898:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f202 3283 	addw	r2, r2, #899	; 0x383
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	0c9b      	lsrs	r3, r3, #18
 80008a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80008b0:	9b01      	ldr	r3, [sp, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0ad      	beq.n	8000812 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80008b6:	9b01      	ldr	r3, [sp, #4]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80008bc:	9b01      	ldr	r3, [sp, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f9      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x10e>
 80008c2:	e7a6      	b.n	8000812 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008c4:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80008c8:	261f      	movs	r6, #31
 80008ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80008cc:	408e      	lsls	r6, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008ce:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008d2:	ea24 0406 	bic.w	r4, r4, r6
 80008d6:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008da:	430a      	orrs	r2, r1
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008de:	e795      	b.n	800080c <HAL_ADC_ConfigChannel+0x64>
    ADC->CCR |= ADC_CCR_VBATE;
 80008e0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80008e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80008ec:	e791      	b.n	8000812 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80008ee:	2002      	movs	r0, #2
}
 80008f0:	b003      	add	sp, #12
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80008f4:	68de      	ldr	r6, [r3, #12]
 80008f6:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 80008fa:	60de      	str	r6, [r3, #12]
 80008fc:	e775      	b.n	80007ea <HAL_ADC_ConfigChannel+0x42>
 80008fe:	bf00      	nop
 8000900:	40012000 	.word	0x40012000
 8000904:	10000012 	.word	0x10000012
 8000908:	40012300 	.word	0x40012300
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000912:	0200      	lsls	r0, r0, #8
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000916:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000922:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000928:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092a:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 800092c:	60c8      	str	r0, [r1, #12]
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00
 8000934:	05fa0000 	.word	0x05fa0000

08000938 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_NVIC_SetPriority+0x60>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000940:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000942:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	2d04      	cmp	r5, #4
 800094a:	bf28      	it	cs
 800094c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	2c06      	cmp	r4, #6
 8000950:	d918      	bls.n	8000984 <HAL_NVIC_SetPriority+0x4c>
 8000952:	3b03      	subs	r3, #3
 8000954:	f04f 34ff 	mov.w	r4, #4294967295
 8000958:	409c      	lsls	r4, r3
 800095a:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095e:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000962:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	fa02 f205 	lsl.w	r2, r2, r5
 8000968:	ea21 0102 	bic.w	r1, r1, r2
 800096c:	fa01 f203 	lsl.w	r2, r1, r3
 8000970:	ea42 0204 	orr.w	r2, r2, r4
 8000974:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000978:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800097a:	db06      	blt.n	800098a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_NVIC_SetPriority+0x64>)
 800097e:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000980:	bc30      	pop	{r4, r5}
 8000982:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000984:	2400      	movs	r4, #0
 8000986:	4623      	mov	r3, r4
 8000988:	e7e9      	b.n	800095e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	f000 000f 	and.w	r0, r0, #15
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_NVIC_SetPriority+0x68>)
 8000990:	541a      	strb	r2, [r3, r0]
 8000992:	bc30      	pop	{r4, r5}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00
 800099c:	e000e400 	.word	0xe000e400
 80009a0:	e000ed14 	.word	0xe000ed14

080009a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009a4:	2800      	cmp	r0, #0
 80009a6:	db07      	blt.n	80009b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a8:	f000 011f 	and.w	r1, r0, #31
 80009ac:	2301      	movs	r3, #1
 80009ae:	0940      	lsrs	r0, r0, #5
 80009b0:	4a02      	ldr	r2, [pc, #8]	; (80009bc <HAL_NVIC_EnableIRQ+0x18>)
 80009b2:	408b      	lsls	r3, r1
 80009b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	3801      	subs	r0, #1
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c6:	d20d      	bcs.n	80009e4 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009cc:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	25f0      	movs	r5, #240	; 0xf0
 80009d2:	4c06      	ldr	r4, [pc, #24]	; (80009ec <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d4:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d6:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80009e0:	bc30      	pop	{r4, r5}
 80009e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009e4:	2001      	movs	r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	e000e010 	.word	0xe000e010
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d044      	beq.n	8000a7e <HAL_DCMI_Init+0x8e>
{     
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80009f6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009fa:	4604      	mov	r4, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d03b      	beq.n	8000a78 <HAL_DCMI_Init+0x88>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a00:	6862      	ldr	r2, [r4, #4]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000a02:	2502      	movs	r5, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a04:	6963      	ldr	r3, [r4, #20]
 8000a06:	68e1      	ldr	r1, [r4, #12]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000a08:	2a10      	cmp	r2, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a0a:	ea43 0302 	orr.w	r3, r3, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000a0e:	6920      	ldr	r0, [r4, #16]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000a10:	69a6      	ldr	r6, [r4, #24]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a12:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000a16:	68a1      	ldr	r1, [r4, #8]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000a18:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000a1c:	ea43 0300 	orr.w	r3, r3, r0
 8000a20:	ea43 0301 	orr.w	r3, r3, r1
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000a24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000a26:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000a2a:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a2e:	6826      	ldr	r6, [r4, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000a30:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a34:	6837      	ldr	r7, [r6, #0]
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000a36:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000a38:	ea43 0300 	orr.w	r3, r3, r0
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000a3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000a3e:	ea43 0301 	orr.w	r3, r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a42:	4910      	ldr	r1, [pc, #64]	; (8000a84 <HAL_DCMI_Init+0x94>)
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000a44:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a48:	ea01 0107 	and.w	r1, r1, r7
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000a4c:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000a50:	6031      	str	r1, [r6, #0]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a52:	6831      	ldr	r1, [r6, #0]
 8000a54:	ea43 0301 	orr.w	r3, r3, r1
 8000a58:	6033      	str	r3, [r6, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000a5a:	d00a      	beq.n	8000a72 <HAL_DCMI_Init+0x82>
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a5c:	68f3      	ldr	r3, [r6, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000a5e:	2200      	movs	r2, #0
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000a60:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a62:	f043 031e 	orr.w	r3, r3, #30

  return HAL_OK;
 8000a66:	4610      	mov	r0, r2
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a68:	60f3      	str	r3, [r6, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000a6a:	64e2      	str	r2, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000a6c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8000a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000a72:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000a74:	61b3      	str	r3, [r6, #24]
 8000a76:	e7f1      	b.n	8000a5c <HAL_DCMI_Init+0x6c>
    HAL_DCMI_MspInit(hdcmi);
 8000a78:	f002 ff98 	bl	80039ac <HAL_DCMI_MspInit>
 8000a7c:	e7c0      	b.n	8000a00 <HAL_DCMI_Init+0x10>
     return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	ffe0f007 	.word	0xffe0f007

08000a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a88:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a8a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a8e:	2c01      	cmp	r4, #1
 8000a90:	d038      	beq.n	8000b04 <HAL_DMA_Start_IT+0x7c>
 8000a92:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a94:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a98:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a9a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8000a9c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000aa0:	d129      	bne.n	8000af6 <HAL_DMA_Start_IT+0x6e>
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000aa2:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aa4:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aa6:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aa8:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aac:	6545      	str	r5, [r0, #84]	; 0x54

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000aae:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000ab0:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ab2:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000ab4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000ab8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000aba:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000abc:	d026      	beq.n	8000b0c <HAL_DMA_Start_IT+0x84>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000abe:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000ac0:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ac2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8000ac4:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8000ac6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	f043 0316 	orr.w	r3, r3, #22
 8000ad2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000ad4:	6963      	ldr	r3, [r4, #20]
 8000ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ada:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000adc:	b11a      	cbz	r2, 8000ae6 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000ae6:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8000aea:	f042 0201 	orr.w	r2, r2, #1
}
 8000aee:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8000af0:	6022      	str	r2, [r4, #0]
}
 8000af2:	bcf0      	pop	{r4, r5, r6, r7}
 8000af4:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8000af6:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8000af8:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 8000afa:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bcf0      	pop	{r4, r5, r6, r7}
 8000b02:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8000b04:	2302      	movs	r3, #2
}
 8000b06:	bcf0      	pop	{r4, r5, r6, r7}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000b0c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000b0e:	60e1      	str	r1, [r4, #12]
 8000b10:	e7d7      	b.n	8000ac2 <HAL_DMA_Start_IT+0x3a>
 8000b12:	bf00      	nop

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b18:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8000d48 <HAL_GPIO_Init+0x234>
{
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b20:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8000d4c <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	f8d1 8000 	ldr.w	r8, [r1]
 8000b2a:	e003      	b.n	8000b34 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b2c:	3501      	adds	r5, #1
 8000b2e:	2d10      	cmp	r5, #16
 8000b30:	f000 80b6 	beq.w	8000ca0 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 8000b34:	2301      	movs	r3, #1
 8000b36:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b38:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d1f5      	bne.n	8000b2c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	f8de 4004 	ldr.w	r4, [lr, #4]
 8000b44:	f024 0710 	bic.w	r7, r4, #16
 8000b48:	2f02      	cmp	r7, #2
 8000b4a:	f040 80ac 	bne.w	8000ca6 <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 8000b4e:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b50:	f005 0a07 	and.w	sl, r5, #7
 8000b54:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b58:	f8de 2010 	ldr.w	r2, [lr, #16]
 8000b5c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b60:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b64:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b66:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b6a:	fa02 f20a 	lsl.w	r2, r2, sl
 8000b6e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b72:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b76:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b7a:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b7c:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b80:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8000b84:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b86:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 8000b8a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b8c:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b90:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b92:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000b94:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000b96:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b98:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b9c:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ba0:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ba4:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ba6:	fa06 f60a 	lsl.w	r6, r6, sl
 8000baa:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8000bae:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bb0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb2:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bb6:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8000bb8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bba:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbc:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bbe:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bc2:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bc6:	fa03 f30a 	lsl.w	r3, r3, sl
 8000bca:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 8000bce:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd0:	d5ac      	bpl.n	8000b2c <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000bd6:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bda:	f005 0303 	and.w	r3, r5, #3
 8000bde:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000be4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000be8:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000bee:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000bf2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bf6:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000bfe:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c00:	4e48      	ldr	r6, [pc, #288]	; (8000d24 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c04:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 8000c06:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c08:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c0c:	d020      	beq.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000c0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c12:	42b0      	cmp	r0, r6
 8000c14:	d05e      	beq.n	8000cd4 <HAL_GPIO_Init+0x1c0>
 8000c16:	4e44      	ldr	r6, [pc, #272]	; (8000d28 <HAL_GPIO_Init+0x214>)
 8000c18:	42b0      	cmp	r0, r6
 8000c1a:	d060      	beq.n	8000cde <HAL_GPIO_Init+0x1ca>
 8000c1c:	4e43      	ldr	r6, [pc, #268]	; (8000d2c <HAL_GPIO_Init+0x218>)
 8000c1e:	42b0      	cmp	r0, r6
 8000c20:	d062      	beq.n	8000ce8 <HAL_GPIO_Init+0x1d4>
 8000c22:	4e43      	ldr	r6, [pc, #268]	; (8000d30 <HAL_GPIO_Init+0x21c>)
 8000c24:	42b0      	cmp	r0, r6
 8000c26:	d064      	beq.n	8000cf2 <HAL_GPIO_Init+0x1de>
 8000c28:	4e42      	ldr	r6, [pc, #264]	; (8000d34 <HAL_GPIO_Init+0x220>)
 8000c2a:	42b0      	cmp	r0, r6
 8000c2c:	d06b      	beq.n	8000d06 <HAL_GPIO_Init+0x1f2>
 8000c2e:	4e42      	ldr	r6, [pc, #264]	; (8000d38 <HAL_GPIO_Init+0x224>)
 8000c30:	42b0      	cmp	r0, r6
 8000c32:	d06d      	beq.n	8000d10 <HAL_GPIO_Init+0x1fc>
 8000c34:	4e41      	ldr	r6, [pc, #260]	; (8000d3c <HAL_GPIO_Init+0x228>)
 8000c36:	42b0      	cmp	r0, r6
 8000c38:	d060      	beq.n	8000cfc <HAL_GPIO_Init+0x1e8>
 8000c3a:	4e41      	ldr	r6, [pc, #260]	; (8000d40 <HAL_GPIO_Init+0x22c>)
 8000c3c:	42b0      	cmp	r0, r6
 8000c3e:	d06c      	beq.n	8000d1a <HAL_GPIO_Init+0x206>
 8000c40:	4e40      	ldr	r6, [pc, #256]	; (8000d44 <HAL_GPIO_Init+0x230>)
 8000c42:	42b0      	cmp	r0, r6
 8000c44:	bf0c      	ite	eq
 8000c46:	2609      	moveq	r6, #9
 8000c48:	260a      	movne	r6, #10
 8000c4a:	fa06 f303 	lsl.w	r3, r6, r3
 8000c4e:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c50:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c52:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8000c54:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000c58:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c5c:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8000c60:	bf54      	ite	pl
 8000c62:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c64:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c66:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8000c68:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8000c6c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c70:	bf54      	ite	pl
 8000c72:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c74:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c76:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8000c78:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8000c7c:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c80:	bf54      	ite	pl
 8000c82:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c84:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c86:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000c88:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8000c8c:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c90:	bf54      	ite	pl
 8000c92:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c94:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c96:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8000c98:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c9c:	f47f af4a 	bne.w	8000b34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ca0:	b003      	add	sp, #12
 8000ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000caa:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8000cac:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cb2:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cb6:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cba:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cbc:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cc0:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cc4:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cc8:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8000ccc:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cce:	f63f af74 	bhi.w	8000bba <HAL_GPIO_Init+0xa6>
 8000cd2:	e760      	b.n	8000b96 <HAL_GPIO_Init+0x82>
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fa06 f303 	lsl.w	r3, r6, r3
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	e7b8      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000cde:	2602      	movs	r6, #2
 8000ce0:	fa06 f303 	lsl.w	r3, r6, r3
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	e7b3      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000ce8:	2603      	movs	r6, #3
 8000cea:	fa06 f303 	lsl.w	r3, r6, r3
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	e7ae      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000cf2:	2604      	movs	r6, #4
 8000cf4:	fa06 f303 	lsl.w	r3, r6, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	e7a9      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000cfc:	2607      	movs	r6, #7
 8000cfe:	fa06 f303 	lsl.w	r3, r6, r3
 8000d02:	431a      	orrs	r2, r3
 8000d04:	e7a4      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000d06:	2605      	movs	r6, #5
 8000d08:	fa06 f303 	lsl.w	r3, r6, r3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	e79f      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000d10:	2606      	movs	r6, #6
 8000d12:	fa06 f303 	lsl.w	r3, r6, r3
 8000d16:	431a      	orrs	r2, r3
 8000d18:	e79a      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000d1a:	2608      	movs	r6, #8
 8000d1c:	fa06 f303 	lsl.w	r3, r6, r3
 8000d20:	431a      	orrs	r2, r3
 8000d22:	e795      	b.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020c00 	.word	0x40020c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40021400 	.word	0x40021400
 8000d38:	40021800 	.word	0x40021800
 8000d3c:	40021c00 	.word	0x40021c00
 8000d40:	40022000 	.word	0x40022000
 8000d44:	40022400 	.word	0x40022400
 8000d48:	40013c00 	.word	0x40013c00
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d50:	6903      	ldr	r3, [r0, #16]
 8000d52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d54:	bf14      	ite	ne
 8000d56:	2001      	movne	r0, #1
 8000d58:	2000      	moveq	r0, #0
 8000d5a:	4770      	bx	lr

08000d5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d5c:	b902      	cbnz	r2, 8000d60 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d5e:	0409      	lsls	r1, r1, #16
 8000d60:	6181      	str	r1, [r0, #24]
  }
}
 8000d62:	4770      	bx	lr

08000d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d66:	6951      	ldr	r1, [r2, #20]
 8000d68:	4201      	tst	r1, r0
 8000d6a:	d100      	bne.n	8000d6e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000d6c:	4770      	bx	lr
{
 8000d6e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d70:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d72:	f002 f835 	bl	8002de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d76:	bd08      	pop	{r3, pc}
 8000d78:	40013c00 	.word	0x40013c00

08000d7c <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d04d      	beq.n	8000e1c <HAL_I2C_Init+0xa0>
{
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d82:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d86:	4604      	mov	r4, r0
 8000d88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d040      	beq.n	8000e12 <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d90:	2124      	movs	r1, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d92:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d94:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d98:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d9c:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8000d9e:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000da0:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8000da4:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8000da6:	f020 0001 	bic.w	r0, r0, #1
 8000daa:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dac:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dae:	6899      	ldr	r1, [r3, #8]
 8000db0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000db4:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000db6:	d028      	beq.n	8000e0a <HAL_I2C_Init+0x8e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000db8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dbc:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dbe:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dc0:	d102      	bne.n	8000dc8 <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dc8:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dca:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8000dce:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dd0:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd2:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dd4:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd8:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dda:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ddc:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dde:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000de0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000de4:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000de6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dea:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dec:	60d8      	str	r0, [r3, #12]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8000dee:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000df0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000df2:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dfc:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dfe:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e02:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8000e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	e7da      	b.n	8000dc8 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8000e12:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000e16:	f002 fe53 	bl	8003ac0 <HAL_I2C_MspInit>
 8000e1a:	e7b9      	b.n	8000d90 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
}
 8000e1e:	4770      	bx	lr
 8000e20:	02008000 	.word	0x02008000

08000e24 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b20      	cmp	r3, #32
{
 8000e2c:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e2e:	d11f      	bne.n	8000e70 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e30:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000e34:	2a01      	cmp	r2, #1
 8000e36:	d01b      	beq.n	8000e70 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e38:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e3a:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e3c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e3e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8000e42:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8000e44:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8000e46:	f025 0501 	bic.w	r5, r5, #1
 8000e4a:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e4c:	6815      	ldr	r5, [r2, #0]
 8000e4e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8000e52:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e54:	6815      	ldr	r5, [r2, #0]
 8000e56:	4329      	orrs	r1, r5
 8000e58:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000e5a:	6811      	ldr	r1, [r2, #0]
 8000e5c:	f041 0101 	orr.w	r1, r1, #1
 8000e60:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8000e62:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000e66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	bc70      	pop	{r4, r5, r6}
 8000e6e:	4770      	bx	lr
    return HAL_BUSY;
 8000e70:	2402      	movs	r4, #2
}
 8000e72:	4620      	mov	r0, r4
 8000e74:	bc70      	pop	{r4, r5, r6}
 8000e76:	4770      	bx	lr

08000e78 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b20      	cmp	r3, #32
{
 8000e80:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e82:	d11e      	bne.n	8000ec2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e84:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000e88:	2a01      	cmp	r2, #1
 8000e8a:	d01a      	beq.n	8000ec2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e8c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8e:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e90:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e92:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8000e96:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 8000e98:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 8000e9a:	f024 0401 	bic.w	r4, r4, #1
 8000e9e:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8000ea0:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000ea2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8000ea6:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8000eaa:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	f041 0101 	orr.w	r1, r1, #1
 8000eb2:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8000eb4:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000eb8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	bc70      	pop	{r4, r5, r6}
 8000ec0:	4770      	bx	lr
    return HAL_BUSY;
 8000ec2:	2502      	movs	r5, #2
}
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	bc70      	pop	{r4, r5, r6}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ecc:	4a02      	ldr	r2, [pc, #8]	; (8000ed8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	4770      	bx	lr
 8000ed8:	40007000 	.word	0x40007000

08000edc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8000edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee0:	9d08      	ldr	r5, [sp, #32]
 8000ee2:	4680      	mov	r8, r0
 8000ee4:	460f      	mov	r7, r1
 8000ee6:	4616      	mov	r6, r2
 8000ee8:	4699      	mov	r9, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000eea:	f8d8 4000 	ldr.w	r4, [r8]
 8000eee:	e001      	b.n	8000ef4 <QSPI_WaitFlagStateUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000ef0:	1c6b      	adds	r3, r5, #1
 8000ef2:	d109      	bne.n	8000f08 <QSPI_WaitFlagStateUntilTimeout+0x2c>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000ef4:	68a0      	ldr	r0, [r4, #8]
 8000ef6:	4238      	tst	r0, r7
 8000ef8:	bf14      	ite	ne
 8000efa:	2001      	movne	r0, #1
 8000efc:	2000      	moveq	r0, #0
 8000efe:	42b0      	cmp	r0, r6
 8000f00:	d1f6      	bne.n	8000ef0 <QSPI_WaitFlagStateUntilTimeout+0x14>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000f02:	2000      	movs	r0, #0
}
 8000f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f08:	b12d      	cbz	r5, 8000f16 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8000f0a:	f7ff fb91 	bl	8000630 <HAL_GetTick>
 8000f0e:	eba0 0009 	sub.w	r0, r0, r9
 8000f12:	42a8      	cmp	r0, r5
 8000f14:	d9e9      	bls.n	8000eea <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000f16:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000f18:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000f1a:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000f1e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8000f22:	4303      	orrs	r3, r0
 8000f24:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8000f28:	e7ec      	b.n	8000f04 <QSPI_WaitFlagStateUntilTimeout+0x28>
 8000f2a:	bf00      	nop

08000f2c <HAL_QSPI_Init>:
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8000f32:	f7ff fb7d 	bl	8000630 <HAL_GetTick>
  if(hqspi == NULL)
 8000f36:	2c00      	cmp	r4, #0
 8000f38:	d045      	beq.n	8000fc6 <HAL_QSPI_Init+0x9a>
  __HAL_LOCK(hqspi);
 8000f3a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d04e      	beq.n	8000fe0 <HAL_QSPI_Init+0xb4>
 8000f42:	2301      	movs	r3, #1
 8000f44:	4605      	mov	r5, r0
 8000f46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000f4a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8000f4e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	d03a      	beq.n	8000fcc <HAL_QSPI_Init+0xa0>
 8000f56:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8000f58:	6826      	ldr	r6, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000f5a:	462b      	mov	r3, r5
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8000f5c:	68a1      	ldr	r1, [r4, #8]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000f5e:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8000f60:	6835      	ldr	r5, [r6, #0]
 8000f62:	1e48      	subs	r0, r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000f64:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8000f66:	f425 55f8 	bic.w	r5, r5, #7936	; 0x1f00
 8000f6a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000f6e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8000f70:	6035      	str	r5, [r6, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000f72:	9700      	str	r7, [sp, #0]
 8000f74:	f7ff ffb2 	bl	8000edc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8000f78:	bb00      	cbnz	r0, 8000fbc <HAL_QSPI_Init+0x90>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8000f7a:	68e3      	ldr	r3, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 8000f7c:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8000f7e:	e9d4 2607 	ldrd	r2, r6, [r4, #28]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	e9d4 1200 	ldrd	r1, r2, [r4]
 8000f88:	4333      	orrs	r3, r6
 8000f8a:	4e17      	ldr	r6, [pc, #92]	; (8000fe8 <HAL_QSPI_Init+0xbc>)
 8000f8c:	680f      	ldr	r7, [r1, #0]
 8000f8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8000f92:	6962      	ldr	r2, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8000f94:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8000f96:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8000f98:	4333      	orrs	r3, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8000f9a:	4e14      	ldr	r6, [pc, #80]	; (8000fec <HAL_QSPI_Init+0xc0>)
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8000f9c:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8000f9e:	ea42 0307 	orr.w	r3, r2, r7
 8000fa2:	684f      	ldr	r7, [r1, #4]
 8000fa4:	6922      	ldr	r2, [r4, #16]
 8000fa6:	403e      	ands	r6, r7
 8000fa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fac:	4333      	orrs	r3, r6
 8000fae:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8000fb0:	680b      	ldr	r3, [r1, #0]
 8000fb2:	432b      	orrs	r3, r5
 8000fb4:	600b      	str	r3, [r1, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8000fb6:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8000fb8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000fc2:	b003      	add	sp, #12
 8000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000fc6:	2001      	movs	r0, #1
}
 8000fc8:	b003      	add	sp, #12
 8000fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8000fcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f002 fdd7 	bl	8003b84 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8000fd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fda:	461f      	mov	r7, r3
 8000fdc:	64a3      	str	r3, [r4, #72]	; 0x48
 8000fde:	e7bb      	b.n	8000f58 <HAL_QSPI_Init+0x2c>
  __HAL_LOCK(hqspi);
 8000fe0:	2002      	movs	r0, #2
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	00ffff2f 	.word	0x00ffff2f
 8000fec:	ffe0f8fe 	.word	0xffe0f8fe

08000ff0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	f000 8134 	beq.w	800125e <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	6803      	ldr	r3, [r0, #0]
{
 8000ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffc:	07dd      	lsls	r5, r3, #31
{
 8000ffe:	b082      	sub	sp, #8
 8001000:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	d535      	bpl.n	8001070 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001004:	49ab      	ldr	r1, [pc, #684]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001006:	688a      	ldr	r2, [r1, #8]
 8001008:	f002 020c 	and.w	r2, r2, #12
 800100c:	2a04      	cmp	r2, #4
 800100e:	f000 80fe 	beq.w	800120e <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001012:	688a      	ldr	r2, [r1, #8]
 8001014:	f002 020c 	and.w	r2, r2, #12
 8001018:	2a08      	cmp	r2, #8
 800101a:	f000 80f4 	beq.w	8001206 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d010      	beq.n	8001048 <HAL_RCC_OscConfig+0x58>
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 811b 	beq.w	8001262 <HAL_RCC_OscConfig+0x272>
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001030:	4ba0      	ldr	r3, [pc, #640]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f000 8162 	beq.w	80012fc <HAL_RCC_OscConfig+0x30c>
 8001038:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e004      	b.n	8001052 <HAL_RCC_OscConfig+0x62>
 8001048:	4a9a      	ldr	r2, [pc, #616]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001052:	f7ff faed 	bl	8000630 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4d97      	ldr	r5, [pc, #604]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8001058:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e005      	b.n	8001068 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fae8 	bl	8000630 <HAL_GetTick>
 8001060:	1b80      	subs	r0, r0, r6
 8001062:	2864      	cmp	r0, #100	; 0x64
 8001064:	f200 80ee 	bhi.w	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	039a      	lsls	r2, r3, #14
 800106c:	d5f6      	bpl.n	800105c <HAL_RCC_OscConfig+0x6c>
 800106e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001070:	079f      	lsls	r7, r3, #30
 8001072:	d442      	bmi.n	80010fa <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001074:	071a      	lsls	r2, r3, #28
 8001076:	d517      	bpl.n	80010a8 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001078:	6963      	ldr	r3, [r4, #20]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80b0 	beq.w	80011e0 <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001080:	4b8c      	ldr	r3, [pc, #560]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001082:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001084:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800108c:	f7ff fad0 	bl	8000630 <HAL_GetTick>
 8001090:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e005      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff facc 	bl	8000630 <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	2802      	cmp	r0, #2
 800109c:	f200 80d2 	bhi.w	8001244 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010a2:	079b      	lsls	r3, r3, #30
 80010a4:	d5f6      	bpl.n	8001094 <HAL_RCC_OscConfig+0xa4>
 80010a6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a8:	075d      	lsls	r5, r3, #29
 80010aa:	d56b      	bpl.n	8001184 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 80010ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b0:	00d0      	lsls	r0, r2, #3
 80010b2:	f100 80ed 	bmi.w	8001290 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80010b8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ca:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <HAL_RCC_OscConfig+0x2c8>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	05d1      	lsls	r1, r2, #23
 80010d0:	f140 80a7 	bpl.w	8001222 <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d4:	68a3      	ldr	r3, [r4, #8]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d039      	beq.n	800114e <HAL_RCC_OscConfig+0x15e>
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80da 	beq.w	8001294 <HAL_RCC_OscConfig+0x2a4>
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	4b74      	ldr	r3, [pc, #464]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 80010e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010e6:	f000 8111 	beq.w	800130c <HAL_RCC_OscConfig+0x31c>
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	671a      	str	r2, [r3, #112]	; 0x70
 80010f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010f2:	f022 0204 	bic.w	r2, r2, #4
 80010f6:	671a      	str	r2, [r3, #112]	; 0x70
 80010f8:	e02e      	b.n	8001158 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010fa:	4a6e      	ldr	r2, [pc, #440]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 80010fc:	6891      	ldr	r1, [r2, #8]
 80010fe:	f011 0f0c 	tst.w	r1, #12
 8001102:	d062      	beq.n	80011ca <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001104:	6891      	ldr	r1, [r2, #8]
 8001106:	f001 010c 	and.w	r1, r1, #12
 800110a:	2908      	cmp	r1, #8
 800110c:	d05a      	beq.n	80011c4 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800110e:	68e3      	ldr	r3, [r4, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80df 	beq.w	80012d4 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001118:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001122:	f7ff fa85 	bl	8000630 <HAL_GetTick>
 8001126:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e005      	b.n	8001136 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fa81 	bl	8000630 <HAL_GetTick>
 800112e:	1b80      	subs	r0, r0, r6
 8001130:	2802      	cmp	r0, #2
 8001132:	f200 8087 	bhi.w	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	0798      	lsls	r0, r3, #30
 800113a:	d5f6      	bpl.n	800112a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	6922      	ldr	r2, [r4, #16]
 8001140:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001144:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001148:	602b      	str	r3, [r5, #0]
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	e792      	b.n	8001074 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114e:	4a59      	ldr	r2, [pc, #356]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001150:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fa6a 	bl	8000630 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	4e55      	ldr	r6, [pc, #340]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800115e:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001164:	e005      	b.n	8001172 <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fa63 	bl	8000630 <HAL_GetTick>
 800116a:	eba0 0008 	sub.w	r0, r0, r8
 800116e:	42b8      	cmp	r0, r7
 8001170:	d868      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001172:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001174:	079b      	lsls	r3, r3, #30
 8001176:	d5f6      	bpl.n	8001166 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001178:	b125      	cbz	r5, 8001184 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117a:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 800117c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800117e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001184:	69a3      	ldr	r3, [r4, #24]
 8001186:	b1cb      	cbz	r3, 80011bc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001188:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 800118a:	6891      	ldr	r1, [r2, #8]
 800118c:	f001 010c 	and.w	r1, r1, #12
 8001190:	2908      	cmp	r1, #8
 8001192:	d021      	beq.n	80011d8 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001194:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001196:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001198:	f000 80c0 	beq.w	800131c <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a0:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 80011a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011a4:	f7ff fa44 	bl	8000630 <HAL_GetTick>
 80011a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011aa:	e004      	b.n	80011b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff fa40 	bl	8000630 <HAL_GetTick>
 80011b0:	1b40      	subs	r0, r0, r5
 80011b2:	2802      	cmp	r0, #2
 80011b4:	d846      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	019b      	lsls	r3, r3, #6
 80011ba:	d4f7      	bmi.n	80011ac <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80011bc:	2000      	movs	r0, #0
}
 80011be:	b002      	add	sp, #8
 80011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c4:	6852      	ldr	r2, [r2, #4]
 80011c6:	0256      	lsls	r6, r2, #9
 80011c8:	d4a1      	bmi.n	800110e <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	0795      	lsls	r5, r2, #30
 80011d0:	d53c      	bpl.n	800124c <HAL_RCC_OscConfig+0x25c>
 80011d2:	68e2      	ldr	r2, [r4, #12]
 80011d4:	2a01      	cmp	r2, #1
 80011d6:	d039      	beq.n	800124c <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 80011d8:	2001      	movs	r0, #1
}
 80011da:	b002      	add	sp, #8
 80011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 80011e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80011ec:	f7ff fa20 	bl	8000630 <HAL_GetTick>
 80011f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f2:	e004      	b.n	80011fe <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fa1c 	bl	8000630 <HAL_GetTick>
 80011f8:	1b80      	subs	r0, r0, r6
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d822      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001200:	079f      	lsls	r7, r3, #30
 8001202:	d4f7      	bmi.n	80011f4 <HAL_RCC_OscConfig+0x204>
 8001204:	e74f      	b.n	80010a6 <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	684a      	ldr	r2, [r1, #4]
 8001208:	0250      	lsls	r0, r2, #9
 800120a:	f57f af08 	bpl.w	800101e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	0391      	lsls	r1, r2, #14
 8001214:	f57f af2c 	bpl.w	8001070 <HAL_RCC_OscConfig+0x80>
 8001218:	6862      	ldr	r2, [r4, #4]
 800121a:	2a00      	cmp	r2, #0
 800121c:	f47f af28 	bne.w	8001070 <HAL_RCC_OscConfig+0x80>
 8001220:	e7da      	b.n	80011d8 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 8001222:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001224:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8001226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800122c:	f7ff fa00 	bl	8000630 <HAL_GetTick>
 8001230:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	05da      	lsls	r2, r3, #23
 8001236:	f53f af4d 	bmi.w	80010d4 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff f9f9 	bl	8000630 <HAL_GetTick>
 800123e:	1bc0      	subs	r0, r0, r7
 8001240:	2864      	cmp	r0, #100	; 0x64
 8001242:	d9f6      	bls.n	8001232 <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8001244:	2003      	movs	r0, #3
}
 8001246:	b002      	add	sp, #8
 8001248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4919      	ldr	r1, [pc, #100]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 800124e:	6920      	ldr	r0, [r4, #16]
 8001250:	680a      	ldr	r2, [r1, #0]
 8001252:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001256:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800125a:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	e70a      	b.n	8001074 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
}
 8001260:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
 8001264:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001274:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001276:	f7ff f9db 	bl	8000630 <HAL_GetTick>
 800127a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127c:	e004      	b.n	8001288 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff f9d7 	bl	8000630 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	2864      	cmp	r0, #100	; 0x64
 8001286:	d8dd      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	039b      	lsls	r3, r3, #14
 800128c:	d4f7      	bmi.n	800127e <HAL_RCC_OscConfig+0x28e>
 800128e:	e6ee      	b.n	800106e <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 8001290:	2500      	movs	r5, #0
 8001292:	e71a      	b.n	80010ca <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	671a      	str	r2, [r3, #112]	; 0x70
 80012a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012a6:	f022 0204 	bic.w	r2, r2, #4
 80012aa:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012ac:	f7ff f9c0 	bl	8000630 <HAL_GetTick>
 80012b0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x2d6>
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff f9b8 	bl	8000630 <HAL_GetTick>
 80012c0:	1bc0      	subs	r0, r0, r7
 80012c2:	4540      	cmp	r0, r8
 80012c4:	d8be      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80012c8:	0798      	lsls	r0, r3, #30
 80012ca:	d4f7      	bmi.n	80012bc <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	f43f af59 	beq.w	8001184 <HAL_RCC_OscConfig+0x194>
 80012d2:	e752      	b.n	800117a <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_OscConfig+0x394>)
 80012d6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d8:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012e0:	f7ff f9a6 	bl	8000630 <HAL_GetTick>
 80012e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e004      	b.n	80012f2 <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff f9a2 	bl	8000630 <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d8a8      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	0799      	lsls	r1, r3, #30
 80012f6:	d4f7      	bmi.n	80012e8 <HAL_RCC_OscConfig+0x2f8>
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	e6bb      	b.n	8001074 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e6a2      	b.n	8001052 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	671a      	str	r2, [r3, #112]	; 0x70
 8001312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	671a      	str	r2, [r3, #112]	; 0x70
 800131a:	e71d      	b.n	8001158 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 800131c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001320:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8001322:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001324:	f7ff f984 	bl	8000630 <HAL_GetTick>
 8001328:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132a:	e004      	b.n	8001336 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff f980 	bl	8000630 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	2802      	cmp	r0, #2
 8001334:	d886      	bhi.n	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	0199      	lsls	r1, r3, #6
 800133a:	d4f7      	bmi.n	800132c <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001340:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001342:	4313      	orrs	r3, r2
 8001344:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	4c0d      	ldr	r4, [pc, #52]	; (8001384 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800134e:	0852      	lsrs	r2, r2, #1
 8001350:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001354:	3a01      	subs	r2, #1
 8001356:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800135a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800135e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001368:	f7ff f962 	bl	8000630 <HAL_GetTick>
 800136c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136e:	e005      	b.n	800137c <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff f95e 	bl	8000630 <HAL_GetTick>
 8001374:	1b40      	subs	r0, r0, r5
 8001376:	2802      	cmp	r0, #2
 8001378:	f63f af64 	bhi.w	8001244 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	019a      	lsls	r2, r3, #6
 8001380:	d5f6      	bpl.n	8001370 <HAL_RCC_OscConfig+0x380>
 8001382:	e71b      	b.n	80011bc <HAL_RCC_OscConfig+0x1cc>
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001388:	4916      	ldr	r1, [pc, #88]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800138a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800138c:	688b      	ldr	r3, [r1, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d01b      	beq.n	80013ce <HAL_RCC_GetSysClockFreq+0x46>
 8001396:	2b08      	cmp	r3, #8
 8001398:	d117      	bne.n	80013ca <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800139c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013a4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80013a8:	d113      	bne.n	80013d2 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x60>)
 80013ac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013b0:	fba1 0100 	umull	r0, r1, r1, r0
 80013b4:	f7fe ff84 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013c0:	3301      	adds	r3, #1
 80013c2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80013c4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013c8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80013cc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <HAL_RCC_GetSysClockFreq+0x64>)
}
 80013d0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <HAL_RCC_GetSysClockFreq+0x64>)
 80013d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013d8:	2300      	movs	r3, #0
 80013da:	fba1 0100 	umull	r0, r1, r1, r0
 80013de:	f7fe ff6f 	bl	80002c0 <__aeabi_uldivmod>
 80013e2:	e7e9      	b.n	80013b8 <HAL_RCC_GetSysClockFreq+0x30>
 80013e4:	40023800 	.word	0x40023800
 80013e8:	00f42400 	.word	0x00f42400
 80013ec:	017d7840 	.word	0x017d7840

080013f0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80013f0:	b178      	cbz	r0, 8001412 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f2:	4a4a      	ldr	r2, [pc, #296]	; (800151c <HAL_RCC_ClockConfig+0x12c>)
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	428b      	cmp	r3, r1
 80013fc:	d20b      	bcs.n	8001416 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f023 030f 	bic.w	r3, r3, #15
 8001404:	430b      	orrs	r3, r1
 8001406:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001408:	6813      	ldr	r3, [r2, #0]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	428b      	cmp	r3, r1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
}
 8001414:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	6803      	ldr	r3, [r0, #0]
{
 8001418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141c:	079d      	lsls	r5, r3, #30
 800141e:	d514      	bpl.n	800144a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	075c      	lsls	r4, r3, #29
 8001422:	d504      	bpl.n	800142e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4c3e      	ldr	r4, [pc, #248]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 8001426:	68a2      	ldr	r2, [r4, #8]
 8001428:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800142c:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	071a      	lsls	r2, r3, #28
 8001430:	d504      	bpl.n	800143c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001432:	4c3b      	ldr	r4, [pc, #236]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 8001434:	68a2      	ldr	r2, [r4, #8]
 8001436:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800143a:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143c:	4c38      	ldr	r4, [pc, #224]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 800143e:	6885      	ldr	r5, [r0, #8]
 8001440:	68a2      	ldr	r2, [r4, #8]
 8001442:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001446:	432a      	orrs	r2, r5
 8001448:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144a:	07df      	lsls	r7, r3, #31
 800144c:	4604      	mov	r4, r0
 800144e:	460d      	mov	r5, r1
 8001450:	d521      	bpl.n	8001496 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001452:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001458:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145a:	d056      	beq.n	800150a <HAL_RCC_ClockConfig+0x11a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145c:	2a02      	cmp	r2, #2
 800145e:	d059      	beq.n	8001514 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	0799      	lsls	r1, r3, #30
 8001462:	d528      	bpl.n	80014b6 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001464:	492e      	ldr	r1, [pc, #184]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001466:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146a:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146c:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	4313      	orrs	r3, r2
 8001474:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001476:	f7ff f8db 	bl	8000630 <HAL_GetTick>
 800147a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147c:	e004      	b.n	8001488 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff f8d7 	bl	8000630 <HAL_GetTick>
 8001482:	1bc0      	subs	r0, r0, r7
 8001484:	4540      	cmp	r0, r8
 8001486:	d843      	bhi.n	8001510 <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001488:	68b3      	ldr	r3, [r6, #8]
 800148a:	6862      	ldr	r2, [r4, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001494:	d1f3      	bne.n	800147e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001496:	4a21      	ldr	r2, [pc, #132]	; (800151c <HAL_RCC_ClockConfig+0x12c>)
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d90c      	bls.n	80014bc <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	f023 030f 	bic.w	r3, r3, #15
 80014a8:	432b      	orrs	r3, r5
 80014aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	42ab      	cmp	r3, r5
 80014b4:	d002      	beq.n	80014bc <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
}
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	075a      	lsls	r2, r3, #29
 80014c0:	d506      	bpl.n	80014d0 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c2:	4917      	ldr	r1, [pc, #92]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 80014c4:	68e0      	ldr	r0, [r4, #12]
 80014c6:	688a      	ldr	r2, [r1, #8]
 80014c8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80014cc:	4302      	orrs	r2, r0
 80014ce:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	071b      	lsls	r3, r3, #28
 80014d2:	d411      	bmi.n	80014f8 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014d4:	f7ff ff58 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 80014da:	4912      	ldr	r1, [pc, #72]	; (8001524 <HAL_RCC_ClockConfig+0x134>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_RCC_ClockConfig+0x138>)
 80014e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ee:	f7ff f867 	bl	80005c0 <HAL_InitTick>
  return HAL_OK;
 80014f2:	2000      	movs	r0, #0
}
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x130>)
 80014fa:	6921      	ldr	r1, [r4, #16]
 80014fc:	6893      	ldr	r3, [r2, #8]
 80014fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001502:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001506:	6093      	str	r3, [r2, #8]
 8001508:	e7e4      	b.n	80014d4 <HAL_RCC_ClockConfig+0xe4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	039e      	lsls	r6, r3, #14
 800150c:	d4aa      	bmi.n	8001464 <HAL_RCC_ClockConfig+0x74>
 800150e:	e7d2      	b.n	80014b6 <HAL_RCC_ClockConfig+0xc6>
        return HAL_TIMEOUT;
 8001510:	2003      	movs	r0, #3
 8001512:	e7ef      	b.n	80014f4 <HAL_RCC_ClockConfig+0x104>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	0198      	lsls	r0, r3, #6
 8001516:	d4a5      	bmi.n	8001464 <HAL_RCC_ClockConfig+0x74>
 8001518:	e7cd      	b.n	80014b6 <HAL_RCC_ClockConfig+0xc6>
 800151a:	bf00      	nop
 800151c:	40023c00 	.word	0x40023c00
 8001520:	40023800 	.word	0x40023800
 8001524:	08006ad4 	.word	0x08006ad4
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x14>)
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001530:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001532:	4905      	ldr	r1, [pc, #20]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001534:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001538:	6808      	ldr	r0, [r1, #0]
 800153a:	5cd3      	ldrb	r3, [r2, r3]
}
 800153c:	40d8      	lsrs	r0, r3
 800153e:	4770      	bx	lr
 8001540:	40023800 	.word	0x40023800
 8001544:	08006ae4 	.word	0x08006ae4
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x14>)
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001550:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001552:	4905      	ldr	r1, [pc, #20]	; (8001568 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001554:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001558:	6808      	ldr	r0, [r1, #0]
 800155a:	5cd3      	ldrb	r3, [r2, r3]
}
 800155c:	40d8      	lsrs	r0, r3
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800
 8001564:	08006ae4 	.word	0x08006ae4
 8001568:	20000008 	.word	0x20000008

0800156c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800156c:	6803      	ldr	r3, [r0, #0]
{
 800156e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001572:	f013 0601 	ands.w	r6, r3, #1
{
 8001576:	b083      	sub	sp, #12
 8001578:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800157a:	d00b      	beq.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800157c:	4ab8      	ldr	r2, [pc, #736]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800157e:	6891      	ldr	r1, [r2, #8]
 8001580:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001584:	6091      	str	r1, [r2, #8]
 8001586:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001588:	6891      	ldr	r1, [r2, #8]
 800158a:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800158c:	fab6 f686 	clz	r6, r6
 8001590:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001592:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001594:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001598:	d010      	beq.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800159a:	49b1      	ldr	r1, [pc, #708]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800159c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800159e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80015a2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015a6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80015aa:	ea42 0205 	orr.w	r2, r2, r5
 80015ae:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80015b2:	f000 81b0 	beq.w	8001916 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015b6:	fab5 f585 	clz	r5, r5
 80015ba:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80015bc:	02d9      	lsls	r1, r3, #11
 80015be:	d510      	bpl.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015c0:	48a7      	ldr	r0, [pc, #668]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80015c4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015c8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015cc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80015d0:	ea42 0201 	orr.w	r2, r2, r1
 80015d4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015d8:	f000 819b 	beq.w	8001912 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80015dc:	2900      	cmp	r1, #0
 80015de:	bf08      	it	eq
 80015e0:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80015e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80015e6:	bf18      	it	ne
 80015e8:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015ea:	069a      	lsls	r2, r3, #26
 80015ec:	f100 8149 	bmi.w	8001882 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015f0:	06d9      	lsls	r1, r3, #27
 80015f2:	d50c      	bpl.n	800160e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015f4:	4a9a      	ldr	r2, [pc, #616]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015f6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80015fa:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80015fe:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001602:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001606:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001608:	4301      	orrs	r1, r0
 800160a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800160e:	045a      	lsls	r2, r3, #17
 8001610:	d508      	bpl.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001612:	4993      	ldr	r1, [pc, #588]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001614:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001616:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800161a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800161e:	4302      	orrs	r2, r0
 8001620:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001624:	041f      	lsls	r7, r3, #16
 8001626:	d508      	bpl.n	800163a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001628:	498d      	ldr	r1, [pc, #564]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800162a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800162c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001630:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001634:	4302      	orrs	r2, r0
 8001636:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800163a:	03d8      	lsls	r0, r3, #15
 800163c:	d508      	bpl.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800163e:	4988      	ldr	r1, [pc, #544]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001640:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001642:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001646:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800164a:	4302      	orrs	r2, r0
 800164c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001650:	0399      	lsls	r1, r3, #14
 8001652:	d508      	bpl.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001654:	4982      	ldr	r1, [pc, #520]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001656:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001658:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800165c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001660:	4302      	orrs	r2, r0
 8001662:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001666:	065a      	lsls	r2, r3, #25
 8001668:	d508      	bpl.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800166a:	497d      	ldr	r1, [pc, #500]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800166c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800166e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001672:	f022 0203 	bic.w	r2, r2, #3
 8001676:	4302      	orrs	r2, r0
 8001678:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800167c:	061f      	lsls	r7, r3, #24
 800167e:	d508      	bpl.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001680:	4977      	ldr	r1, [pc, #476]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001682:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001684:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001688:	f022 020c 	bic.w	r2, r2, #12
 800168c:	4302      	orrs	r2, r0
 800168e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001692:	05d8      	lsls	r0, r3, #23
 8001694:	d508      	bpl.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001696:	4972      	ldr	r1, [pc, #456]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001698:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800169a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800169e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80016a2:	4302      	orrs	r2, r0
 80016a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80016a8:	0599      	lsls	r1, r3, #22
 80016aa:	d508      	bpl.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80016ac:	496c      	ldr	r1, [pc, #432]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80016ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80016b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80016b8:	4302      	orrs	r2, r0
 80016ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016be:	055a      	lsls	r2, r3, #21
 80016c0:	d508      	bpl.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016c2:	4967      	ldr	r1, [pc, #412]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80016c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016ce:	4302      	orrs	r2, r0
 80016d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80016d4:	051f      	lsls	r7, r3, #20
 80016d6:	d508      	bpl.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80016d8:	4961      	ldr	r1, [pc, #388]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80016da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80016e4:	4302      	orrs	r2, r0
 80016e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80016ea:	04d8      	lsls	r0, r3, #19
 80016ec:	d508      	bpl.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80016ee:	495c      	ldr	r1, [pc, #368]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80016f0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80016f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80016fa:	4302      	orrs	r2, r0
 80016fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001700:	0499      	lsls	r1, r3, #18
 8001702:	d508      	bpl.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001704:	4956      	ldr	r1, [pc, #344]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001706:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001708:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800170c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001710:	4302      	orrs	r2, r0
 8001712:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001716:	025a      	lsls	r2, r3, #9
 8001718:	d508      	bpl.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800171a:	4951      	ldr	r1, [pc, #324]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800171c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800171e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001722:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001726:	4302      	orrs	r2, r0
 8001728:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800172c:	029f      	lsls	r7, r3, #10
 800172e:	d50c      	bpl.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001730:	494b      	ldr	r1, [pc, #300]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001732:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001734:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001738:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800173c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001740:	bf08      	it	eq
 8001742:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001744:	4302      	orrs	r2, r0
 8001746:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800174a:	f013 0f08 	tst.w	r3, #8
 800174e:	bf18      	it	ne
 8001750:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001752:	0358      	lsls	r0, r3, #13
 8001754:	d508      	bpl.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001756:	4942      	ldr	r1, [pc, #264]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001758:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800175a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800175e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001762:	4302      	orrs	r2, r0
 8001764:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001768:	0219      	lsls	r1, r3, #8
 800176a:	d40b      	bmi.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800176c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001770:	d016      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8001772:	07f2      	lsls	r2, r6, #31
 8001774:	d414      	bmi.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001776:	2d01      	cmp	r5, #1
 8001778:	f000 80d0 	beq.w	800191c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800177c:	2000      	movs	r0, #0
}
 800177e:	b003      	add	sp, #12
 8001780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001784:	4936      	ldr	r1, [pc, #216]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800178a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800178e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001792:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001796:	ea42 0200 	orr.w	r2, r2, r0
 800179a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800179e:	d1e8      	bne.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80017a2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017a4:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 80017a6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80017aa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80017ac:	f7fe ff40 	bl	8000630 <HAL_GetTick>
 80017b0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017b2:	e004      	b.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017b4:	f7fe ff3c 	bl	8000630 <HAL_GetTick>
 80017b8:	1bc0      	subs	r0, r0, r7
 80017ba:	2864      	cmp	r0, #100	; 0x64
 80017bc:	d85d      	bhi.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017be:	6833      	ldr	r3, [r6, #0]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	d4f7      	bmi.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	07df      	lsls	r7, r3, #31
 80017c8:	d512      	bpl.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80017ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80017cc:	b982      	cbnz	r2, 80017f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80017ce:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017d2:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80017d6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80017da:	6860      	ldr	r0, [r4, #4]
 80017dc:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 80017e0:	68a1      	ldr	r1, [r4, #8]
 80017e2:	433a      	orrs	r2, r7
 80017e4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80017e8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80017ec:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80017f0:	031e      	lsls	r6, r3, #12
 80017f2:	f100 8111 	bmi.w	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80017f6:	02d8      	lsls	r0, r3, #11
 80017f8:	d504      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80017fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017fc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001800:	f000 810f 	beq.w	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001804:	01d9      	lsls	r1, r3, #7
 8001806:	d511      	bpl.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001808:	4e15      	ldr	r6, [pc, #84]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800180a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800180c:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001810:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001814:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001818:	6921      	ldr	r1, [r4, #16]
 800181a:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800181e:	433a      	orrs	r2, r7
 8001820:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001824:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001828:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800182c:	019a      	lsls	r2, r3, #6
 800182e:	d50d      	bpl.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001830:	6923      	ldr	r3, [r4, #16]
 8001832:	6862      	ldr	r2, [r4, #4]
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800183a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001840:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001844:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001848:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800184e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001850:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8001852:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001856:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001858:	f7fe feea 	bl	8000630 <HAL_GetTick>
 800185c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800185e:	e006      	b.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8001860:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001864:	f7fe fee4 	bl	8000630 <HAL_GetTick>
 8001868:	1bc0      	subs	r0, r0, r7
 800186a:	2864      	cmp	r0, #100	; 0x64
 800186c:	d805      	bhi.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800186e:	6833      	ldr	r3, [r6, #0]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	d5f7      	bpl.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 8001874:	2d01      	cmp	r5, #1
 8001876:	d181      	bne.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001878:	e050      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 800187a:	2003      	movs	r0, #3
}
 800187c:	b003      	add	sp, #12
 800187e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4a87      	ldr	r2, [pc, #540]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8001884:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001888:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800188e:	6411      	str	r1, [r2, #64]	; 0x40
 8001890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001892:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001896:	9201      	str	r2, [sp, #4]
 8001898:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80018a2:	f7fe fec5 	bl	8000630 <HAL_GetTick>
 80018a6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018a8:	e005      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7fe fec1 	bl	8000630 <HAL_GetTick>
 80018ae:	eba0 0008 	sub.w	r0, r0, r8
 80018b2:	2864      	cmp	r0, #100	; 0x64
 80018b4:	d8e1      	bhi.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	d5f6      	bpl.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018bc:	4a78      	ldr	r2, [pc, #480]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80018be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80018c2:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018c6:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80018ca:	d011      	beq.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80018cc:	4288      	cmp	r0, r1
 80018ce:	d00f      	beq.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018d0:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80018d2:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018d4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80018d8:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80018dc:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018de:	6f17      	ldr	r7, [r2, #112]	; 0x70
 80018e0:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 80018e4:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80018e6:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018e8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80018ea:	07cf      	lsls	r7, r1, #31
 80018ec:	f100 80c3 	bmi.w	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80018f4:	f000 80b1 	beq.w	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80018f8:	4969      	ldr	r1, [pc, #420]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80018fa:	688a      	ldr	r2, [r1, #8]
 80018fc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001900:	608a      	str	r2, [r1, #8]
 8001902:	4a67      	ldr	r2, [pc, #412]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800190a:	430b      	orrs	r3, r1
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	e66e      	b.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8001912:	2601      	movs	r6, #1
 8001914:	e665      	b.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8001916:	2500      	movs	r5, #0
      plli2sused = 1;
 8001918:	2601      	movs	r6, #1
 800191a:	e64f      	b.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 800191c:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 800191e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001920:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8001922:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001926:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001928:	f7fe fe82 	bl	8000630 <HAL_GetTick>
 800192c:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800192e:	e004      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001930:	f7fe fe7e 	bl	8000630 <HAL_GetTick>
 8001934:	1b80      	subs	r0, r0, r6
 8001936:	2864      	cmp	r0, #100	; 0x64
 8001938:	d89f      	bhi.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800193a:	682b      	ldr	r3, [r5, #0]
 800193c:	009f      	lsls	r7, r3, #2
 800193e:	d4f7      	bmi.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	031d      	lsls	r5, r3, #12
 8001944:	f100 8092 	bmi.w	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001948:	02d8      	lsls	r0, r3, #11
 800194a:	d51d      	bpl.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800194c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800194e:	b9da      	cbnz	r2, 8001988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001950:	4953      	ldr	r1, [pc, #332]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001952:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001954:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001958:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800195c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001960:	69a0      	ldr	r0, [r4, #24]
 8001962:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001966:	4332      	orrs	r2, r6
 8001968:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800196c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001970:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001974:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001978:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800197a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800197e:	3801      	subs	r0, #1
 8001980:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001984:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001988:	0299      	lsls	r1, r3, #10
 800198a:	d515      	bpl.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800198c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800198e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001992:	d111      	bne.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001994:	4942      	ldr	r1, [pc, #264]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001996:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001998:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800199c:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80019a0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80019a4:	6a20      	ldr	r0, [r4, #32]
 80019a6:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80019aa:	4332      	orrs	r2, r6
 80019ac:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80019b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80019b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80019b8:	071a      	lsls	r2, r3, #28
 80019ba:	d519      	bpl.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019bc:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80019be:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019c0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80019c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80019c8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80019cc:	69e0      	ldr	r0, [r4, #28]
 80019ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d2:	430b      	orrs	r3, r1
 80019d4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80019d8:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80019e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80019e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80019e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019ea:	430b      	orrs	r3, r1
 80019ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80019f2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80019f4:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 80019f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019fa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80019fc:	f7fe fe18 	bl	8000630 <HAL_GetTick>
 8001a00:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a02:	e005      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a04:	f7fe fe14 	bl	8000630 <HAL_GetTick>
 8001a08:	1b40      	subs	r0, r0, r5
 8001a0a:	2864      	cmp	r0, #100	; 0x64
 8001a0c:	f63f af35 	bhi.w	800187a <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	d5f6      	bpl.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8001a16:	e6b1      	b.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001a1a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001a1e:	f47f aeea 	bne.w	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a22:	4e1f      	ldr	r6, [pc, #124]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a24:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a26:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a2a:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a2e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001a32:	68e1      	ldr	r1, [r4, #12]
 8001a34:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8001a38:	433a      	orrs	r2, r7
 8001a3a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001a3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001a42:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a46:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8001a4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a4c:	f021 011f 	bic.w	r1, r1, #31
 8001a50:	3a01      	subs	r2, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8001a58:	e6d4      	b.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8001a5c:	4912      	ldr	r1, [pc, #72]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001a5e:	6882      	ldr	r2, [r0, #8]
 8001a60:	4019      	ands	r1, r3
 8001a62:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001a66:	430a      	orrs	r2, r1
 8001a68:	6082      	str	r2, [r0, #8]
 8001a6a:	e74a      	b.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	f43f af6e 	beq.w	8001950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001a74:	e768      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a7c:	f7fe fdd8 	bl	8000630 <HAL_GetTick>
 8001a80:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e006      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7fe fdd4 	bl	8000630 <HAL_GetTick>
 8001a88:	eba0 0009 	sub.w	r0, r0, r9
 8001a8c:	4540      	cmp	r0, r8
 8001a8e:	f63f aef4 	bhi.w	800187a <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a94:	0798      	lsls	r0, r3, #30
 8001a96:	d5f5      	bpl.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8001a98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a9a:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8001a9e:	e727      	b.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	0ffffcff 	.word	0x0ffffcff

08001aac <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001aac:	7f03      	ldrb	r3, [r0, #28]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	f000 80d7 	beq.w	8001c62 <HAL_RTC_SetAlarm+0x1b6>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ab4:	2302      	movs	r3, #2
{
 8001ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	4605      	mov	r5, r0
  __HAL_LOCK(hrtc);
 8001abc:	2001      	movs	r0, #1
 8001abe:	682f      	ldr	r7, [r5, #0]
 8001ac0:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ac2:	776b      	strb	r3, [r5, #29]

  if(Format == RTC_FORMAT_BIN)
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d04d      	beq.n	8001b64 <HAL_RTC_SetAlarm+0xb8>
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
              ((uint32_t)sAlarm->AlarmMask));
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ac8:	68bc      	ldr	r4, [r7, #8]
 8001aca:	f014 0e40 	ands.w	lr, r4, #64	; 0x40
 8001ace:	f000 80c2 	beq.w	8001c56 <HAL_RTC_SetAlarm+0x1aa>
 8001ad2:	7b0c      	ldrb	r4, [r1, #12]
 8001ad4:	ea4f 4e04 	mov.w	lr, r4, lsl #16
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8001ad8:	6a0b      	ldr	r3, [r1, #32]
 8001ada:	698c      	ldr	r4, [r1, #24]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001adc:	788a      	ldrb	r2, [r1, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8001ade:	431c      	orrs	r4, r3
 8001ae0:	780b      	ldrb	r3, [r1, #0]
 8001ae2:	4314      	orrs	r4, r2
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8001ae4:	784a      	ldrb	r2, [r1, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8001ae6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8001aea:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8001aee:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001af2:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8001af6:	ea44 040e 	orr.w	r4, r4, lr

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001afa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001afc:	20ca      	movs	r0, #202	; 0xca
 8001afe:	2253      	movs	r2, #83	; 0x53
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001b00:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001b04:	69ce      	ldr	r6, [r1, #28]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8001b0c:	627a      	str	r2, [r7, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001b0e:	ea48 0806 	orr.w	r8, r8, r6
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001b12:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001b14:	f000 8081 	beq.w	8001c1a <HAL_RTC_SetAlarm+0x16e>
    __HAL_RTC_ALARMA_ENABLE(hrtc);
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b1c:	60bb      	str	r3, [r7, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b24:	60bb      	str	r3, [r7, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b26:	f7fe fd83 	bl	8000630 <HAL_GetTick>
 8001b2a:	4607      	mov	r7, r0

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8001b2c:	e005      	b.n	8001b3a <HAL_RTC_SetAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b2e:	f7fe fd7f 	bl	8000630 <HAL_GetTick>
 8001b32:	1bc0      	subs	r0, r0, r7
 8001b34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b38:	d866      	bhi.n	8001c08 <HAL_RTC_SetAlarm+0x15c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8001b3a:	682a      	ldr	r2, [r5, #0]
 8001b3c:	68d6      	ldr	r6, [r2, #12]
 8001b3e:	f016 0602 	ands.w	r6, r6, #2
 8001b42:	d0f4      	beq.n	8001b2e <HAL_RTC_SetAlarm+0x82>

        return HAL_TIMEOUT;
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001b44:	6214      	str	r4, [r2, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001b46:	f8c2 8048 	str.w	r8, [r2, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001b4a:	6893      	ldr	r3, [r2, #8]
 8001b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b50:	6093      	str	r3, [r2, #8]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001b52:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b54:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8001b56:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b58:	6250      	str	r0, [r2, #36]	; 0x24

  return HAL_OK;
 8001b5a:	4618      	mov	r0, r3
  hrtc->State = HAL_RTC_STATE_READY;
 8001b5c:	7769      	strb	r1, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8001b5e:	772b      	strb	r3, [r5, #28]
}
 8001b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b64:	68be      	ldr	r6, [r7, #8]
 8001b66:	f016 0c40 	ands.w	ip, r6, #64	; 0x40
 8001b6a:	d077      	beq.n	8001c5c <HAL_RTC_SetAlarm+0x1b0>
 8001b6c:	f891 c00c 	ldrb.w	ip, [r1, #12]
 8001b70:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8001b74:	780b      	ldrb	r3, [r1, #0]
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8001b76:	2000      	movs	r0, #0
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001b78:	6a0e      	ldr	r6, [r1, #32]

  while(Value >= 10)
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	d906      	bls.n	8001b8c <HAL_RTC_SetAlarm+0xe0>
  {
    bcdhigh++;
    Value -= 10;
 8001b7e:	3b0a      	subs	r3, #10
    bcdhigh++;
 8001b80:	3001      	adds	r0, #1
    Value -= 10;
 8001b82:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	d8fa      	bhi.n	8001b7e <HAL_RTC_SetAlarm+0xd2>
 8001b88:	0100      	lsls	r0, r0, #4
 8001b8a:	b2c0      	uxtb	r0, r0
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8001b8c:	4318      	orrs	r0, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8001b8e:	784b      	ldrb	r3, [r1, #1]
  uint32_t bcdhigh = 0;
 8001b90:	2400      	movs	r4, #0
  while(Value >= 10)
 8001b92:	2b09      	cmp	r3, #9
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8001b94:	ea4f 4000 	mov.w	r0, r0, lsl #16
  while(Value >= 10)
 8001b98:	d906      	bls.n	8001ba8 <HAL_RTC_SetAlarm+0xfc>
    Value -= 10;
 8001b9a:	3b0a      	subs	r3, #10
    bcdhigh++;
 8001b9c:	3401      	adds	r4, #1
    Value -= 10;
 8001b9e:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d8fa      	bhi.n	8001b9a <HAL_RTC_SetAlarm+0xee>
 8001ba4:	0124      	lsls	r4, r4, #4
 8001ba6:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8001ba8:	4323      	orrs	r3, r4
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001baa:	788c      	ldrb	r4, [r1, #2]
  while(Value >= 10)
 8001bac:	2c09      	cmp	r4, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8001bae:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8001bb2:	d95a      	bls.n	8001c6a <HAL_RTC_SetAlarm+0x1be>
  uint32_t bcdhigh = 0;
 8001bb4:	f04f 0e00 	mov.w	lr, #0
    Value -= 10;
 8001bb8:	3c0a      	subs	r4, #10
    bcdhigh++;
 8001bba:	f10e 0e01 	add.w	lr, lr, #1
    Value -= 10;
 8001bbe:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8001bc0:	2c09      	cmp	r4, #9
 8001bc2:	d8f9      	bhi.n	8001bb8 <HAL_RTC_SetAlarm+0x10c>
 8001bc4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8001bc8:	fa5f f88e 	uxtb.w	r8, lr
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8001bcc:	f891 e024 	ldrb.w	lr, [r1, #36]	; 0x24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001bd0:	ea44 0408 	orr.w	r4, r4, r8
  while(Value >= 10)
 8001bd4:	f1be 0f09 	cmp.w	lr, #9
 8001bd8:	d945      	bls.n	8001c66 <HAL_RTC_SetAlarm+0x1ba>
    Value -= 10;
 8001bda:	f1ae 0e0a 	sub.w	lr, lr, #10
    bcdhigh++;
 8001bde:	3201      	adds	r2, #1
    Value -= 10;
 8001be0:	fa5f fe8e 	uxtb.w	lr, lr
  while(Value >= 10)
 8001be4:	f1be 0f09 	cmp.w	lr, #9
 8001be8:	d8f7      	bhi.n	8001bda <HAL_RTC_SetAlarm+0x12e>
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8001bee:	ea4e 0e02 	orr.w	lr, lr, r2
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8001bf2:	698a      	ldr	r2, [r1, #24]
 8001bf4:	4316      	orrs	r6, r2
 8001bf6:	ea46 0c0c 	orr.w	ip, r6, ip
 8001bfa:	ea4c 0000 	orr.w	r0, ip, r0
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	431c      	orrs	r4, r3
 8001c02:	ea44 640e 	orr.w	r4, r4, lr, lsl #24
 8001c06:	e778      	b.n	8001afa <HAL_RTC_SetAlarm+0x4e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c0a:	682a      	ldr	r2, [r5, #0]
 8001c0c:	21ff      	movs	r1, #255	; 0xff
        return HAL_TIMEOUT;
 8001c0e:	4618      	mov	r0, r3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c10:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001c12:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c14:	776b      	strb	r3, [r5, #29]
}
 8001c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1e:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c26:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001c28:	f7fe fd02 	bl	8000630 <HAL_GetTick>
 8001c2c:	4607      	mov	r7, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001c2e:	e005      	b.n	8001c3c <HAL_RTC_SetAlarm+0x190>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c30:	f7fe fcfe 	bl	8000630 <HAL_GetTick>
 8001c34:	1bc0      	subs	r0, r0, r7
 8001c36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c3a:	d8e5      	bhi.n	8001c08 <HAL_RTC_SetAlarm+0x15c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001c3c:	682a      	ldr	r2, [r5, #0]
 8001c3e:	68d6      	ldr	r6, [r2, #12]
 8001c40:	f016 0601 	ands.w	r6, r6, #1
 8001c44:	d0f4      	beq.n	8001c30 <HAL_RTC_SetAlarm+0x184>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001c46:	61d4      	str	r4, [r2, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001c48:	f8c2 8044 	str.w	r8, [r2, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001c4c:	6893      	ldr	r3, [r2, #8]
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c52:	6093      	str	r3, [r2, #8]
 8001c54:	e77d      	b.n	8001b52 <HAL_RTC_SetAlarm+0xa6>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8001c56:	f881 e00c 	strb.w	lr, [r1, #12]
 8001c5a:	e73d      	b.n	8001ad8 <HAL_RTC_SetAlarm+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8001c5c:	f881 c00c 	strb.w	ip, [r1, #12]
 8001c60:	e788      	b.n	8001b74 <HAL_RTC_SetAlarm+0xc8>
  __HAL_LOCK(hrtc);
 8001c62:	2002      	movs	r0, #2
}
 8001c64:	4770      	bx	lr
  while(Value >= 10)
 8001c66:	2200      	movs	r2, #0
 8001c68:	e7c1      	b.n	8001bee <HAL_RTC_SetAlarm+0x142>
 8001c6a:	f04f 0800 	mov.w	r8, #0
 8001c6e:	e7ad      	b.n	8001bcc <HAL_RTC_SetAlarm+0x120>

08001c70 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001c70:	6802      	ldr	r2, [r0, #0]
{
 8001c72:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001c74:	68d3      	ldr	r3, [r2, #12]
{
 8001c76:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001c78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c7c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8001c7e:	f7fe fcd7 	bl	8000630 <HAL_GetTick>
 8001c82:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001c84:	e005      	b.n	8001c92 <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c86:	f7fe fcd3 	bl	8000630 <HAL_GetTick>
 8001c8a:	1b40      	subs	r0, r0, r5
 8001c8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c90:	d805      	bhi.n	8001c9e <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	069b      	lsls	r3, r3, #26
 8001c98:	d5f5      	bpl.n	8001c86 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 8001c9a:	2000      	movs	r0, #0
}
 8001c9c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8001c9e:	2003      	movs	r0, #3
}
 8001ca0:	bd38      	pop	{r3, r4, r5, pc}
 8001ca2:	bf00      	nop

08001ca4 <RTC_EnterInitMode>:
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ca6:	6803      	ldr	r3, [r0, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	0652      	lsls	r2, r2, #25
 8001cac:	d501      	bpl.n	8001cb2 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8001cae:	2000      	movs	r0, #0
}
 8001cb0:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001cba:	f7fe fcb9 	bl	8000630 <HAL_GetTick>
 8001cbe:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	065b      	lsls	r3, r3, #25
 8001cc6:	d4f2      	bmi.n	8001cae <RTC_EnterInitMode+0xa>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cc8:	f7fe fcb2 	bl	8000630 <HAL_GetTick>
 8001ccc:	1b40      	subs	r0, r0, r5
 8001cce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cd2:	d9f5      	bls.n	8001cc0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001cd4:	2003      	movs	r0, #3
}
 8001cd6:	bd38      	pop	{r3, r4, r5, pc}

08001cd8 <HAL_RTC_Init>:
  if(hrtc == NULL)
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d041      	beq.n	8001d60 <HAL_RTC_Init+0x88>
{
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001cde:	7f43      	ldrb	r3, [r0, #29]
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d036      	beq.n	8001d58 <HAL_RTC_Init+0x80>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cea:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	21ca      	movs	r1, #202	; 0xca
 8001cf0:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cf2:	7760      	strb	r0, [r4, #29]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001cf4:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cf6:	6259      	str	r1, [r3, #36]	; 0x24
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001cfa:	f7ff ffd3 	bl	8001ca4 <RTC_EnterInitMode>
 8001cfe:	bb20      	cbnz	r0, 8001d4a <HAL_RTC_Init+0x72>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d00:	6823      	ldr	r3, [r4, #0]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d02:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d04:	4917      	ldr	r1, [pc, #92]	; (8001d64 <HAL_RTC_Init+0x8c>)
 8001d06:	689e      	ldr	r6, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d08:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d0a:	4031      	ands	r1, r6
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d0c:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001d0e:	68a7      	ldr	r7, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d10:	4332      	orrs	r2, r6
 8001d12:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d14:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d16:	4332      	orrs	r2, r6
 8001d18:	689e      	ldr	r6, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d1a:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d1c:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 8001d1e:	2601      	movs	r6, #1
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d20:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001d22:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001d24:	6919      	ldr	r1, [r3, #16]
 8001d26:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8001d2a:	69a7      	ldr	r7, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8001d2c:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001d34:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8001d36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001d38:	f021 0108 	bic.w	r1, r1, #8
 8001d3c:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8001d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d40:	433a      	orrs	r2, r7
 8001d42:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d44:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001d46:	7766      	strb	r6, [r4, #29]
}
 8001d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d4e:	2304      	movs	r3, #4
    return HAL_ERROR;
 8001d50:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d52:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d54:	7763      	strb	r3, [r4, #29]
}
 8001d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001d58:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001d5a:	f001 ff7f 	bl	8003c5c <HAL_RTC_MspInit>
 8001d5e:	e7c4      	b.n	8001cea <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 8001d60:	2001      	movs	r0, #1
}
 8001d62:	4770      	bx	lr
 8001d64:	ff8fffbf 	.word	0xff8fffbf

08001d68 <HAL_RTC_SetTime>:
{
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001d6a:	7f03      	ldrb	r3, [r0, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d07c      	beq.n	8001e6a <HAL_RTC_SetTime+0x102>
 8001d70:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d72:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8001d74:	2101      	movs	r1, #1
 8001d76:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d78:	7743      	strb	r3, [r0, #29]
 8001d7a:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8001d7c:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d7e:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d033      	beq.n	8001dec <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d84:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8001d88:	d06b      	beq.n	8001e62 <HAL_RTC_SetTime+0xfa>
 8001d8a:	7b2f      	ldrb	r7, [r5, #12]
 8001d8c:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8001d8e:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8001d90:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8001d92:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 8001d94:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8001d96:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8001d9a:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8001d9c:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d9e:	22ca      	movs	r2, #202	; 0xca
 8001da0:	2353      	movs	r3, #83	; 0x53
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001da2:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001da4:	6272      	str	r2, [r6, #36]	; 0x24
 8001da6:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001da8:	f7ff ff7c 	bl	8001ca4 <RTC_EnterInitMode>
 8001dac:	4606      	mov	r6, r0
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d14d      	bne.n	8001e4e <HAL_RTC_SetTime+0xe6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001db2:	4937      	ldr	r1, [pc, #220]	; (8001e90 <HAL_RTC_SetTime+0x128>)
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	4039      	ands	r1, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001db8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001dbc:	6019      	str	r1, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001dbe:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001dc0:	4302      	orrs	r2, r0
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001dc2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001dc6:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001dc8:	6899      	ldr	r1, [r3, #8]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	0692      	lsls	r2, r2, #26
 8001dda:	d549      	bpl.n	8001e70 <HAL_RTC_SetTime+0x108>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ddc:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8001dde:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc);
 8001de0:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001de2:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001de4:	7761      	strb	r1, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8001de6:	7722      	strb	r2, [r4, #28]
}
 8001de8:	4630      	mov	r0, r6
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001dec:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8001df0:	d039      	beq.n	8001e66 <HAL_RTC_SetTime+0xfe>
 8001df2:	7b2f      	ldrb	r7, [r5, #12]
 8001df4:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001df6:	782b      	ldrb	r3, [r5, #0]
  uint32_t bcdhigh = 0;
 8001df8:	2100      	movs	r1, #0
  while(Value >= 10)
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	d906      	bls.n	8001e0c <HAL_RTC_SetTime+0xa4>
    Value -= 10;
 8001dfe:	3b0a      	subs	r3, #10
    bcdhigh++;
 8001e00:	3101      	adds	r1, #1
    Value -= 10;
 8001e02:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d8fa      	bhi.n	8001dfe <HAL_RTC_SetTime+0x96>
 8001e08:	0109      	lsls	r1, r1, #4
 8001e0a:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001e0c:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8001e0e:	786b      	ldrb	r3, [r5, #1]
  uint32_t bcdhigh = 0;
 8001e10:	2000      	movs	r0, #0
  while(Value >= 10)
 8001e12:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001e14:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 8001e18:	d906      	bls.n	8001e28 <HAL_RTC_SetTime+0xc0>
    Value -= 10;
 8001e1a:	3b0a      	subs	r3, #10
    bcdhigh++;
 8001e1c:	3001      	adds	r0, #1
    Value -= 10;
 8001e1e:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d8fa      	bhi.n	8001e1a <HAL_RTC_SetTime+0xb2>
 8001e24:	0100      	lsls	r0, r0, #4
 8001e26:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8001e28:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001e2a:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 8001e2c:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8001e2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8001e32:	d92b      	bls.n	8001e8c <HAL_RTC_SetTime+0x124>
    Value -= 10;
 8001e34:	380a      	subs	r0, #10
    bcdhigh++;
 8001e36:	3201      	adds	r2, #1
    Value -= 10;
 8001e38:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8001e3a:	2809      	cmp	r0, #9
 8001e3c:	d8fa      	bhi.n	8001e34 <HAL_RTC_SetTime+0xcc>
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001e42:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001e44:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001e46:	433b      	orrs	r3, r7
 8001e48:	ea43 0700 	orr.w	r7, r3, r0
 8001e4c:	e7a7      	b.n	8001d9e <HAL_RTC_SetTime+0x36>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e4e:	6821      	ldr	r1, [r4, #0]
 8001e50:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e52:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8001e54:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001e56:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e58:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e5a:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001e5c:	7723      	strb	r3, [r4, #28]
}
 8001e5e:	4630      	mov	r0, r6
 8001e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sTime->TimeFormat = 0x00;
 8001e62:	732f      	strb	r7, [r5, #12]
 8001e64:	e793      	b.n	8001d8e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8001e66:	732f      	strb	r7, [r5, #12]
 8001e68:	e7c5      	b.n	8001df6 <HAL_RTC_SetTime+0x8e>
  __HAL_LOCK(hrtc);
 8001e6a:	2602      	movs	r6, #2
}
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fefd 	bl	8001c70 <HAL_RTC_WaitForSynchro>
 8001e76:	b908      	cbnz	r0, 8001e7c <HAL_RTC_SetTime+0x114>
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	e7af      	b.n	8001ddc <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e80:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e82:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001e84:	7726      	strb	r6, [r4, #28]
        return HAL_ERROR;
 8001e86:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e88:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001e8a:	e7ad      	b.n	8001de8 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	e7d8      	b.n	8001e42 <HAL_RTC_SetTime+0xda>
 8001e90:	007f7f7f 	.word	0x007f7f7f

08001e94 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8001e94:	7f03      	ldrb	r3, [r0, #28]
 8001e96:	2b01      	cmp	r3, #1
{
 8001e98:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8001e9a:	d06a      	beq.n	8001f72 <HAL_RTC_SetDate+0xde>
 8001e9c:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e9e:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8001ea0:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ea2:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8001ea4:	7728      	strb	r0, [r5, #28]
 8001ea6:	780e      	ldrb	r6, [r1, #0]
 8001ea8:	78cb      	ldrb	r3, [r1, #3]
 8001eaa:	0376      	lsls	r6, r6, #13
 8001eac:	7848      	ldrb	r0, [r1, #1]
 8001eae:	788c      	ldrb	r4, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001eb0:	b312      	cbz	r2, 8001ef8 <HAL_RTC_SetDate+0x64>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8001eb2:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8001eb6:	431c      	orrs	r4, r3
 8001eb8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	21ca      	movs	r1, #202	; 0xca
 8001ec0:	2253      	movs	r2, #83	; 0x53
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ec2:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ec4:	6259      	str	r1, [r3, #36]	; 0x24
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ec8:	f7ff feec 	bl	8001ca4 <RTC_EnterInitMode>
 8001ecc:	4606      	mov	r6, r0
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d145      	bne.n	8001f5e <HAL_RTC_SetDate+0xca>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_RTC_SetDate+0x104>)
 8001ed4:	682b      	ldr	r3, [r5, #0]
 8001ed6:	4022      	ands	r2, r4
 8001ed8:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	0692      	lsls	r2, r2, #26
 8001ee6:	d547      	bpl.n	8001f78 <HAL_RTC_SetDate+0xe4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ee8:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8001eea:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 8001eec:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eee:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001ef0:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001ef2:	772a      	strb	r2, [r5, #28]
}
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001ef8:	f010 0f10 	tst.w	r0, #16
 8001efc:	d004      	beq.n	8001f08 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001efe:	f020 0010 	bic.w	r0, r0, #16
 8001f02:	300a      	adds	r0, #10
 8001f04:	b2c0      	uxtb	r0, r0
 8001f06:	7048      	strb	r0, [r1, #1]
  while(Value >= 10)
 8001f08:	2b09      	cmp	r3, #9
  uint32_t bcdhigh = 0;
 8001f0a:	f04f 0100 	mov.w	r1, #0
  while(Value >= 10)
 8001f0e:	d906      	bls.n	8001f1e <HAL_RTC_SetDate+0x8a>
    Value -= 10;
 8001f10:	3b0a      	subs	r3, #10
    bcdhigh++;
 8001f12:	3101      	adds	r1, #1
    Value -= 10;
 8001f14:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	d8fa      	bhi.n	8001f10 <HAL_RTC_SetDate+0x7c>
 8001f1a:	0109      	lsls	r1, r1, #4
 8001f1c:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001f1e:	430b      	orrs	r3, r1
  while(Value >= 10)
 8001f20:	2809      	cmp	r0, #9
  uint32_t bcdhigh = 0;
 8001f22:	f04f 0100 	mov.w	r1, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001f26:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10)
 8001f2a:	d906      	bls.n	8001f3a <HAL_RTC_SetDate+0xa6>
    Value -= 10;
 8001f2c:	380a      	subs	r0, #10
    bcdhigh++;
 8001f2e:	3101      	adds	r1, #1
    Value -= 10;
 8001f30:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8001f32:	2809      	cmp	r0, #9
 8001f34:	d8fa      	bhi.n	8001f2c <HAL_RTC_SetDate+0x98>
 8001f36:	0109      	lsls	r1, r1, #4
 8001f38:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8001f3a:	4308      	orrs	r0, r1
  while(Value >= 10)
 8001f3c:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8001f3e:	ea4f 2100 	mov.w	r1, r0, lsl #8
  while(Value >= 10)
 8001f42:	d927      	bls.n	8001f94 <HAL_RTC_SetDate+0x100>
    Value -= 10;
 8001f44:	3c0a      	subs	r4, #10
    bcdhigh++;
 8001f46:	3201      	adds	r2, #1
    Value -= 10;
 8001f48:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8001f4a:	2c09      	cmp	r4, #9
 8001f4c:	d8fa      	bhi.n	8001f44 <HAL_RTC_SetDate+0xb0>
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d0      	uxtb	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001f52:	431e      	orrs	r6, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001f54:	4304      	orrs	r4, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8001f56:	ea46 0001 	orr.w	r0, r6, r1
 8001f5a:	4304      	orrs	r4, r0
 8001f5c:	e7ae      	b.n	8001ebc <HAL_RTC_SetDate+0x28>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f5e:	6829      	ldr	r1, [r5, #0]
 8001f60:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f62:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8001f64:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001f66:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f68:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f6a:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001f6c:	772b      	strb	r3, [r5, #28]
}
 8001f6e:	4630      	mov	r0, r6
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
 __HAL_LOCK(hrtc);
 8001f72:	2602      	movs	r6, #2
}
 8001f74:	4630      	mov	r0, r6
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7ff fe79 	bl	8001c70 <HAL_RTC_WaitForSynchro>
 8001f7e:	b908      	cbnz	r0, 8001f84 <HAL_RTC_SetDate+0xf0>
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	e7b1      	b.n	8001ee8 <HAL_RTC_SetDate+0x54>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f84:	682a      	ldr	r2, [r5, #0]
 8001f86:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f88:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f8a:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001f8c:	772e      	strb	r6, [r5, #28]
        return HAL_ERROR;
 8001f8e:	2601      	movs	r6, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f90:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8001f92:	e7af      	b.n	8001ef4 <HAL_RTC_SetDate+0x60>
  while(Value >= 10)
 8001f94:	2000      	movs	r0, #0
 8001f96:	e7dc      	b.n	8001f52 <HAL_RTC_SetDate+0xbe>
 8001f98:	00ffff3f 	.word	0x00ffff3f

08001f9c <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f9c:	7f03      	ldrb	r3, [r0, #28]
 8001f9e:	2b01      	cmp	r3, #1
{
 8001fa0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hrtc);
 8001fa2:	d021      	beq.n	8001fe8 <HAL_RTCEx_SetTimeStamp+0x4c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8001fa4:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa6:	2602      	movs	r6, #2

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fa8:	25ca      	movs	r5, #202	; 0xca
 8001faa:	2453      	movs	r4, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fac:	7746      	strb	r6, [r0, #29]
  hrtc->Instance->CR = (uint32_t)tmpreg;

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fae:	26ff      	movs	r6, #255	; 0xff
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8001fb0:	689f      	ldr	r7, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fb2:	625d      	str	r5, [r3, #36]	; 0x24
 8001fb4:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8001fb6:	f6a4 045c 	subw	r4, r4, #2140	; 0x85c
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8001fba:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8001fbc:	403c      	ands	r4, r7

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001fbe:	2701      	movs	r7, #1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8001fc0:	f025 0506 	bic.w	r5, r5, #6
  tmpreg|= TimeStampEdge;
 8001fc4:	430c      	orrs	r4, r1
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8001fc6:	64dd      	str	r5, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8001fc8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001fca:	430a      	orrs	r2, r1

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001fcc:	2100      	movs	r1, #0
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8001fce:	64da      	str	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001fd0:	460d      	mov	r5, r1
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8001fd2:	609c      	str	r4, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fda:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fdc:	625e      	str	r6, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001fde:	7747      	strb	r7, [r0, #29]
  __HAL_UNLOCK(hrtc);
 8001fe0:	7701      	strb	r1, [r0, #28]
}
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8001fe8:	2502      	movs	r5, #2
}
 8001fea:	4628      	mov	r0, r5
 8001fec:	bcf0      	pop	{r4, r5, r6, r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d05d      	beq.n	80020b0 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff4:	2200      	movs	r2, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 8001ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffe:	6282      	str	r2, [r0, #40]	; 0x28
 8002000:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002002:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04d      	beq.n	80020a6 <HAL_SPI_Init+0xb6>

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800200a:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800200c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800200e:	6822      	ldr	r2, [r4, #0]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002010:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8002014:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002018:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800201c:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800201e:	bf94      	ite	ls
 8002020:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 8002024:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 8002026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800202a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800202e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002030:	d135      	bne.n	800209e <HAL_SPI_Init+0xae>
 8002032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002034:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002036:	b92b      	cbnz	r3, 8002044 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002038:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800203c:	bf8c      	ite	hi
 800203e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002040:	2301      	movls	r3, #1
 8002042:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002044:	68a1      	ldr	r1, [r4, #8]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002046:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	6920      	ldr	r0, [r4, #16]
 800204e:	430b      	orrs	r3, r1
 8002050:	6961      	ldr	r1, [r4, #20]
 8002052:	4303      	orrs	r3, r0
 8002054:	430b      	orrs	r3, r1
 8002056:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800205a:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800205c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800205e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002062:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002066:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002068:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800206a:	f00c 0c04 	and.w	ip, ip, #4
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 800206e:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002070:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002074:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002076:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 800207a:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800207e:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002082:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002084:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002086:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002088:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208a:	69d3      	ldr	r3, [r2, #28]
 800208c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002090:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002092:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002096:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 800209a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	461e      	mov	r6, r3
 80020a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80020a4:	e7c6      	b.n	8002034 <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 80020a6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80020aa:	f001 fde5 	bl	8003c78 <HAL_SPI_MspInit>
 80020ae:	e7ac      	b.n	800200a <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
}
 80020b2:	4770      	bx	lr

080020b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b6:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020b8:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ba:	f024 0401 	bic.w	r4, r4, #1
  tmpccmrx |= OC_Config->OCMode;
 80020be:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c0:	4a12      	ldr	r2, [pc, #72]	; (800210c <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c2:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80020c4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80020c6:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 80020c8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx = TIMx->CCMR1;
 80020cc:	6987      	ldr	r7, [r0, #24]
  tmpccer |= OC_Config->OCPolarity;
 80020ce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020d0:	4d0f      	ldr	r5, [pc, #60]	; (8002110 <TIM_OC1_SetConfig+0x5c>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020d2:	403a      	ands	r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020d4:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80020d6:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020da:	d00a      	beq.n	80020f2 <TIM_OC1_SetConfig+0x3e>
 80020dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e0:	42a8      	cmp	r0, r5
 80020e2:	d006      	beq.n	80020f2 <TIM_OC1_SetConfig+0x3e>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020e4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80020e6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80020e8:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80020ea:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ec:	6203      	str	r3, [r0, #32]
}
 80020ee:	bcf0      	pop	{r4, r5, r6, r7}
 80020f0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80020f2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80020f6:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80020f8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80020fe:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8002100:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8002102:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002104:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002108:	432c      	orrs	r4, r5
 800210a:	e7eb      	b.n	80020e4 <TIM_OC1_SetConfig+0x30>
 800210c:	fffeff8c 	.word	0xfffeff8c
 8002110:	40010000 	.word	0x40010000

08002114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002114:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002116:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002118:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800211a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 800211e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002122:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002124:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002126:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8002128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800212c:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800212e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002132:	4d11      	ldr	r5, [pc, #68]	; (8002178 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002134:	403a      	ands	r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002136:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8002138:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800213c:	d00a      	beq.n	8002154 <TIM_OC3_SetConfig+0x40>
 800213e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002142:	42a8      	cmp	r0, r5
 8002144:	d006      	beq.n	8002154 <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002146:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002148:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800214a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800214c:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214e:	6203      	str	r3, [r0, #32]
}
 8002150:	bcf0      	pop	{r4, r5, r6, r7}
 8002152:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002158:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800215a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800215c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002160:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002162:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002166:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800216c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002170:	e7e9      	b.n	8002146 <TIM_OC3_SetConfig+0x32>
 8002172:	bf00      	nop
 8002174:	fffeff8c 	.word	0xfffeff8c
 8002178:	40010000 	.word	0x40010000

0800217c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800217c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800217e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002180:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002182:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002186:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800218a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800218c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800218e:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 8002190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 8002194:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002196:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219a:	4d0c      	ldr	r5, [pc, #48]	; (80021cc <TIM_OC4_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800219c:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219e:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021a0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021a4:	d00a      	beq.n	80021bc <TIM_OC4_SetConfig+0x40>
 80021a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021aa:	42a8      	cmp	r0, r5
 80021ac:	d006      	beq.n	80021bc <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80021b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80021b2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80021b4:	6401      	str	r1, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b6:	6203      	str	r3, [r0, #32]
}
 80021b8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ba:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021bc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021c0:	694d      	ldr	r5, [r1, #20]
 80021c2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80021c6:	e7f2      	b.n	80021ae <TIM_OC4_SetConfig+0x32>
 80021c8:	feff8cff 	.word	0xfeff8cff
 80021cc:	40010000 	.word	0x40010000

080021d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80021d0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021d2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80021d4:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021d6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 80021da:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021dc:	4a0f      	ldr	r2, [pc, #60]	; (800221c <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021de:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80021e0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80021e2:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 80021e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 80021e8:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80021ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ee:	4d0c      	ldr	r5, [pc, #48]	; (8002220 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021f0:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f2:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80021f4:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f8:	d00a      	beq.n	8002210 <TIM_OC5_SetConfig+0x40>
 80021fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021fe:	42a8      	cmp	r0, r5
 8002200:	d006      	beq.n	8002210 <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002202:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002204:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002206:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8002208:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220a:	6203      	str	r3, [r0, #32]
}
 800220c:	bcf0      	pop	{r4, r5, r6, r7}
 800220e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002210:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002214:	694d      	ldr	r5, [r1, #20]
 8002216:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800221a:	e7f2      	b.n	8002202 <TIM_OC5_SetConfig+0x32>
 800221c:	fffeff8f 	.word	0xfffeff8f
 8002220:	40010000 	.word	0x40010000

08002224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002226:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002228:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800222a:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800222e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002232:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002234:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002236:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002238:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 800223c:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800223e:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002242:	4d0c      	ldr	r5, [pc, #48]	; (8002274 <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002244:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002246:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002248:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224c:	d00a      	beq.n	8002264 <TIM_OC6_SetConfig+0x40>
 800224e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002252:	42a8      	cmp	r0, r5
 8002254:	d006      	beq.n	8002264 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002256:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002258:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800225a:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800225c:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225e:	6203      	str	r3, [r0, #32]
}
 8002260:	bcf0      	pop	{r4, r5, r6, r7}
 8002262:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002264:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002268:	694d      	ldr	r5, [r1, #20]
 800226a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800226e:	e7f2      	b.n	8002256 <TIM_OC6_SetConfig+0x32>
 8002270:	feff8fff 	.word	0xfeff8fff
 8002274:	40010000 	.word	0x40010000

08002278 <HAL_TIM_PWM_MspInit>:
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop

0800227c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800227c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d05b      	beq.n	800233c <HAL_TIM_ConfigClockSource+0xc0>
 8002284:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8002288:	6813      	ldr	r3, [r2, #0]
{
 800228a:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002290:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8002292:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	4c4c      	ldr	r4, [pc, #304]	; (80023c8 <HAL_TIM_ConfigClockSource+0x14c>)
  __HAL_LOCK(htim);
 8002296:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229a:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 800229c:	6808      	ldr	r0, [r1, #0]
 800229e:	2840      	cmp	r0, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 80022a0:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80022a2:	d076      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x116>
 80022a4:	d94c      	bls.n	8002340 <HAL_TIM_ConfigClockSource+0xc4>
 80022a6:	2860      	cmp	r0, #96	; 0x60
 80022a8:	d02f      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x8e>
 80022aa:	d958      	bls.n	800235e <HAL_TIM_ConfigClockSource+0xe2>
 80022ac:	2870      	cmp	r0, #112	; 0x70
 80022ae:	d01b      	beq.n	80022e8 <HAL_TIM_ConfigClockSource+0x6c>
 80022b0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80022b4:	d10f      	bne.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b6:	68cc      	ldr	r4, [r1, #12]
 80022b8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80022bc:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80022c0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022c2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ca:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022cc:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80022d4:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 80022d6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	2101      	movs	r1, #1
  return HAL_OK;
 80022da:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022e0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80022e4:	bc70      	pop	{r4, r5, r6}
 80022e6:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80022ec:	68cc      	ldr	r4, [r1, #12]
 80022ee:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80022f2:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022f4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022fc:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80022fe:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002300:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002302:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002306:	6099      	str	r1, [r3, #8]
      break;
 8002308:	e7e5      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800230a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800230c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800230e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002312:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002314:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002316:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8002318:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800231a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800231e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002322:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002326:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800232a:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 800232c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800232e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002330:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002334:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002338:	6099      	str	r1, [r3, #8]
 800233a:	e7cc      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800233c:	2002      	movs	r0, #2
}
 800233e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002340:	2810      	cmp	r0, #16
 8002342:	d004      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xd2>
 8002344:	d93d      	bls.n	80023c2 <HAL_TIM_ConfigClockSource+0x146>
 8002346:	2820      	cmp	r0, #32
 8002348:	d001      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xd2>
 800234a:	2830      	cmp	r0, #48	; 0x30
 800234c:	d1c3      	bne.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 800234e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002350:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002354:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002358:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800235a:	6098      	str	r0, [r3, #8]
 800235c:	e7bb      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800235e:	2850      	cmp	r0, #80	; 0x50
 8002360:	d1b9      	bne.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8002362:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002364:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002366:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002368:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236c:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002370:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8002372:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002374:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002376:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002378:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800237c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002380:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002382:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002384:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002386:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800238a:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800238e:	6099      	str	r1, [r3, #8]
 8002390:	e7a1      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8002392:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002394:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002398:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239c:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a0:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80023a2:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a6:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023ac:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80023b0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b2:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80023b4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ba:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80023be:	6099      	str	r1, [r3, #8]
 80023c0:	e789      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d0c3      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xd2>
 80023c6:	e786      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x5a>
 80023c8:	fffe0088 	.word	0xfffe0088

080023cc <TIM_Base_SetConfig>:
{
 80023cc:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ce:	4e32      	ldr	r6, [pc, #200]	; (8002498 <TIM_Base_SetConfig+0xcc>)
 80023d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023d4:	4f31      	ldr	r7, [pc, #196]	; (800249c <TIM_Base_SetConfig+0xd0>)
 80023d6:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e0:	fab6 f686 	clz	r6, r6
 80023e4:	fab7 f787 	clz	r7, r7
 80023e8:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80023ec:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80023f0:	d025      	beq.n	800243e <TIM_Base_SetConfig+0x72>
 80023f2:	bb26      	cbnz	r6, 800243e <TIM_Base_SetConfig+0x72>
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <TIM_Base_SetConfig+0xd4>)
 80023f6:	4290      	cmp	r0, r2
 80023f8:	d03e      	beq.n	8002478 <TIM_Base_SetConfig+0xac>
 80023fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023fe:	4290      	cmp	r0, r2
 8002400:	d03a      	beq.n	8002478 <TIM_Base_SetConfig+0xac>
 8002402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002406:	4290      	cmp	r0, r2
 8002408:	d03b      	beq.n	8002482 <TIM_Base_SetConfig+0xb6>
 800240a:	2f00      	cmp	r7, #0
 800240c:	d139      	bne.n	8002482 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240e:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <TIM_Base_SetConfig+0xd8>)
 8002410:	4290      	cmp	r0, r2
 8002412:	d018      	beq.n	8002446 <TIM_Base_SetConfig+0x7a>
 8002414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002418:	4290      	cmp	r0, r2
 800241a:	d014      	beq.n	8002446 <TIM_Base_SetConfig+0x7a>
 800241c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002420:	4290      	cmp	r0, r2
 8002422:	d010      	beq.n	8002446 <TIM_Base_SetConfig+0x7a>
 8002424:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002428:	4290      	cmp	r0, r2
 800242a:	d00c      	beq.n	8002446 <TIM_Base_SetConfig+0x7a>
 800242c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002430:	4290      	cmp	r0, r2
 8002432:	d008      	beq.n	8002446 <TIM_Base_SetConfig+0x7a>
 8002434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002438:	4290      	cmp	r0, r2
 800243a:	d108      	bne.n	800244e <TIM_Base_SetConfig+0x82>
 800243c:	e003      	b.n	8002446 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002442:	684d      	ldr	r5, [r1, #4]
 8002444:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244a:	68cd      	ldr	r5, [r1, #12]
 800244c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244e:	694a      	ldr	r2, [r1, #20]
 8002450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002456:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002458:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800245a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800245e:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002460:	b926      	cbnz	r6, 800246c <TIM_Base_SetConfig+0xa0>
 8002462:	b91f      	cbnz	r7, 800246c <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8002464:	2301      	movs	r3, #1
}
 8002466:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8002468:	6143      	str	r3, [r0, #20]
}
 800246a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800246c:	690b      	ldr	r3, [r1, #16]
 800246e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002470:	2301      	movs	r3, #1
}
 8002472:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8002474:	6143      	str	r3, [r0, #20]
}
 8002476:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800247c:	684a      	ldr	r2, [r1, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	e7e1      	b.n	8002446 <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002488:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800248c:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002490:	d0d9      	beq.n	8002446 <TIM_Base_SetConfig+0x7a>
 8002492:	2f00      	cmp	r7, #0
 8002494:	d1d7      	bne.n	8002446 <TIM_Base_SetConfig+0x7a>
 8002496:	e7ba      	b.n	800240e <TIM_Base_SetConfig+0x42>
 8002498:	40010000 	.word	0x40010000
 800249c:	40010400 	.word	0x40010400
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40000c00 	.word	0x40000c00

080024ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80024ac:	b1b8      	cbz	r0, 80024de <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80024b2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80024b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024b8:	4604      	mov	r4, r0
 80024ba:	b15b      	cbz	r3, 80024d4 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024be:	6820      	ldr	r0, [r4, #0]
 80024c0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80024c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c6:	f7ff ff81 	bl	80023cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80024ca:	2301      	movs	r3, #1
  return HAL_OK;
 80024cc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80024d2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024d8:	f001 fc14 	bl	8003d04 <HAL_TIM_Base_MspInit>
 80024dc:	e7ee      	b.n	80024bc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80024de:	2001      	movs	r0, #1
}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80024e4:	b1b8      	cbz	r0, 8002516 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80024ea:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80024ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024f0:	4604      	mov	r4, r0
 80024f2:	b15b      	cbz	r3, 800250c <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f6:	6820      	ldr	r0, [r4, #0]
 80024f8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80024fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fe:	f7ff ff65 	bl	80023cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002502:	2301      	movs	r3, #1
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002506:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800250a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800250c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002510:	f7ff feb2 	bl	8002278 <HAL_TIM_PWM_MspInit>
 8002514:	e7ee      	b.n	80024f4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002516:	2001      	movs	r0, #1
}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <TIM_OC2_SetConfig>:
{
 800251c:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251e:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002520:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002522:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002526:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800252a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800252c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800252e:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 8002530:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx = TIMx->CCMR1;
 8002534:	6987      	ldr	r7, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002536:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800253a:	4d11      	ldr	r5, [pc, #68]	; (8002580 <TIM_OC2_SetConfig+0x64>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800253c:	403a      	ands	r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800253e:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002540:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002544:	d00a      	beq.n	800255c <TIM_OC2_SetConfig+0x40>
 8002546:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800254a:	42a8      	cmp	r0, r5
 800254c:	d006      	beq.n	800255c <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 800254e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002550:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002552:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002554:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002556:	6203      	str	r3, [r0, #32]
}
 8002558:	bcf0      	pop	{r4, r5, r6, r7}
 800255a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800255c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002560:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002562:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002564:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002568:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800256a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800256e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002574:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002578:	e7e9      	b.n	800254e <TIM_OC2_SetConfig+0x32>
 800257a:	bf00      	nop
 800257c:	feff8cff 	.word	0xfeff8cff
 8002580:	40010000 	.word	0x40010000

08002584 <HAL_TIM_PWM_ConfigChannel>:
{
 8002584:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002586:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	f000 808d 	beq.w	80026aa <HAL_TIM_PWM_ConfigChannel+0x126>
 8002590:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8002592:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002594:	2101      	movs	r1, #1
 8002596:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800259c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  switch (Channel)
 80025a0:	2a14      	cmp	r2, #20
 80025a2:	d81d      	bhi.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80025a4:	e8df f002 	tbb	[pc, r2]
 80025a8:	1c1c1c0b 	.word	0x1c1c1c0b
 80025ac:	1c1c1c37 	.word	0x1c1c1c37
 80025b0:	1c1c1c4a 	.word	0x1c1c1c4a
 80025b4:	1c1c1c5c 	.word	0x1c1c1c5c
 80025b8:	1c1c1c6f 	.word	0x1c1c1c6f
 80025bc:	24          	.byte	0x24
 80025bd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025be:	4629      	mov	r1, r5
 80025c0:	6800      	ldr	r0, [r0, #0]
 80025c2:	f7ff fd77 	bl	80020b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025ca:	6999      	ldr	r1, [r3, #24]
 80025cc:	f041 0108 	orr.w	r1, r1, #8
 80025d0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025d2:	6999      	ldr	r1, [r3, #24]
 80025d4:	f021 0104 	bic.w	r1, r1, #4
 80025d8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	4302      	orrs	r2, r0
 80025de:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80025e0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	2201      	movs	r2, #1
  return HAL_OK;
 80025e4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80025e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80025ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025f0:	4629      	mov	r1, r5
 80025f2:	6800      	ldr	r0, [r0, #0]
 80025f4:	f7ff fe16 	bl	8002224 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025fa:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025fe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002602:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002606:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800260a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800260c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800260e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002614:	e7e4      	b.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002616:	4629      	mov	r1, r5
 8002618:	6800      	ldr	r0, [r0, #0]
 800261a:	f7ff ff7f 	bl	800251c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800261e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002620:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002622:	6999      	ldr	r1, [r3, #24]
 8002624:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002628:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800262a:	6999      	ldr	r1, [r3, #24]
 800262c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002630:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002638:	619a      	str	r2, [r3, #24]
      break;
 800263a:	e7d1      	b.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263c:	4629      	mov	r1, r5
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	f7ff fd68 	bl	8002114 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002644:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002646:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002648:	69d9      	ldr	r1, [r3, #28]
 800264a:	f041 0108 	orr.w	r1, r1, #8
 800264e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002650:	69d9      	ldr	r1, [r3, #28]
 8002652:	f021 0104 	bic.w	r1, r1, #4
 8002656:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	4302      	orrs	r2, r0
 800265c:	61da      	str	r2, [r3, #28]
      break;
 800265e:	e7bf      	b.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002660:	4629      	mov	r1, r5
 8002662:	6800      	ldr	r0, [r0, #0]
 8002664:	f7ff fd8a 	bl	800217c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002668:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800266a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800266c:	69d9      	ldr	r1, [r3, #28]
 800266e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002672:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002674:	69d9      	ldr	r1, [r3, #28]
 8002676:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800267a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002682:	61da      	str	r2, [r3, #28]
      break;
 8002684:	e7ac      	b.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002686:	4629      	mov	r1, r5
 8002688:	6800      	ldr	r0, [r0, #0]
 800268a:	f7ff fda1 	bl	80021d0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800268e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002690:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002692:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002694:	f041 0108 	orr.w	r1, r1, #8
 8002698:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800269a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800269c:	f021 0104 	bic.w	r1, r1, #4
 80026a0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80026a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026a4:	4302      	orrs	r2, r0
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026a8:	e79a      	b.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 80026aa:	2002      	movs	r0, #2
}
 80026ac:	bd38      	pop	{r3, r4, r5, pc}
 80026ae:	bf00      	nop

080026b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d025      	beq.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026b8:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80026ba:	2302      	movs	r3, #2
{
 80026bc:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026be:	4d13      	ldr	r5, [pc, #76]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026c4:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80026c6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80026c8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026ca:	d016      	beq.n	80026fa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80026cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026d0:	42aa      	cmp	r2, r5
 80026d2:	d012      	beq.n	80026fa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026d4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80026d6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	2601      	movs	r6, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e2:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e4:	4321      	orrs	r1, r4

  __HAL_UNLOCK(htim);
 80026e6:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80026e8:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 80026ea:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026f0:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80026f4:	4628      	mov	r0, r5
 80026f6:	bc70      	pop	{r4, r5, r6}
 80026f8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026fe:	684d      	ldr	r5, [r1, #4]
 8002700:	432b      	orrs	r3, r5
 8002702:	e7e7      	b.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8002704:	2302      	movs	r3, #2
}
 8002706:	4618      	mov	r0, r3
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000

08002710 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002712:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8002714:	2e20      	cmp	r6, #32
 8002716:	d13b      	bne.n	8002790 <HAL_UART_Transmit_DMA+0x80>
  {
    if ((pData == NULL) || (Size == 0U))
 8002718:	2900      	cmp	r1, #0
 800271a:	d03b      	beq.n	8002794 <HAL_UART_Transmit_DMA+0x84>
 800271c:	fab2 f782 	clz	r7, r2
 8002720:	097f      	lsrs	r7, r7, #5
 8002722:	2f00      	cmp	r7, #0
 8002724:	d136      	bne.n	8002794 <HAL_UART_Transmit_DMA+0x84>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002726:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800272a:	2c01      	cmp	r4, #1
 800272c:	d030      	beq.n	8002790 <HAL_UART_Transmit_DMA+0x80>
 800272e:	4613      	mov	r3, r2
 8002730:	4605      	mov	r5, r0
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002732:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 8002734:	2401      	movs	r4, #1

    if (huart->hdmatx != NULL)
 8002736:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
    huart->TxXferCount = Size;
 800273a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800273e:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002740:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->TxXferSize  = Size;
 8002742:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002746:	6742      	str	r2, [r0, #116]	; 0x74
    __HAL_LOCK(huart);
 8002748:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
 800274c:	6802      	ldr	r2, [r0, #0]
    if (huart->hdmatx != NULL)
 800274e:	f1be 0f00 	cmp.w	lr, #0
 8002752:	d012      	beq.n	800277a <HAL_UART_Transmit_DMA+0x6a>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002754:	f8df c054 	ldr.w	ip, [pc, #84]	; 80027ac <HAL_UART_Transmit_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002758:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800275c:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002760:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80027b0 <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002764:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002768:	4670      	mov	r0, lr
      huart->hdmatx->XferAbortCallback = NULL;
 800276a:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800276e:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002772:	f7fe f989 	bl	8000a88 <HAL_DMA_Start_IT>
 8002776:	b978      	cbnz	r0, 8002798 <HAL_UART_Transmit_DMA+0x88>
 8002778:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800277a:	2340      	movs	r3, #64	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800277c:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800277e:	6213      	str	r3, [r2, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);

    return HAL_OK;
 8002780:	4608      	mov	r0, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002782:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8002784:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002790:	2002      	movs	r0, #2
}
 8002792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002794:	2001      	movs	r0, #1
}
 8002796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002798:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800279a:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800279e:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80027a0:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80027a2:	676e      	str	r6, [r5, #116]	; 0x74
}
 80027a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027e9 	.word	0x080027e9
 80027b0:	080027f9 	.word	0x080027f9

080027b4 <HAL_UART_TxCpltCallback>:
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop

080027b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80027b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80027ba:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	d00c      	beq.n	80027de <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027c4:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027da:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80027dc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80027de:	f7ff ffe9 	bl	80027b4 <HAL_UART_TxCpltCallback>
}
 80027e2:	bd08      	pop	{r3, pc}

080027e4 <HAL_UART_TxHalfCpltCallback>:
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027e8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80027ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80027ec:	f7ff fffa 	bl	80027e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027f0:	bd08      	pop	{r3, pc}
 80027f2:	bf00      	nop

080027f4 <HAL_UART_ErrorCallback>:
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027f8:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80027fa:	681a      	ldr	r2, [r3, #0]
{
 80027fc:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80027fe:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002800:	6f98      	ldr	r0, [r3, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002802:	6891      	ldr	r1, [r2, #8]
 8002804:	0609      	lsls	r1, r1, #24
 8002806:	d501      	bpl.n	800280c <UART_DMAError+0x14>
 8002808:	2c21      	cmp	r4, #33	; 0x21
 800280a:	d01b      	beq.n	8002844 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800280c:	6891      	ldr	r1, [r2, #8]
 800280e:	0649      	lsls	r1, r1, #25
 8002810:	d501      	bpl.n	8002816 <UART_DMAError+0x1e>
 8002812:	2822      	cmp	r0, #34	; 0x22
 8002814:	d007      	beq.n	8002826 <UART_DMAError+0x2e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002816:	6fda      	ldr	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002818:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800281a:	f042 0210 	orr.w	r2, r2, #16
 800281e:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8002820:	f7ff ffe8 	bl	80027f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002824:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8002826:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800282a:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282e:	6811      	ldr	r1, [r2, #0]
 8002830:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8002834:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	6891      	ldr	r1, [r2, #8]
 8002838:	f021 0101 	bic.w	r1, r1, #1
 800283c:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 800283e:	6618      	str	r0, [r3, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 8002840:	679c      	str	r4, [r3, #120]	; 0x78
 8002842:	e7e8      	b.n	8002816 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 8002844:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8002846:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8002848:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800284c:	6811      	ldr	r1, [r2, #0]
 800284e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002852:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002854:	675c      	str	r4, [r3, #116]	; 0x74
 8002856:	e7d9      	b.n	800280c <UART_DMAError+0x14>

08002858 <UART_SetConfig>:
{
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800285c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800285e:	49af      	ldr	r1, [pc, #700]	; (8002b1c <UART_SetConfig+0x2c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002860:	69e6      	ldr	r6, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002862:	68e7      	ldr	r7, [r4, #12]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002864:	4dae      	ldr	r5, [pc, #696]	; (8002b20 <UART_SetConfig+0x2c8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002866:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 800286a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800286c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800286e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002870:	6818      	ldr	r0, [r3, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002872:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002874:	ea01 0100 	and.w	r1, r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002878:	ea42 0206 	orr.w	r2, r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800287c:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002880:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002882:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002884:	6858      	ldr	r0, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002886:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
  tmpreg |= huart->Init.OneBitSampling;
 800288c:	ea42 0201 	orr.w	r2, r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	ea40 0007 	orr.w	r0, r0, r7
 8002894:	6058      	str	r0, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800289c:	ea42 0201 	orr.w	r2, r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a2:	d041      	beq.n	8002928 <UART_SetConfig+0xd0>
 80028a4:	4a9f      	ldr	r2, [pc, #636]	; (8002b24 <UART_SetConfig+0x2cc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01b      	beq.n	80028e2 <UART_SetConfig+0x8a>
 80028aa:	4a9f      	ldr	r2, [pc, #636]	; (8002b28 <UART_SetConfig+0x2d0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	f000 80b1 	beq.w	8002a14 <UART_SetConfig+0x1bc>
 80028b2:	4a9e      	ldr	r2, [pc, #632]	; (8002b2c <UART_SetConfig+0x2d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f000 80df 	beq.w	8002a78 <UART_SetConfig+0x220>
 80028ba:	4a9d      	ldr	r2, [pc, #628]	; (8002b30 <UART_SetConfig+0x2d8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d053      	beq.n	8002968 <UART_SetConfig+0x110>
 80028c0:	4a9c      	ldr	r2, [pc, #624]	; (8002b34 <UART_SetConfig+0x2dc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	f000 80be 	beq.w	8002a44 <UART_SetConfig+0x1ec>
 80028c8:	4a9b      	ldr	r2, [pc, #620]	; (8002b38 <UART_SetConfig+0x2e0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f000 8105 	beq.w	8002ada <UART_SetConfig+0x282>
 80028d0:	4a9a      	ldr	r2, [pc, #616]	; (8002b3c <UART_SetConfig+0x2e4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	f000 8111 	beq.w	8002afa <UART_SetConfig+0x2a2>
  huart->RxISR = NULL;
 80028d8:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 80028da:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80028dc:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80028e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80028e6:	4b96      	ldr	r3, [pc, #600]	; (8002b40 <UART_SetConfig+0x2e8>)
 80028e8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028ec:	f002 020c 	and.w	r2, r2, #12
 80028f0:	4413      	add	r3, r2
 80028f2:	791b      	ldrb	r3, [r3, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80028f8:	d01e      	beq.n	8002938 <UART_SetConfig+0xe0>
    switch (clocksource)
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d8ec      	bhi.n	80028d8 <UART_SetConfig+0x80>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <UART_SetConfig+0xac>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002a03 	.word	0x08002a03
 8002908:	08002995 	.word	0x08002995
 800290c:	08002ab3 	.word	0x08002ab3
 8002910:	080028d9 	.word	0x080028d9
 8002914:	08002a5b 	.word	0x08002a5b
 8002918:	080028d9 	.word	0x080028d9
 800291c:	080028d9 	.word	0x080028d9
 8002920:	080028d9 	.word	0x080028d9
 8002924:	08002a35 	.word	0x08002a35
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002928:	4b86      	ldr	r3, [pc, #536]	; (8002b44 <UART_SetConfig+0x2ec>)
 800292a:	4a85      	ldr	r2, [pc, #532]	; (8002b40 <UART_SetConfig+0x2e8>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	e7dd      	b.n	80028f4 <UART_SetConfig+0x9c>
    switch (clocksource)
 8002938:	2b08      	cmp	r3, #8
 800293a:	d8cd      	bhi.n	80028d8 <UART_SetConfig+0x80>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <UART_SetConfig+0xec>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002a6d 	.word	0x08002a6d
 8002948:	080029bf 	.word	0x080029bf
 800294c:	08002a93 	.word	0x08002a93
 8002950:	080028d9 	.word	0x080028d9
 8002954:	08002a73 	.word	0x08002a73
 8002958:	080028d9 	.word	0x080028d9
 800295c:	080028d9 	.word	0x080028d9
 8002960:	080028d9 	.word	0x080028d9
 8002964:	08002aa3 	.word	0x08002aa3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <UART_SetConfig+0x2ec>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d06d      	beq.n	8002a54 <UART_SetConfig+0x1fc>
 8002978:	d93d      	bls.n	80029f6 <UART_SetConfig+0x19e>
 800297a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297e:	f000 8085 	beq.w	8002a8c <UART_SetConfig+0x234>
 8002982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002986:	d052      	beq.n	8002a2e <UART_SetConfig+0x1d6>
 8002988:	e7a6      	b.n	80028d8 <UART_SetConfig+0x80>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1a4      	bne.n	80028d8 <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002992:	d014      	beq.n	80029be <UART_SetConfig+0x166>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002994:	f7fe fdda 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 8002998:	6862      	ldr	r2, [r4, #4]
 800299a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800299e:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a2:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a4:	f1a3 0110 	sub.w	r1, r3, #16
 80029a8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80029ac:	4291      	cmp	r1, r2
 80029ae:	d893      	bhi.n	80028d8 <UART_SetConfig+0x80>
      huart->Instance->BRR = usartdiv;
 80029b0:	6822      	ldr	r2, [r4, #0]
 80029b2:	2000      	movs	r0, #0
 80029b4:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80029b6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80029b8:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80029bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029be:	f7fe fdc5 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 80029c2:	6862      	ldr	r2, [r4, #4]
 80029c4:	0853      	lsrs	r3, r2, #1
 80029c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80029ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80029ce:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d0:	f1a3 0110 	sub.w	r1, r3, #16
 80029d4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80029d8:	4291      	cmp	r1, r2
 80029da:	f63f af7d 	bhi.w	80028d8 <UART_SetConfig+0x80>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029de:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80029e6:	6821      	ldr	r1, [r4, #0]
 80029e8:	2000      	movs	r0, #0
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 80029ee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80029f0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80029f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f af6e 	bne.w	80028d8 <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002a00:	d034      	beq.n	8002a6c <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a02:	f7fe fd93 	bl	800152c <HAL_RCC_GetPCLK1Freq>
 8002a06:	6862      	ldr	r2, [r4, #4]
 8002a08:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a10:	b29b      	uxth	r3, r3
        break;
 8002a12:	e7c7      	b.n	80029a4 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a14:	4b4b      	ldr	r3, [pc, #300]	; (8002b44 <UART_SetConfig+0x2ec>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d018      	beq.n	8002a54 <UART_SetConfig+0x1fc>
 8002a22:	d9e8      	bls.n	80029f6 <UART_SetConfig+0x19e>
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d031      	beq.n	8002a8c <UART_SetConfig+0x234>
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	f47f af55 	bne.w	80028d8 <UART_SetConfig+0x80>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002a32:	d036      	beq.n	8002aa2 <UART_SetConfig+0x24a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a34:	6862      	ldr	r2, [r4, #4]
 8002a36:	0853      	lsrs	r3, r2, #1
 8002a38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a40:	b29b      	uxth	r3, r3
        break;
 8002a42:	e7af      	b.n	80029a4 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <UART_SetConfig+0x2ec>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d136      	bne.n	8002ac2 <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a54:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002a58:	d00b      	beq.n	8002a72 <UART_SetConfig+0x21a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a5a:	f7fe fc95 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 8002a5e:	6862      	ldr	r2, [r4, #4]
 8002a60:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a68:	b29b      	uxth	r3, r3
        break;
 8002a6a:	e79b      	b.n	80029a4 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a6c:	f7fe fd5e 	bl	800152c <HAL_RCC_GetPCLK1Freq>
 8002a70:	e7a7      	b.n	80029c2 <UART_SetConfig+0x16a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a72:	f7fe fc89 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 8002a76:	e7a4      	b.n	80029c2 <UART_SetConfig+0x16a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a78:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <UART_SetConfig+0x2ec>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d0e6      	beq.n	8002a54 <UART_SetConfig+0x1fc>
 8002a86:	d9b6      	bls.n	80029f6 <UART_SetConfig+0x19e>
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d123      	bne.n	8002ad4 <UART_SetConfig+0x27c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002a90:	d10f      	bne.n	8002ab2 <UART_SetConfig+0x25a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a92:	6862      	ldr	r2, [r4, #4]
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <UART_SetConfig+0x2f0>)
 8002a96:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9e:	b29b      	uxth	r3, r3
        break;
 8002aa0:	e796      	b.n	80029d0 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002aa2:	6862      	ldr	r2, [r4, #4]
 8002aa4:	0853      	lsrs	r3, r2, #1
 8002aa6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aae:	b29b      	uxth	r3, r3
        break;
 8002ab0:	e78e      	b.n	80029d0 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ab2:	6862      	ldr	r2, [r4, #4]
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <UART_SetConfig+0x2f4>)
 8002ab6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002abe:	b29b      	uxth	r3, r3
        break;
 8002ac0:	e770      	b.n	80029a4 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac2:	f67f af62 	bls.w	800298a <UART_SetConfig+0x132>
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aca:	d0df      	beq.n	8002a8c <UART_SetConfig+0x234>
 8002acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ad0:	d0ad      	beq.n	8002a2e <UART_SetConfig+0x1d6>
 8002ad2:	e701      	b.n	80028d8 <UART_SetConfig+0x80>
 8002ad4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ad6:	d0aa      	beq.n	8002a2e <UART_SetConfig+0x1d6>
 8002ad8:	e6fe      	b.n	80028d8 <UART_SetConfig+0x80>
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <UART_SetConfig+0x2ec>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d0b4      	beq.n	8002a54 <UART_SetConfig+0x1fc>
 8002aea:	d984      	bls.n	80029f6 <UART_SetConfig+0x19e>
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af0:	d0cc      	beq.n	8002a8c <UART_SetConfig+0x234>
 8002af2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002af6:	d09a      	beq.n	8002a2e <UART_SetConfig+0x1d6>
 8002af8:	e6ee      	b.n	80028d8 <UART_SetConfig+0x80>
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <UART_SetConfig+0x2ec>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b08:	d0a4      	beq.n	8002a54 <UART_SetConfig+0x1fc>
 8002b0a:	f67f af74 	bls.w	80029f6 <UART_SetConfig+0x19e>
 8002b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b12:	d0bb      	beq.n	8002a8c <UART_SetConfig+0x234>
 8002b14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b18:	d089      	beq.n	8002a2e <UART_SetConfig+0x1d6>
 8002b1a:	e6dd      	b.n	80028d8 <UART_SetConfig+0x80>
 8002b1c:	efff69f3 	.word	0xefff69f3
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40004400 	.word	0x40004400
 8002b28:	40004800 	.word	0x40004800
 8002b2c:	40004c00 	.word	0x40004c00
 8002b30:	40005000 	.word	0x40005000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	40007800 	.word	0x40007800
 8002b3c:	40007c00 	.word	0x40007c00
 8002b40:	08006ac0 	.word	0x08006ac0
 8002b44:	40023800 	.word	0x40023800
 8002b48:	01e84800 	.word	0x01e84800
 8002b4c:	00f42400 	.word	0x00f42400

08002b50 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b52:	07da      	lsls	r2, r3, #31
{
 8002b54:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b56:	d506      	bpl.n	8002b66 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b58:	6801      	ldr	r1, [r0, #0]
 8002b5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002b5c:	684a      	ldr	r2, [r1, #4]
 8002b5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b62:	4322      	orrs	r2, r4
 8002b64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b66:	079c      	lsls	r4, r3, #30
 8002b68:	d506      	bpl.n	8002b78 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b6a:	6801      	ldr	r1, [r0, #0]
 8002b6c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002b6e:	684a      	ldr	r2, [r1, #4]
 8002b70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b74:	4322      	orrs	r2, r4
 8002b76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b78:	0759      	lsls	r1, r3, #29
 8002b7a:	d506      	bpl.n	8002b8a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b7c:	6801      	ldr	r1, [r0, #0]
 8002b7e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002b80:	684a      	ldr	r2, [r1, #4]
 8002b82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b86:	4322      	orrs	r2, r4
 8002b88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8a:	071a      	lsls	r2, r3, #28
 8002b8c:	d506      	bpl.n	8002b9c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b8e:	6801      	ldr	r1, [r0, #0]
 8002b90:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002b92:	684a      	ldr	r2, [r1, #4]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	4322      	orrs	r2, r4
 8002b9a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b9c:	06dc      	lsls	r4, r3, #27
 8002b9e:	d506      	bpl.n	8002bae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ba0:	6801      	ldr	r1, [r0, #0]
 8002ba2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ba4:	688a      	ldr	r2, [r1, #8]
 8002ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002baa:	4322      	orrs	r2, r4
 8002bac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bae:	0699      	lsls	r1, r3, #26
 8002bb0:	d506      	bpl.n	8002bc0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb2:	6801      	ldr	r1, [r0, #0]
 8002bb4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002bb6:	688a      	ldr	r2, [r1, #8]
 8002bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bbc:	4322      	orrs	r2, r4
 8002bbe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bc0:	065a      	lsls	r2, r3, #25
 8002bc2:	d50a      	bpl.n	8002bda <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc4:	6801      	ldr	r1, [r0, #0]
 8002bc6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002bc8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002bd2:	ea42 0204 	orr.w	r2, r2, r4
 8002bd6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bd8:	d00b      	beq.n	8002bf2 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	d506      	bpl.n	8002bec <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002be2:	6853      	ldr	r3, [r2, #4]
 8002be4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6053      	str	r3, [r2, #4]
}
 8002bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bf0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bf2:	684a      	ldr	r2, [r1, #4]
 8002bf4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002bf6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002bfa:	4322      	orrs	r2, r4
 8002bfc:	604a      	str	r2, [r1, #4]
 8002bfe:	e7ec      	b.n	8002bda <UART_AdvFeatureConfig+0x8a>

08002c00 <UART_WaitOnFlagUntilTimeout>:
{
 8002c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c04:	9d08      	ldr	r5, [sp, #32]
 8002c06:	4680      	mov	r8, r0
 8002c08:	460f      	mov	r7, r1
 8002c0a:	4616      	mov	r6, r2
 8002c0c:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0e:	f8d8 4000 	ldr.w	r4, [r8]
 8002c12:	e001      	b.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 8002c14:	1c6b      	adds	r3, r5, #1
 8002c16:	d10a      	bne.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c18:	69e0      	ldr	r0, [r4, #28]
 8002c1a:	ea37 0300 	bics.w	r3, r7, r0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2001      	moveq	r0, #1
 8002c22:	2000      	movne	r0, #0
 8002c24:	42b0      	cmp	r0, r6
 8002c26:	d0f5      	beq.n	8002c14 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8002c28:	2000      	movs	r0, #0
}
 8002c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fd fcff 	bl	8000630 <HAL_GetTick>
 8002c32:	eba0 0009 	sub.w	r0, r0, r9
 8002c36:	42a8      	cmp	r0, r5
 8002c38:	d801      	bhi.n	8002c3e <UART_WaitOnFlagUntilTimeout+0x3e>
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d1e7      	bne.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c3e:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 8002c42:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8002c44:	2400      	movs	r4, #0
 8002c46:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002c58:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8002c5c:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8002c60:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 8002c64:	e7e1      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x2a>
 8002c66:	bf00      	nop

08002c68 <HAL_UART_Transmit>:
{
 8002c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002c6e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002c70:	b084      	sub	sp, #16
  if (huart->gState == HAL_UART_STATE_READY)
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d13e      	bne.n	8002cf4 <HAL_UART_Transmit+0x8c>
 8002c76:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d03f      	beq.n	8002cfc <HAL_UART_Transmit+0x94>
 8002c7c:	fab2 f682 	clz	r6, r2
 8002c80:	9203      	str	r2, [sp, #12]
 8002c82:	0976      	lsrs	r6, r6, #5
 8002c84:	2e00      	cmp	r6, #0
 8002c86:	d139      	bne.n	8002cfc <HAL_UART_Transmit+0x94>
    __HAL_LOCK(huart);
 8002c88:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d030      	beq.n	8002cf4 <HAL_UART_Transmit+0x8c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c92:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002c94:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8002c98:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002c9e:	f7fd fcc7 	bl	8000630 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8002ca4:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 8002ca6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8002cac:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cb0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb4:	d109      	bne.n	8002cca <HAL_UART_Transmit+0x62>
 8002cb6:	e036      	b.n	8002d26 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8002cbe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cca:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b1db      	cbz	r3, 8002d0c <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd4:	4643      	mov	r3, r8
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff ff90 	bl	8002c00 <UART_WaitOnFlagUntilTimeout>
 8002ce0:	b980      	cbnz	r0, 8002d04 <HAL_UART_Transmit+0x9c>
 8002ce2:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8002ce4:	2d00      	cmp	r5, #0
 8002ce6:	d1e7      	bne.n	8002cb8 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce8:	f836 2b02 	ldrh.w	r2, [r6], #2
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf2:	e7e4      	b.n	8002cbe <HAL_UART_Transmit+0x56>
    return HAL_BUSY;
 8002cf4:	2002      	movs	r0, #2
}
 8002cf6:	b004      	add	sp, #16
 8002cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
}
 8002cfe:	b004      	add	sp, #16
 8002d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8002d04:	2003      	movs	r0, #3
}
 8002d06:	b004      	add	sp, #16
 8002d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d0c:	4643      	mov	r3, r8
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff ff74 	bl	8002c00 <UART_WaitOnFlagUntilTimeout>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1f3      	bne.n	8002d04 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_READY;
 8002d1c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002d1e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8002d22:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002d24:	e7e7      	b.n	8002cf6 <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d26:	6923      	ldr	r3, [r4, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ce      	bne.n	8002cca <HAL_UART_Transmit+0x62>
 8002d2c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8002d2e:	461d      	mov	r5, r3
 8002d30:	e7cb      	b.n	8002cca <HAL_UART_Transmit+0x62>
 8002d32:	bf00      	nop

08002d34 <UART_CheckIdleState>:
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	2500      	movs	r5, #0
{
 8002d38:	4604      	mov	r4, r0
 8002d3a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3c:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002d3e:	f7fd fc77 	bl	8000630 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	0713      	lsls	r3, r2, #28
 8002d48:	d408      	bmi.n	8002d5c <UART_CheckIdleState+0x28>
  __HAL_UNLOCK(huart);
 8002d4a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	2220      	movs	r2, #32
  return HAL_OK;
 8002d4e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002d52:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002d56:	67a2      	str	r2, [r4, #120]	; 0x78
}
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d5c:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 8002d60:	4603      	mov	r3, r0
 8002d62:	462a      	mov	r2, r5
 8002d64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d68:	9600      	str	r6, [sp, #0]
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff ff48 	bl	8002c00 <UART_WaitOnFlagUntilTimeout>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d0ea      	beq.n	8002d4a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002d74:	2003      	movs	r0, #3
}
 8002d76:	b002      	add	sp, #8
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
 8002d7a:	bf00      	nop

08002d7c <HAL_UART_Init>:
  if (huart == NULL)
 8002d7c:	b370      	cbz	r0, 8002ddc <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002d80:	b510      	push	{r4, lr}
 8002d82:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d84:	b1fb      	cbz	r3, 8002dc6 <HAL_UART_Init+0x4a>
  __HAL_UART_DISABLE(huart);
 8002d86:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d88:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d8a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d96:	f7ff fd5f 	bl	8002858 <UART_SetConfig>
 8002d9a:	2801      	cmp	r0, #1
 8002d9c:	d018      	beq.n	8002dd0 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002da0:	b9c3      	cbnz	r3, 8002dd4 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002da4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
}
 8002dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002dc0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002dc2:	f7ff bfb7 	b.w	8002d34 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002dca:	f001 f81f 	bl	8003e0c <HAL_UART_MspInit>
 8002dce:	e7da      	b.n	8002d86 <HAL_UART_Init+0xa>
}
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7ff febb 	bl	8002b50 <UART_AdvFeatureConfig>
 8002dda:	e7e2      	b.n	8002da2 <HAL_UART_Init+0x26>
}
 8002ddc:	2001      	movs	r0, #1
 8002dde:	4770      	bx	lr

08002de0 <HAL_GPIO_EXTI_Callback>:
#include "main.h"
#include "platform/f7-disco-gcc/board/ButtonController.h"
#include "trace/trace.h"
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    switch (GPIO_Pin)
 8002de0:	2808      	cmp	r0, #8
 8002de2:	d007      	beq.n	8002df4 <HAL_GPIO_EXTI_Callback+0x14>
 8002de4:	d904      	bls.n	8002df0 <HAL_GPIO_EXTI_Callback+0x10>
 8002de6:	2840      	cmp	r0, #64	; 0x40
 8002de8:	d004      	beq.n	8002df4 <HAL_GPIO_EXTI_Callback+0x14>
 8002dea:	2880      	cmp	r0, #128	; 0x80
 8002dec:	d002      	beq.n	8002df4 <HAL_GPIO_EXTI_Callback+0x14>
 8002dee:	4770      	bx	lr
 8002df0:	2804      	cmp	r0, #4
 8002df2:	d1fc      	bne.n	8002dee <HAL_GPIO_EXTI_Callback+0xe>
{
 8002df4:	b508      	push	{r3, lr}
    {
    case BUTTON0_Pin:
    case BUTTON1_Pin:
    case BUTTON2_Pin:
    case BUTTON3_Pin:
    ButtonController::getInstance()->onIrq();
 8002df6:	f001 fd13 	bl	8004820 <_ZN16ButtonController11getInstanceEv>
 8002dfa:	6803      	ldr	r3, [r0, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4798      	blx	r3
    Trace::out("Interrupt\r\n");
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <HAL_GPIO_EXTI_Callback+0x2c>)
        break;
    default:
        break;
    }
}
 8002e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Trace::out("Interrupt\r\n");
 8002e06:	f001 bd27 	b.w	8004858 <_ZN5Trace3outEPKcz>
 8002e0a:	bf00      	nop
 8002e0c:	08006eac 	.word	0x08006eac

08002e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e14:	2230      	movs	r2, #48	; 0x30
 8002e16:	2100      	movs	r1, #0
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e18:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1c:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e1e:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e20:	f002 fd26 	bl	8005870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e24:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e26:	2284      	movs	r2, #132	; 0x84
 8002e28:	a813      	add	r0, sp, #76	; 0x4c
 8002e2a:	4619      	mov	r1, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e2c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e2e:	2609      	movs	r6, #9
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e34:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e38:	f002 fd1a 	bl	8005870 <memset>
  HAL_PWR_EnableBkUpAccess();
 8002e3c:	f7fe f846 	bl	8000ecc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <SystemClock_Config+0xcc>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e42:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <SystemClock_Config+0xd0>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e44:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e48:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002e4c:	6419      	str	r1, [r3, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e4e:	2101      	movs	r1, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e5a:	6813      	ldr	r3, [r2, #0]
 8002e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e68:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e6c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e6e:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e76:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002e78:	2119      	movs	r1, #25
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e7a:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e80:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e82:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e84:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e86:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e88:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002e8a:	e9cd 510e 	strd	r5, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e8e:	f7fe f8af 	bl	8000ff0 <HAL_RCC_OscConfig>
 8002e92:	b100      	cbz	r0, 8002e96 <SystemClock_Config+0x86>
 8002e94:	e7fe      	b.n	8002e94 <SystemClock_Config+0x84>
 8002e96:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e9c:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e9e:	f44f 55a0 	mov.w	r5, #5120	; 0x1400

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ea2:	a802      	add	r0, sp, #8
 8002ea4:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ea6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ea8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eaa:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002eac:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002eb0:	f7fe fa9e 	bl	80013f0 <HAL_RCC_ClockConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b100      	cbz	r0, 8002eba <SystemClock_Config+0xaa>
 8002eb8:	e7fe      	b.n	8002eb8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002eba:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <SystemClock_Config+0xd4>)
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec0:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ec2:	9324      	str	r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002ec4:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ec6:	932c      	str	r3, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002ec8:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002eca:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ecc:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ece:	f7fe fb4d 	bl	800156c <HAL_RCCEx_PeriphCLKConfig>
 8002ed2:	b100      	cbz	r0, 8002ed6 <SystemClock_Config+0xc6>
 8002ed4:	e7fe      	b.n	8002ed4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
  }
}
 8002ed6:	b034      	add	sp, #208	; 0xd0
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	00014860 	.word	0x00014860

08002ee8 <main>:
{
 8002ee8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002eec:	b0a1      	sub	sp, #132	; 0x84
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eee:	2400      	movs	r4, #0
  HAL_Init();
 8002ef0:	f7fd fb86 	bl	8000600 <HAL_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2502      	movs	r5, #2
  SystemClock_Config();
 8002ef6:	f7ff ff8b 	bl	8002e10 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002efa:	4bd2      	ldr	r3, [pc, #840]	; (8003244 <main+0x35c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002efe:	2110      	movs	r1, #16
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002f02:	f04f 0908 	mov.w	r9, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f06:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002f08:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f0c:	f04f 0b0e 	mov.w	fp, #14
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	9419      	str	r4, [sp, #100]	; 0x64

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	2703      	movs	r7, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f14:	6b1e      	ldr	r6, [r3, #48]	; 0x30
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f16:	f04f 080c 	mov.w	r8, #12
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002f1a:	48cb      	ldr	r0, [pc, #812]	; (8003248 <main+0x360>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002f1c:	f04f 0a0a 	mov.w	sl, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f20:	ea46 0c01 	orr.w	ip, r6, r1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f24:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f26:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002f2a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f2e:	ea0c 0c01 	and.w	ip, ip, r1
 8002f32:	f8cd c004 	str.w	ip, [sp, #4]
 8002f36:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f3a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f3e:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8002f42:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002f46:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f4a:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8002f4e:	f8cd c008 	str.w	ip, [sp, #8]
 8002f52:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f56:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f5a:	ea4c 0c05 	orr.w	ip, ip, r5
 8002f5e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002f62:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f66:	ea0c 0c05 	and.w	ip, ip, r5
 8002f6a:	f8cd c00c 	str.w	ip, [sp, #12]
 8002f6e:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f72:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f76:	ea4c 0c09 	orr.w	ip, ip, r9
 8002f7a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002f7e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f82:	ea0c 0c09 	and.w	ip, ip, r9
 8002f86:	f8cd c010 	str.w	ip, [sp, #16]
 8002f8a:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f92:	f04c 0c04 	orr.w	ip, ip, #4
 8002f96:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002f9a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002f9e:	f00c 0c04 	and.w	ip, ip, #4
 8002fa2:	f8cd c014 	str.w	ip, [sp, #20]
 8002fa6:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002fae:	ea4c 0c06 	orr.w	ip, ip, r6
 8002fb2:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002fb6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002fba:	ea0c 0c06 	and.w	ip, ip, r6
 8002fbe:	f8cd c018 	str.w	ip, [sp, #24]
 8002fc2:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fc6:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002fca:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8002fce:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002fd2:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002fd6:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 8002fda:	f8cd c01c 	str.w	ip, [sp, #28]
 8002fde:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fe2:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002fe6:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8002fea:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8002fee:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8002ff2:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 8002ff6:	f8cd c020 	str.w	ip, [sp, #32]
 8002ffa:	f8dd c020 	ldr.w	ip, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ffe:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003002:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 8003006:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800300a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800300e:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 8003012:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8003016:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800301a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800301e:	f04c 0c20 	orr.w	ip, ip, #32
 8003022:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003026:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800302a:	f00c 0c20 	and.w	ip, ip, #32
 800302e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003032:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003036:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800303a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800303e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	930b      	str	r3, [sp, #44]	; 0x2c
 800304a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800304c:	f7fd fe86 	bl	8000d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003050:	4622      	mov	r2, r4
 8003052:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8003056:	487d      	ldr	r0, [pc, #500]	; (800324c <main+0x364>)
 8003058:	f7fd fe80 	bl	8000d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800305c:	4632      	mov	r2, r6
 800305e:	2120      	movs	r1, #32
 8003060:	487b      	ldr	r0, [pc, #492]	; (8003250 <main+0x368>)
 8003062:	f7fd fe7b 	bl	8000d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8003066:	4622      	mov	r2, r4
 8003068:	4649      	mov	r1, r9
 800306a:	487a      	ldr	r0, [pc, #488]	; (8003254 <main+0x36c>)
 800306c:	f7fd fe76 	bl	8000d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8003070:	4622      	mov	r2, r4
 8003072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003076:	4878      	ldr	r0, [pc, #480]	; (8003258 <main+0x370>)
 8003078:	f7fd fe70 	bl	8000d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 800307c:	4622      	mov	r2, r4
 800307e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8003082:	4876      	ldr	r0, [pc, #472]	; (800325c <main+0x374>)
 8003084:	f7fd fe6a 	bl	8000d5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8003088:	4622      	mov	r2, r4
 800308a:	4649      	mov	r1, r9
 800308c:	4874      	ldr	r0, [pc, #464]	; (8003260 <main+0x378>)
 800308e:	f7fd fe65 	bl	8000d5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003092:	2310      	movs	r3, #16
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003094:	a915      	add	r1, sp, #84	; 0x54
 8003096:	4873      	ldr	r0, [pc, #460]	; (8003264 <main+0x37c>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003098:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80030a4:	f7fd fd36 	bl	8000b14 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030a8:	a915      	add	r1, sp, #84	; 0x54
 80030aa:	486e      	ldr	r0, [pc, #440]	; (8003264 <main+0x37c>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80030ac:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030b4:	f7fd fd2e 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80030b8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030bc:	a915      	add	r1, sp, #84	; 0x54
 80030be:	4868      	ldr	r0, [pc, #416]	; (8003260 <main+0x378>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80030c0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030c2:	230b      	movs	r3, #11
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030c6:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030cc:	f7fd fd22 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80030d0:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030d4:	a915      	add	r1, sp, #84	; 0x54
 80030d6:	4863      	ldr	r0, [pc, #396]	; (8003264 <main+0x37c>)
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80030d8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030dc:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030e4:	f7fd fd16 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80030e8:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	a915      	add	r1, sp, #84	; 0x54
 80030ee:	4856      	ldr	r0, [pc, #344]	; (8003248 <main+0x360>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80030f0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030f4:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fc:	f7fd fd0a 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin;
 8003100:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8003102:	a915      	add	r1, sp, #84	; 0x54
 8003104:	4850      	ldr	r0, [pc, #320]	; (8003248 <main+0x360>)
  GPIO_InitStruct.Pin = LED3_Pin;
 8003106:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800310e:	f7fd fd01 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003112:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003114:	a915      	add	r1, sp, #84	; 0x54
 8003116:	484e      	ldr	r0, [pc, #312]	; (8003250 <main+0x368>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003118:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800311e:	e9cd 4918 	strd	r4, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003122:	f7fd fcf7 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003126:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312a:	a915      	add	r1, sp, #84	; 0x54
 800312c:	484e      	ldr	r0, [pc, #312]	; (8003268 <main+0x380>)
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800312e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003134:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003138:	f7fd fcec 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 800313c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	a915      	add	r1, sp, #84	; 0x54
 8003142:	4842      	ldr	r0, [pc, #264]	; (800324c <main+0x364>)
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 8003144:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314c:	f7fd fce2 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003150:	f248 1333 	movw	r3, #33075	; 0x8133
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003154:	a915      	add	r1, sp, #84	; 0x54
 8003156:	4842      	ldr	r0, [pc, #264]	; (8003260 <main+0x378>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003158:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800315e:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003162:	f7fd fcd7 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003166:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800316a:	a915      	add	r1, sp, #84	; 0x54
 800316c:	483f      	ldr	r0, [pc, #252]	; (800326c <main+0x384>)
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800316e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003174:	e9cd 4b18 	strd	r4, fp, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003178:	f7fd fccc 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800317c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003180:	a915      	add	r1, sp, #84	; 0x54
 8003182:	483a      	ldr	r0, [pc, #232]	; (800326c <main+0x384>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003184:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800318a:	f7fd fcc3 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800318e:	f24c 7303 	movw	r3, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003192:	a915      	add	r1, sp, #84	; 0x54
 8003194:	482e      	ldr	r0, [pc, #184]	; (8003250 <main+0x368>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003196:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800319c:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a0:	f7fd fcb8 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80031a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	a915      	add	r1, sp, #84	; 0x54
 80031aa:	4828      	ldr	r0, [pc, #160]	; (800324c <main+0x364>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80031ac:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031b2:	e9cd 7a18 	strd	r7, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f7fd fcad 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80031ba:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80031bc:	a915      	add	r1, sp, #84	; 0x54
 80031be:	4826      	ldr	r0, [pc, #152]	; (8003258 <main+0x370>)
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80031c0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80031c6:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80031ca:	f7fd fca3 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80031ce:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80031d0:	a915      	add	r1, sp, #84	; 0x54
 80031d2:	4820      	ldr	r0, [pc, #128]	; (8003254 <main+0x36c>)
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80031d4:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031da:	e9cd 4b18 	strd	r4, fp, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80031de:	f7fd fc99 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80031e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80031e6:	a915      	add	r1, sp, #84	; 0x54
 80031e8:	481d      	ldr	r0, [pc, #116]	; (8003260 <main+0x378>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80031ee:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80031f4:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80031f6:	f7fd fc8d 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80031fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80031fe:	a915      	add	r1, sp, #84	; 0x54
 8003200:	4817      	ldr	r0, [pc, #92]	; (8003260 <main+0x378>)
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003202:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003208:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800320c:	f7fd fc82 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003210:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003212:	a915      	add	r1, sp, #84	; 0x54
 8003214:	480e      	ldr	r0, [pc, #56]	; (8003250 <main+0x368>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003216:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800321e:	f7fd fc79 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003224:	a915      	add	r1, sp, #84	; 0x54
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003228:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 800322a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800322e:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003230:	f7fd fc70 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003238:	a915      	add	r1, sp, #84	; 0x54
 800323a:	480b      	ldr	r0, [pc, #44]	; (8003268 <main+0x380>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800323c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8003242:	e017      	b.n	8003274 <main+0x38c>
 8003244:	40023800 	.word	0x40023800
 8003248:	40020400 	.word	0x40020400
 800324c:	40020000 	.word	0x40020000
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40022800 	.word	0x40022800
 8003258:	40022000 	.word	0x40022000
 800325c:	40021c00 	.word	0x40021c00
 8003260:	40021800 	.word	0x40021800
 8003264:	40021000 	.word	0x40021000
 8003268:	40020800 	.word	0x40020800
 800326c:	40022400 	.word	0x40022400
 8003270:	10310000 	.word	0x10310000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003274:	f7fd fc4e 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003278:	f64f 033f 	movw	r3, #63551	; 0xf83f
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800327c:	a915      	add	r1, sp, #84	; 0x54
 800327e:	48ad      	ldr	r0, [pc, #692]	; (8003534 <main+0x64c>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003280:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003286:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800328a:	f7fd fc43 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800328e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003292:	a915      	add	r1, sp, #84	; 0x54
 8003294:	48a8      	ldr	r0, [pc, #672]	; (8003538 <main+0x650>)
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003296:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003298:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800329c:	f04f 0b28 	mov.w	fp, #40	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032a6:	f7fd fc35 	bl	8000b14 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80032aa:	a915      	add	r1, sp, #84	; 0x54
 80032ac:	48a3      	ldr	r0, [pc, #652]	; (800353c <main+0x654>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80032ae:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80032b8:	f7fd fc2c 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80032bc:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032be:	a915      	add	r1, sp, #84	; 0x54
 80032c0:	489f      	ldr	r0, [pc, #636]	; (8003540 <main+0x658>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c4:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032c8:	f7fd fc24 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80032cc:	2304      	movs	r3, #4
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80032ce:	a915      	add	r1, sp, #84	; 0x54
 80032d0:	489b      	ldr	r0, [pc, #620]	; (8003540 <main+0x658>)
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80032d2:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80032d8:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f7fd fc1a 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80032e0:	f248 0304 	movw	r3, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032e4:	a915      	add	r1, sp, #84	; 0x54
 80032e6:	4897      	ldr	r0, [pc, #604]	; (8003544 <main+0x65c>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80032e8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032ee:	f7fd fc11 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80032f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80032f6:	a915      	add	r1, sp, #84	; 0x54
 80032f8:	488f      	ldr	r0, [pc, #572]	; (8003538 <main+0x650>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fa:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8003302:	f7fd fc07 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8003306:	f44f 5301 	mov.w	r3, #8256	; 0x2040
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800330a:	a915      	add	r1, sp, #84	; 0x54
 800330c:	488d      	ldr	r0, [pc, #564]	; (8003544 <main+0x65c>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 800330e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003316:	f7fd fbfd 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800331a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800331e:	4b8a      	ldr	r3, [pc, #552]	; (8003548 <main+0x660>)
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003320:	a915      	add	r1, sp, #84	; 0x54
 8003322:	4885      	ldr	r0, [pc, #532]	; (8003538 <main+0x650>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003324:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003326:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800332a:	f7fd fbf3 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800332e:	2310      	movs	r3, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003330:	a915      	add	r1, sp, #84	; 0x54
 8003332:	4884      	ldr	r0, [pc, #528]	; (8003544 <main+0x65c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003334:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	e9cd 3515 	strd	r3, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003340:	f7fd fbe8 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003344:	a915      	add	r1, sp, #84	; 0x54
 8003346:	487f      	ldr	r0, [pc, #508]	; (8003544 <main+0x65c>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003348:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003350:	e9cd 7818 	strd	r7, r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003354:	f7fd fbde 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003358:	4a7c      	ldr	r2, [pc, #496]	; (800354c <main+0x664>)
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 800335a:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800335c:	a915      	add	r1, sp, #84	; 0x54
 800335e:	487c      	ldr	r0, [pc, #496]	; (8003550 <main+0x668>)
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8003360:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003362:	e9cd 2616 	strd	r2, r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003366:	f7fd fbd5 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800336a:	a915      	add	r1, sp, #84	; 0x54
 800336c:	4879      	ldr	r0, [pc, #484]	; (8003554 <main+0x66c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800336e:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	e9cd 9515 	strd	r9, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003376:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800337a:	f7fd fbcb 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800337e:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003380:	a915      	add	r1, sp, #84	; 0x54
 8003382:	4874      	ldr	r0, [pc, #464]	; (8003554 <main+0x66c>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003384:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800338a:	e9cd 7a18 	strd	r7, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338e:	f7fd fbc1 	bl	8000b14 <HAL_GPIO_Init>
  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003392:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003394:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003396:	a915      	add	r1, sp, #84	; 0x54
 8003398:	486e      	ldr	r0, [pc, #440]	; (8003554 <main+0x66c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800339a:	9219      	str	r2, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800339c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f7fd fbb6 	bl	8000b14 <HAL_GPIO_Init>
  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80033a8:	a915      	add	r1, sp, #84	; 0x54
 80033aa:	4869      	ldr	r0, [pc, #420]	; (8003550 <main+0x668>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ac:	e9cd 9615 	strd	r9, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80033b4:	f7fd fbae 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80033b8:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80033ba:	a915      	add	r1, sp, #84	; 0x54
 80033bc:	4864      	ldr	r0, [pc, #400]	; (8003550 <main+0x668>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c0:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f7fd fba6 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80033c8:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033ca:	220b      	movs	r2, #11
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	a915      	add	r1, sp, #84	; 0x54
 80033ce:	4862      	ldr	r0, [pc, #392]	; (8003558 <main+0x670>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80033d0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033d2:	9219      	str	r2, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d4:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f7fd fb9b 	bl	8000b14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033de:	485e      	ldr	r0, [pc, #376]	; (8003558 <main+0x670>)
 80033e0:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80033e2:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	e9cd b515 	strd	fp, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ea:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	f7fd fb91 	bl	8000b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80033f2:	4622      	mov	r2, r4
 80033f4:	4621      	mov	r1, r4
 80033f6:	4648      	mov	r0, r9
 80033f8:	f7fd fa9e 	bl	8000938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80033fc:	4648      	mov	r0, r9
 80033fe:	f7fd fad1 	bl	80009a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003402:	4622      	mov	r2, r4
 8003404:	4621      	mov	r1, r4
 8003406:	2009      	movs	r0, #9
 8003408:	f7fd fa96 	bl	8000938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800340c:	2009      	movs	r0, #9
 800340e:	f7fd fac9 	bl	80009a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003412:	4622      	mov	r2, r4
 8003414:	4621      	mov	r1, r4
 8003416:	2017      	movs	r0, #23
  hadc3.Instance = ADC3;
 8003418:	4d50      	ldr	r5, [pc, #320]	; (800355c <main+0x674>)
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800341a:	f7fd fa8d 	bl	8000938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800341e:	2017      	movs	r0, #23
 8003420:	f7fd fac0 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  hadc3.Instance = ADC3;
 8003424:	494e      	ldr	r1, [pc, #312]	; (8003560 <main+0x678>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800342a:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <main+0x67c>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800342c:	4628      	mov	r0, r5
  hadc3.Init.NbrOfConversion = 1;
 800342e:	61ee      	str	r6, [r5, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003430:	616e      	str	r6, [r5, #20]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003432:	60ac      	str	r4, [r5, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003434:	612c      	str	r4, [r5, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003436:	61ac      	str	r4, [r5, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003438:	f885 4020 	strb.w	r4, [r5, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800343c:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800343e:	60ec      	str	r4, [r5, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003440:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003444:	62ab      	str	r3, [r5, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8003446:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 800344a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800344e:	e9c5 1200 	strd	r1, r2, [r5]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003452:	f7fd f8f3 	bl	800063c <HAL_ADC_Init>
 8003456:	b100      	cbz	r0, 800345a <main+0x572>
 8003458:	e7fe      	b.n	8003458 <main+0x570>
 800345a:	4603      	mov	r3, r0
  sConfig.Channel = ADC_CHANNEL_4;
 800345c:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800345e:	4628      	mov	r0, r5
 8003460:	a915      	add	r1, sp, #84	; 0x54
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003462:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003464:	e9cd 2615 	strd	r2, r6, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003468:	f7fd f99e 	bl	80007a8 <HAL_ADC_ConfigChannel>
 800346c:	4602      	mov	r2, r0
 800346e:	b100      	cbz	r0, 8003472 <main+0x58a>
 8003470:	e7fe      	b.n	8003470 <main+0x588>
  hdcmi.Instance = DCMI;
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <main+0x680>)
 8003474:	493d      	ldr	r1, [pc, #244]	; (800356c <main+0x684>)
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003476:	4618      	mov	r0, r3
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
  hdcmi.Instance = DCMI;
 800347a:	6019      	str	r1, [r3, #0]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800347c:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003480:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003484:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003488:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800348c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003490:	f7fd faae 	bl	80009f0 <HAL_DCMI_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	b100      	cbz	r0, 800349a <main+0x5b2>
 8003498:	e7fe      	b.n	8003498 <main+0x5b0>
  hi2c1.Instance = I2C1;
 800349a:	4c35      	ldr	r4, [pc, #212]	; (8003570 <main+0x688>)
 800349c:	4a35      	ldr	r2, [pc, #212]	; (8003574 <main+0x68c>)
  hi2c1.Init.Timing = 0x00A0A3F7;
 800349e:	4d36      	ldr	r5, [pc, #216]	; (8003578 <main+0x690>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034a0:	4620      	mov	r0, r4
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034a2:	6223      	str	r3, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034a4:	e9c4 3602 	strd	r3, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80034a8:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ac:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c1.Init.Timing = 0x00A0A3F7;
 80034b0:	e9c4 2500 	strd	r2, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034b4:	f7fd fc62 	bl	8000d7c <HAL_I2C_Init>
 80034b8:	4601      	mov	r1, r0
 80034ba:	b100      	cbz	r0, 80034be <main+0x5d6>
 80034bc:	e7fe      	b.n	80034bc <main+0x5d4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034be:	4620      	mov	r0, r4
 80034c0:	f7fd fcb0 	bl	8000e24 <HAL_I2CEx_ConfigAnalogFilter>
 80034c4:	4601      	mov	r1, r0
 80034c6:	b100      	cbz	r0, 80034ca <main+0x5e2>
 80034c8:	e7fe      	b.n	80034c8 <main+0x5e0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7fd fcd4 	bl	8000e78 <HAL_I2CEx_ConfigDigitalFilter>
 80034d0:	4603      	mov	r3, r0
 80034d2:	b100      	cbz	r0, 80034d6 <main+0x5ee>
 80034d4:	e7fe      	b.n	80034d4 <main+0x5ec>
  hi2c3.Instance = I2C3;
 80034d6:	4c29      	ldr	r4, [pc, #164]	; (800357c <main+0x694>)
 80034d8:	4a29      	ldr	r2, [pc, #164]	; (8003580 <main+0x698>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034da:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x00A0A3F7;
 80034dc:	6065      	str	r5, [r4, #4]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034de:	6223      	str	r3, [r4, #32]
  hi2c3.Instance = I2C3;
 80034e0:	6022      	str	r2, [r4, #0]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034e2:	e9c4 3602 	strd	r3, r6, [r4, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80034e6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ea:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034ee:	f7fd fc45 	bl	8000d7c <HAL_I2C_Init>
 80034f2:	4601      	mov	r1, r0
 80034f4:	b100      	cbz	r0, 80034f8 <main+0x610>
 80034f6:	e7fe      	b.n	80034f6 <main+0x60e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7fd fc93 	bl	8000e24 <HAL_I2CEx_ConfigAnalogFilter>
 80034fe:	4601      	mov	r1, r0
 8003500:	b100      	cbz	r0, 8003504 <main+0x61c>
 8003502:	e7fe      	b.n	8003502 <main+0x61a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003504:	4620      	mov	r0, r4
 8003506:	f7fd fcb7 	bl	8000e78 <HAL_I2CEx_ConfigDigitalFilter>
 800350a:	4602      	mov	r2, r0
 800350c:	b100      	cbz	r0, 8003510 <main+0x628>
 800350e:	e7fe      	b.n	800350e <main+0x626>
  hqspi.Instance = QUADSPI;
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <main+0x69c>)
  hqspi.Init.ClockPrescaler = 255;
 8003512:	21ff      	movs	r1, #255	; 0xff
  hqspi.Instance = QUADSPI;
 8003514:	4c1c      	ldr	r4, [pc, #112]	; (8003588 <main+0x6a0>)
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003516:	4618      	mov	r0, r3
  hqspi.Init.FifoThreshold = 1;
 8003518:	609e      	str	r6, [r3, #8]
  hqspi.Init.FlashSize = 1;
 800351a:	e9c3 2603 	strd	r2, r6, [r3, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800351e:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003522:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hqspi.Init.ClockPrescaler = 255;
 8003526:	e9c3 4100 	strd	r4, r1, [r3]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800352a:	f7fd fcff 	bl	8000f2c <HAL_QSPI_Init>
 800352e:	b368      	cbz	r0, 800358c <main+0x6a4>
 8003530:	e7fe      	b.n	8003530 <main+0x648>
 8003532:	bf00      	nop
 8003534:	40021400 	.word	0x40021400
 8003538:	40022000 	.word	0x40022000
 800353c:	40022800 	.word	0x40022800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021c00 	.word	0x40021c00
 8003548:	10120000 	.word	0x10120000
 800354c:	10310000 	.word	0x10310000
 8003550:	40021800 	.word	0x40021800
 8003554:	40020800 	.word	0x40020800
 8003558:	40020000 	.word	0x40020000
 800355c:	20000534 	.word	0x20000534
 8003560:	40012200 	.word	0x40012200
 8003564:	0f000001 	.word	0x0f000001
 8003568:	2000057c 	.word	0x2000057c
 800356c:	50050000 	.word	0x50050000
 8003570:	20000468 	.word	0x20000468
 8003574:	40005400 	.word	0x40005400
 8003578:	00a0a3f7 	.word	0x00a0a3f7
 800357c:	20000378 	.word	0x20000378
 8003580:	40005c00 	.word	0x40005c00
 8003584:	2000076c 	.word	0x2000076c
 8003588:	a0001000 	.word	0xa0001000
  RTC_TimeTypeDef sTime = {0};
 800358c:	2500      	movs	r5, #0
  hrtc.Instance = RTC;
 800358e:	4ca4      	ldr	r4, [pc, #656]	; (8003820 <main+0x938>)
  RTC_AlarmTypeDef sAlarm = {0};
 8003590:	222c      	movs	r2, #44	; 0x2c
 8003592:	a815      	add	r0, sp, #84	; 0x54
 8003594:	4629      	mov	r1, r5
  RTC_TimeTypeDef sTime = {0};
 8003596:	950f      	str	r5, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8003598:	950c      	str	r5, [sp, #48]	; 0x30
  RTC_TimeTypeDef sTime = {0};
 800359a:	9514      	str	r5, [sp, #80]	; 0x50
 800359c:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 80035a0:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  RTC_AlarmTypeDef sAlarm = {0};
 80035a4:	f002 f964 	bl	8005870 <memset>
  hrtc.Init.SynchPrediv = 255;
 80035a8:	23ff      	movs	r3, #255	; 0xff
  hrtc.Instance = RTC;
 80035aa:	499e      	ldr	r1, [pc, #632]	; (8003824 <main+0x93c>)
  hrtc.Init.AsynchPrediv = 127;
 80035ac:	227f      	movs	r2, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035ae:	4620      	mov	r0, r4
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035b0:	6065      	str	r5, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035b2:	6125      	str	r5, [r4, #16]
  hrtc.Instance = RTC;
 80035b4:	6021      	str	r1, [r4, #0]
  hrtc.Init.SynchPrediv = 255;
 80035b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035ba:	e9c4 5505 	strd	r5, r5, [r4, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035be:	f7fe fb8b 	bl	8001cd8 <HAL_RTC_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	b100      	cbz	r0, 80035c8 <main+0x6e0>
 80035c6:	e7fe      	b.n	80035c6 <main+0x6de>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035c8:	2201      	movs	r2, #1
 80035ca:	a90f      	add	r1, sp, #60	; 0x3c
 80035cc:	4620      	mov	r0, r4
  sTime.Hours = 0x0;
 80035ce:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  sTime.Minutes = 0x0;
 80035d2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035d6:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035da:	f7fe fbc5 	bl	8001d68 <HAL_RTC_SetTime>
 80035de:	b100      	cbz	r0, 80035e2 <main+0x6fa>
 80035e0:	e7fe      	b.n	80035e0 <main+0x6f8>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <main+0x940>)
 80035e4:	ad20      	add	r5, sp, #128	; 0x80
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80035e6:	2201      	movs	r2, #1
 80035e8:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80035ea:	f845 3d50 	str.w	r3, [r5, #-80]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fe fc50 	bl	8001e94 <HAL_RTC_SetDate>
 80035f4:	4603      	mov	r3, r0
 80035f6:	b100      	cbz	r0, 80035fa <main+0x712>
 80035f8:	e7fe      	b.n	80035f8 <main+0x710>
  sAlarm.AlarmDateWeekDay = 0x1;
 80035fa:	2601      	movs	r6, #1
  sAlarm.Alarm = RTC_ALARM_A;
 80035fc:	f44f 7780 	mov.w	r7, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003600:	a915      	add	r1, sp, #84	; 0x54
 8003602:	4620      	mov	r0, r4
 8003604:	4632      	mov	r2, r6
  sAlarm.AlarmTime.Hours = 0x0;
 8003606:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  sAlarm.AlarmTime.Minutes = 0x0;
 800360a:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800360e:	9316      	str	r3, [sp, #88]	; 0x58
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003610:	931d      	str	r3, [sp, #116]	; 0x74
  sAlarm.AlarmDateWeekDay = 0x1;
 8003612:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  sAlarm.Alarm = RTC_ALARM_A;
 8003616:	971f      	str	r7, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003618:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800361c:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003620:	f7fe fa44 	bl	8001aac <HAL_RTC_SetAlarm>
 8003624:	b100      	cbz	r0, 8003628 <main+0x740>
 8003626:	e7fe      	b.n	8003626 <main+0x73e>
  sAlarm.Alarm = RTC_ALARM_B;
 8003628:	f44f 7700 	mov.w	r7, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800362c:	a915      	add	r1, sp, #84	; 0x54
 800362e:	4632      	mov	r2, r6
 8003630:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8003632:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  sAlarm.Alarm = RTC_ALARM_B;
 8003636:	971f      	str	r7, [sp, #124]	; 0x7c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003638:	f7fe fa38 	bl	8001aac <HAL_RTC_SetAlarm>
 800363c:	4601      	mov	r1, r0
 800363e:	b100      	cbz	r0, 8003642 <main+0x75a>
 8003640:	e7fe      	b.n	8003640 <main+0x758>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003642:	4620      	mov	r0, r4
 8003644:	2202      	movs	r2, #2
 8003646:	f7fe fca9 	bl	8001f9c <HAL_RTCEx_SetTimeStamp>
 800364a:	b100      	cbz	r0, 800364e <main+0x766>
 800364c:	e7fe      	b.n	800364c <main+0x764>
  hspi2.Instance = SPI2;
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <main+0x944>)
  hspi2.Init.CRCPolynomial = 7;
 8003650:	2107      	movs	r1, #7
  hspi2.Instance = SPI2;
 8003652:	f8df c200 	ldr.w	ip, [pc, #512]	; 8003854 <main+0x96c>
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003656:	2208      	movs	r2, #8
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003658:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800365c:	f44f 7440 	mov.w	r4, #768	; 0x300
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003660:	6098      	str	r0, [r3, #8]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003662:	6318      	str	r0, [r3, #48]	; 0x30
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003664:	619f      	str	r7, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003666:	60dc      	str	r4, [r3, #12]
  hspi2.Init.CRCPolynomial = 7;
 8003668:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800366a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800366c:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003670:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003674:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003678:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800367a:	e9c3 c600 	strd	ip, r6, [r3]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800367e:	f7fe fcb7 	bl	8001ff0 <HAL_SPI_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	b100      	cbz	r0, 8003688 <main+0x7a0>
 8003686:	e7fe      	b.n	8003686 <main+0x79e>
  htim1.Instance = TIM1;
 8003688:	4c69      	ldr	r4, [pc, #420]	; (8003830 <main+0x948>)
 800368a:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <main+0x94c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800368c:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800368e:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003690:	9318      	str	r3, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003692:	9311      	str	r3, [sp, #68]	; 0x44
  htim1.Instance = TIM1;
 8003694:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003696:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a2:	e9c4 3303 	strd	r3, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a6:	e9c4 3305 	strd	r3, r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036aa:	f7fe feff 	bl	80024ac <HAL_TIM_Base_Init>
 80036ae:	b100      	cbz	r0, 80036b2 <main+0x7ca>
 80036b0:	e7fe      	b.n	80036b0 <main+0x7c8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036b6:	a915      	add	r1, sp, #84	; 0x54
 80036b8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036ba:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036bc:	f7fe fdde 	bl	800227c <HAL_TIM_ConfigClockSource>
 80036c0:	4603      	mov	r3, r0
 80036c2:	b100      	cbz	r0, 80036c6 <main+0x7de>
 80036c4:	e7fe      	b.n	80036c4 <main+0x7dc>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036c6:	4620      	mov	r0, r4
 80036c8:	a90f      	add	r1, sp, #60	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ca:	9311      	str	r3, [sp, #68]	; 0x44
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036cc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036d0:	f7fe ffee 	bl	80026b0 <HAL_TIMEx_MasterConfigSynchronization>
 80036d4:	b100      	cbz	r0, 80036d8 <main+0x7f0>
 80036d6:	e7fe      	b.n	80036d6 <main+0x7ee>
  htim2.Instance = TIM2;
 80036d8:	4c57      	ldr	r4, [pc, #348]	; (8003838 <main+0x950>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036da:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 80036dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036e0:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e2:	9311      	str	r3, [sp, #68]	; 0x44
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e6:	61a3      	str	r3, [r4, #24]
  htim2.Init.Prescaler = 0;
 80036e8:	e9c4 2300 	strd	r2, r3, [r4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ec:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80036f0:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  htim2.Init.Period = 0;
 80036f8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036fc:	f7fe fed6 	bl	80024ac <HAL_TIM_Base_Init>
 8003700:	b100      	cbz	r0, 8003704 <main+0x81c>
 8003702:	e7fe      	b.n	8003702 <main+0x81a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003704:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003708:	a915      	add	r1, sp, #84	; 0x54
 800370a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800370c:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800370e:	f7fe fdb5 	bl	800227c <HAL_TIM_ConfigClockSource>
 8003712:	4603      	mov	r3, r0
 8003714:	b100      	cbz	r0, 8003718 <main+0x830>
 8003716:	e7fe      	b.n	8003716 <main+0x82e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003718:	4620      	mov	r0, r4
 800371a:	a90f      	add	r1, sp, #60	; 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371c:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800371e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003720:	f7fe ffc6 	bl	80026b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003724:	4603      	mov	r3, r0
 8003726:	b100      	cbz	r0, 800372a <main+0x842>
 8003728:	e7fe      	b.n	8003728 <main+0x840>
  htim3.Instance = TIM3;
 800372a:	4c44      	ldr	r4, [pc, #272]	; (800383c <main+0x954>)
 800372c:	4a44      	ldr	r2, [pc, #272]	; (8003840 <main+0x958>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800372e:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003730:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003732:	9318      	str	r3, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003736:	61a3      	str	r3, [r4, #24]
  htim3.Instance = TIM3;
 8003738:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373a:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003742:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003746:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800374a:	f7fe feaf 	bl	80024ac <HAL_TIM_Base_Init>
 800374e:	b100      	cbz	r0, 8003752 <main+0x86a>
 8003750:	e7fe      	b.n	8003750 <main+0x868>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003752:	a915      	add	r1, sp, #84	; 0x54
 8003754:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003756:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003758:	f7fe fd90 	bl	800227c <HAL_TIM_ConfigClockSource>
 800375c:	4603      	mov	r3, r0
 800375e:	b100      	cbz	r0, 8003762 <main+0x87a>
 8003760:	e7fe      	b.n	8003760 <main+0x878>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003762:	4620      	mov	r0, r4
 8003764:	a90f      	add	r1, sp, #60	; 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003766:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003768:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800376a:	f7fe ffa1 	bl	80026b0 <HAL_TIMEx_MasterConfigSynchronization>
 800376e:	4603      	mov	r3, r0
 8003770:	b100      	cbz	r0, 8003774 <main+0x88c>
 8003772:	e7fe      	b.n	8003772 <main+0x88a>
  htim5.Instance = TIM5;
 8003774:	4c33      	ldr	r4, [pc, #204]	; (8003844 <main+0x95c>)
 8003776:	4a34      	ldr	r2, [pc, #208]	; (8003848 <main+0x960>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003778:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800377a:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800377c:	9312      	str	r3, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377e:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003780:	931b      	str	r3, [sp, #108]	; 0x6c
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003782:	61a3      	str	r3, [r4, #24]
  htim5.Instance = TIM5;
 8003784:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003786:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378a:	e9c5 3301 	strd	r3, r3, [r5, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800378e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8003792:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8003796:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379a:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379e:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80037a2:	f7fe fe83 	bl	80024ac <HAL_TIM_Base_Init>
 80037a6:	b100      	cbz	r0, 80037aa <main+0x8c2>
 80037a8:	e7fe      	b.n	80037a8 <main+0x8c0>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80037aa:	a90f      	add	r1, sp, #60	; 0x3c
 80037ac:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ae:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80037b0:	f7fe fd64 	bl	800227c <HAL_TIM_ConfigClockSource>
 80037b4:	b100      	cbz	r0, 80037b8 <main+0x8d0>
 80037b6:	e7fe      	b.n	80037b6 <main+0x8ce>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7fe fe93 	bl	80024e4 <HAL_TIM_PWM_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	b100      	cbz	r0, 80037c4 <main+0x8dc>
 80037c2:	e7fe      	b.n	80037c2 <main+0x8da>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037c4:	4629      	mov	r1, r5
 80037c6:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c8:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ca:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037cc:	f7fe ff70 	bl	80026b0 <HAL_TIMEx_MasterConfigSynchronization>
 80037d0:	b100      	cbz	r0, 80037d4 <main+0x8ec>
 80037d2:	e7fe      	b.n	80037d2 <main+0x8ea>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d4:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 80037d6:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037d8:	220c      	movs	r2, #12
 80037da:	a915      	add	r1, sp, #84	; 0x54
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037dc:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037de:	4819      	ldr	r0, [pc, #100]	; (8003844 <main+0x95c>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037e0:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e2:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037e6:	f7fe fecd 	bl	8002584 <HAL_TIM_PWM_ConfigChannel>
 80037ea:	4604      	mov	r4, r0
 80037ec:	b100      	cbz	r0, 80037f0 <main+0x908>
 80037ee:	e7fe      	b.n	80037ee <main+0x906>
  htim8.Instance = TIM8;
 80037f0:	4d16      	ldr	r5, [pc, #88]	; (800384c <main+0x964>)
  HAL_TIM_MspPostInit(&htim5);
 80037f2:	4814      	ldr	r0, [pc, #80]	; (8003844 <main+0x95c>)
 80037f4:	f000 fae0 	bl	8003db8 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <main+0x968>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80037fa:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fc:	9411      	str	r4, [sp, #68]	; 0x44
  htim8.Instance = TIM8;
 80037fe:	602b      	str	r3, [r5, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003800:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8003804:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003808:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380c:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003810:	e9c5 4403 	strd	r4, r4, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003814:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003818:	f7fe fe48 	bl	80024ac <HAL_TIM_Base_Init>
 800381c:	b1e0      	cbz	r0, 8003858 <main+0x970>
 800381e:	e7fe      	b.n	800381e <main+0x936>
 8003820:	2000064c 	.word	0x2000064c
 8003824:	40002800 	.word	0x40002800
 8003828:	00010101 	.word	0x00010101
 800382c:	200003c4 	.word	0x200003c4
 8003830:	2000066c 	.word	0x2000066c
 8003834:	40010000 	.word	0x40010000
 8003838:	2000072c 	.word	0x2000072c
 800383c:	200004f4 	.word	0x200004f4
 8003840:	40000400 	.word	0x40000400
 8003844:	200004b4 	.word	0x200004b4
 8003848:	40000c00 	.word	0x40000c00
 800384c:	20000428 	.word	0x20000428
 8003850:	40010400 	.word	0x40010400
 8003854:	40003800 	.word	0x40003800
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800385c:	a915      	add	r1, sp, #84	; 0x54
 800385e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003860:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003862:	f7fe fd0b 	bl	800227c <HAL_TIM_ConfigClockSource>
 8003866:	4603      	mov	r3, r0
 8003868:	b100      	cbz	r0, 800386c <main+0x984>
 800386a:	e7fe      	b.n	800386a <main+0x982>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800386c:	a90f      	add	r1, sp, #60	; 0x3c
 800386e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003870:	9311      	str	r3, [sp, #68]	; 0x44
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003872:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003876:	f7fe ff1b 	bl	80026b0 <HAL_TIMEx_MasterConfigSynchronization>
 800387a:	4602      	mov	r2, r0
 800387c:	b100      	cbz	r0, 8003880 <main+0x998>
 800387e:	e7fe      	b.n	800387e <main+0x996>
  huart1.Instance = USART1;
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <main+0x9f8>)
  huart1.Init.BaudRate = 115200;
 8003882:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Instance = USART1;
 8003886:	4917      	ldr	r1, [pc, #92]	; (80038e4 <main+0x9fc>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003888:	240c      	movs	r4, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800388a:	4618      	mov	r0, r3
  huart1.Init.Parity = UART_PARITY_NONE;
 800388c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800388e:	615c      	str	r4, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003890:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003894:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003898:	e9c3 2208 	strd	r2, r2, [r3, #32]
  huart1.Init.BaudRate = 115200;
 800389c:	e9c3 1500 	strd	r1, r5, [r3]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038a0:	f7ff fa6c 	bl	8002d7c <HAL_UART_Init>
 80038a4:	4602      	mov	r2, r0
 80038a6:	b100      	cbz	r0, 80038aa <main+0x9c2>
 80038a8:	e7fe      	b.n	80038a8 <main+0x9c0>
  huart6.Instance = USART6;
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <main+0xa00>)
 80038ac:	490f      	ldr	r1, [pc, #60]	; (80038ec <main+0xa04>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80038ae:	4618      	mov	r0, r3
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.Instance = USART6;
 80038b2:	6019      	str	r1, [r3, #0]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80038b4:	e9c3 5201 	strd	r5, r2, [r3, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 80038b8:	e9c3 2203 	strd	r2, r2, [r3, #12]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038bc:	e9c3 4205 	strd	r4, r2, [r3, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038c0:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80038c4:	f7ff fa5a 	bl	8002d7c <HAL_UART_Init>
 80038c8:	b100      	cbz	r0, 80038cc <main+0x9e4>
 80038ca:	e7fe      	b.n	80038ca <main+0x9e2>
  XF_initialize(10);
 80038cc:	200a      	movs	r0, #10
 80038ce:	f001 fca5 	bl	800521c <XF_initialize>
  Factory_initialize();
 80038d2:	f000 fc03 	bl	80040dc <Factory_initialize>
  Factory_build();
 80038d6:	f000 fc03 	bl	80040e0 <Factory_build>
  XF_exec();
 80038da:	f001 fccb 	bl	8005274 <XF_exec>
 80038de:	e7fe      	b.n	80038de <main+0x9f6>
 80038e0:	200005cc 	.word	0x200005cc
 80038e4:	40011000 	.word	0x40011000
 80038e8:	200006ac 	.word	0x200006ac
 80038ec:	40011400 	.word	0x40011400

080038f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_MspInit+0x2c>)
{
 80038f2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
 80038fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003902:	9200      	str	r2, [sp, #0]
 8003904:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003918:	b002      	add	sp, #8
 800391a:	4770      	bx	lr
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 8003920:	6802      	ldr	r2, [r0, #0]
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_ADC_MspInit+0x80>)
{
 8003924:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC3)
 8003926:	429a      	cmp	r2, r3
{
 8003928:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392a:	f04f 0400 	mov.w	r4, #0
 800392e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003932:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003936:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC3)
 8003938:	d001      	beq.n	800393e <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800393a:	b009      	add	sp, #36	; 0x24
 800393c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800393e:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003942:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003946:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003948:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC3_CLK_ENABLE();
 800394a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
 8003952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003954:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800395c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
 8003964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003966:	f002 0220 	and.w	r2, r2, #32
 800396a:	9201      	str	r2, [sp, #4]
 800396c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003978:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800397e:	4809      	ldr	r0, [pc, #36]	; (80039a4 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003980:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003986:	f7fd f8c5 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800398a:	2301      	movs	r3, #1
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800398c:	a903      	add	r1, sp, #12
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003990:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003996:	f7fd f8bd 	bl	8000b14 <HAL_GPIO_Init>
}
 800399a:	b009      	add	sp, #36	; 0x24
 800399c:	bd30      	pop	{r4, r5, pc}
 800399e:	bf00      	nop
 80039a0:	40012200 	.word	0x40012200
 80039a4:	40021400 	.word	0x40021400
 80039a8:	40020000 	.word	0x40020000

080039ac <HAL_DCMI_MspInit>:
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 80039ac:	6802      	ldr	r2, [r0, #0]
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_DCMI_MspInit+0xf8>)
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
  if(hdcmi->Instance==DCMI)
 80039b2:	429a      	cmp	r2, r3
{
 80039b4:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b6:	f04f 0400 	mov.w	r4, #0
 80039ba:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80039be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80039c2:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hdcmi->Instance==DCMI)
 80039c4:	d001      	beq.n	80039ca <HAL_DCMI_MspInit+0x1e>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80039c6:	b00c      	add	sp, #48	; 0x30
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_DCMI_MspInit+0xfc>)
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80039cc:	2060      	movs	r0, #96	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ce:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80039d0:	250d      	movs	r5, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 80039d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039d4:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	635a      	str	r2, [r3, #52]	; 0x34
 80039dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039de:	f002 0201 	and.w	r2, r2, #1
 80039e2:	9201      	str	r2, [sp, #4]
 80039e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e8:	f042 0210 	orr.w	r2, r2, #16
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	f002 0210 	and.w	r2, r2, #16
 80039f4:	9202      	str	r2, [sp, #8]
 80039f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fa:	f042 0208 	orr.w	r2, r2, #8
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a02:	f002 0208 	and.w	r2, r2, #8
 8003a06:	9203      	str	r2, [sp, #12]
 8003a08:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
 8003a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a14:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003a18:	9204      	str	r2, [sp, #16]
 8003a1a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
 8003a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a26:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003a2a:	9205      	str	r2, [sp, #20]
 8003a2c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003a38:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a3e:	481b      	ldr	r0, [pc, #108]	; (8003aac <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	9306      	str	r3, [sp, #24]
 8003a44:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a46:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a48:	f7fd f864 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003a4c:	2308      	movs	r3, #8
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003a4e:	a907      	add	r1, sp, #28
 8003a50:	4817      	ldr	r0, [pc, #92]	; (8003ab0 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003a52:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a56:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a58:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003a5c:	f7fd f85a 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003a60:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003a64:	a907      	add	r1, sp, #28
 8003a66:	4813      	ldr	r0, [pc, #76]	; (8003ab4 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003a68:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a6c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003a72:	f7fd f84f 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003a76:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a7a:	a907      	add	r1, sp, #28
 8003a7c:	480e      	ldr	r0, [pc, #56]	; (8003ab8 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003a7e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a82:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a88:	f7fd f844 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003a8c:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	a907      	add	r1, sp, #28
 8003a90:	480a      	ldr	r0, [pc, #40]	; (8003abc <HAL_DCMI_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a94:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003a96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a98:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f7fd f83a 	bl	8000b14 <HAL_GPIO_Init>
}
 8003aa0:	b00c      	add	sp, #48	; 0x30
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	50050000 	.word	0x50050000
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021800 	.word	0x40021800
 8003ab8:	40021c00 	.word	0x40021c00
 8003abc:	40020000 	.word	0x40020000

08003ac0 <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8003ac0:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac2:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8003ac4:	492a      	ldr	r1, [pc, #168]	; (8003b70 <HAL_I2C_MspInit+0xb0>)
{
 8003ac6:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8003ac8:	428a      	cmp	r2, r1
{
 8003aca:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003ad0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ad4:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8003ad6:	d028      	beq.n	8003b2a <HAL_I2C_MspInit+0x6a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_I2C_MspInit+0xb4>)
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_MspInit+0x22>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003ade:	b00a      	add	sp, #40	; 0x28
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ae2:	4c25      	ldr	r4, [pc, #148]	; (8003b78 <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ae4:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ae6:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003ae8:	f44f 76c0 	mov.w	r6, #384	; 0x180
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003af0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	6323      	str	r3, [r4, #48]	; 0x30
 8003af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003afa:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003afc:	2204      	movs	r2, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b02:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b04:	481d      	ldr	r0, [pc, #116]	; (8003b7c <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b06:	9303      	str	r3, [sp, #12]
 8003b08:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003b0a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b0c:	e9cd 5208 	strd	r5, r2, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b10:	f7fd f800 	bl	8000b14 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b1a:	6423      	str	r3, [r4, #64]	; 0x40
 8003b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	9b04      	ldr	r3, [sp, #16]
}
 8003b26:	b00a      	add	sp, #40	; 0x28
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	4c13      	ldr	r4, [pc, #76]	; (8003b78 <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2c:	2012      	movs	r0, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b2e:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003b30:	f44f 7640 	mov.w	r6, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b36:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b40:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b42:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b44:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b48:	480d      	ldr	r0, [pc, #52]	; (8003b80 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003b4a:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b50:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b52:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b54:	f7fc ffde 	bl	8000b14 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b5e:	6423      	str	r3, [r4, #64]	; 0x40
 8003b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	9b02      	ldr	r3, [sp, #8]
}
 8003b6a:	b00a      	add	sp, #40	; 0x28
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	bf00      	nop
 8003b70:	40005400 	.word	0x40005400
 8003b74:	40005c00 	.word	0x40005c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40021c00 	.word	0x40021c00
 8003b80:	40020400 	.word	0x40020400

08003b84 <HAL_QSPI_MspInit>:
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hqspi->Instance==QUADSPI)
 8003b84:	6802      	ldr	r2, [r0, #0]
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_QSPI_MspInit+0xc4>)
{
 8003b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hqspi->Instance==QUADSPI)
 8003b8c:	429a      	cmp	r2, r3
{
 8003b8e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f04f 0400 	mov.w	r4, #0
 8003b94:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003b98:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003b9c:	9409      	str	r4, [sp, #36]	; 0x24
  if(hqspi->Instance==QUADSPI)
 8003b9e:	d002      	beq.n	8003ba6 <HAL_QSPI_MspInit+0x22>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003ba0:	b00a      	add	sp, #40	; 0x28
 8003ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <HAL_QSPI_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003bac:	2709      	movs	r7, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003bb0:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	a905      	add	r1, sp, #20
 8003bb6:	4826      	ldr	r0, [pc, #152]	; (8003c50 <HAL_QSPI_MspInit+0xcc>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003bb8:	4332      	orrs	r2, r6
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbe:	4032      	ands	r2, r6
 8003bc0:	9201      	str	r2, [sp, #4]
 8003bc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc6:	f042 0210 	orr.w	r2, r2, #16
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
 8003bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bce:	f002 0210 	and.w	r2, r2, #16
 8003bd2:	9202      	str	r2, [sp, #8]
 8003bd4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	4332      	orrs	r2, r6
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bde:	4032      	ands	r2, r6
 8003be0:	9203      	str	r2, [sp, #12]
 8003be2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003bee:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf8:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bfa:	9304      	str	r3, [sp, #16]
 8003bfc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003bfe:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003c00:	f7fc ff88 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003c04:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003c06:	230a      	movs	r3, #10
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003c08:	a905      	add	r1, sp, #20
 8003c0a:	4812      	ldr	r0, [pc, #72]	; (8003c54 <HAL_QSPI_MspInit+0xd0>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003c0c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003c0e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	e9cd 4507 	strd	r4, r5, [sp, #28]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003c16:	f7fc ff7d 	bl	8000b14 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1a:	a905      	add	r1, sp, #20
 8003c1c:	480d      	ldr	r0, [pc, #52]	; (8003c54 <HAL_QSPI_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	e9cd 8605 	strd	r8, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003c24:	e9cd 5708 	strd	r5, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c28:	f7fc ff74 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003c2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c30:	a905      	add	r1, sp, #20
 8003c32:	4809      	ldr	r0, [pc, #36]	; (8003c58 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003c38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003c3a:	e9cd 5708 	strd	r5, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c3e:	f7fc ff69 	bl	8000b14 <HAL_GPIO_Init>
}
 8003c42:	b00a      	add	sp, #40	; 0x28
 8003c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c48:	a0001000 	.word	0xa0001000
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40020400 	.word	0x40020400
 8003c58:	40020c00 	.word	0x40020c00

08003c5c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003c5c:	6802      	ldr	r2, [r0, #0]
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <HAL_RTC_MspInit+0x14>)
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d104      	bne.n	8003c6e <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c64:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <HAL_RTC_MspInit+0x18>)
 8003c66:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c6e:	4770      	bx	lr
 8003c70:	40002800 	.word	0x40002800
 8003c74:	40023800 	.word	0x40023800

08003c78 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8003c78:	6802      	ldr	r2, [r0, #0]
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <HAL_SPI_MspInit+0x80>)
{
 8003c7c:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI2)
 8003c7e:	429a      	cmp	r2, r3
{
 8003c80:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c82:	f04f 0400 	mov.w	r4, #0
 8003c86:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c8a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003c8e:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI2)
 8003c90:	d001      	beq.n	8003c96 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c92:	b008      	add	sp, #32
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c96:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003c9a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c9c:	2605      	movs	r6, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003c9e:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	4816      	ldr	r0, [pc, #88]	; (8003cfc <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8003caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003cb0:	9200      	str	r2, [sp, #0]
 8003cb2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
 8003cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003cc2:	9201      	str	r2, [sp, #4]
 8003cc4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc8:	432a      	orrs	r2, r5
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003cce:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd0:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cd4:	9607      	str	r6, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003cda:	f7fc ff1b 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003cde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce2:	a903      	add	r1, sp, #12
 8003ce4:	4806      	ldr	r0, [pc, #24]	; (8003d00 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ce8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003cea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cec:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf0:	f7fc ff10 	bl	8000b14 <HAL_GPIO_Init>
}
 8003cf4:	b008      	add	sp, #32
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	40003800 	.word	0x40003800
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	40020400 	.word	0x40020400

08003d04 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003d04:	6803      	ldr	r3, [r0, #0]
{
 8003d06:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_TIM_Base_MspInit+0xa0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00d      	beq.n	8003d2a <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d02d      	beq.n	8003d70 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003d14:	4a24      	ldr	r2, [pc, #144]	; (8003da8 <HAL_TIM_Base_MspInit+0xa4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8003d1a:	4a24      	ldr	r2, [pc, #144]	; (8003dac <HAL_TIM_Base_MspInit+0xa8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d034      	beq.n	8003d8a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_TIM_Base_MspInit+0xac>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_TIM_Base_MspInit+0x56>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d26:	b006      	add	sp, #24
 8003d28:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	9b01      	ldr	r3, [sp, #4]
}
 8003d3e:	b006      	add	sp, #24
 8003d40:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d46:	f042 0202 	orr.w	r2, r2, #2
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	9303      	str	r3, [sp, #12]
 8003d54:	9b03      	ldr	r3, [sp, #12]
}
 8003d56:	b006      	add	sp, #24
 8003d58:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5e:	f042 0202 	orr.w	r2, r2, #2
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	9305      	str	r3, [sp, #20]
 8003d6c:	9b05      	ldr	r3, [sp, #20]
}
 8003d6e:	e7da      	b.n	8003d26 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d70:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	9302      	str	r3, [sp, #8]
 8003d84:	9b02      	ldr	r3, [sp, #8]
}
 8003d86:	b006      	add	sp, #24
 8003d88:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_TIM_Base_MspInit+0xb0>)
 8003d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	9304      	str	r3, [sp, #16]
 8003d9c:	9b04      	ldr	r3, [sp, #16]
}
 8003d9e:	b006      	add	sp, #24
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40010400 	.word	0x40010400
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM5)
 8003db8:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dba:	2300      	movs	r3, #0
  if(htim->Instance==TIM5)
 8003dbc:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_TIM_MspPostInit+0x48>)
{
 8003dbe:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM5)
 8003dc0:	4291      	cmp	r1, r2
{
 8003dc2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003dc8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003dcc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM5)
 8003dce:	d001      	beq.n	8003dd4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003dd0:	b007      	add	sp, #28
 8003dd2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 8003dd8:	2501      	movs	r5, #1
    HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8003dda:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8003dde:	480a      	ldr	r0, [pc, #40]	; (8003e08 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 8003de8:	9501      	str	r5, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003df0:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8003df6:	f7fc fe8d 	bl	8000b14 <HAL_GPIO_Init>
}
 8003dfa:	b007      	add	sp, #28
 8003dfc:	bd30      	pop	{r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40022000 	.word	0x40022000

08003e0c <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003e0c:	6803      	ldr	r3, [r0, #0]
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <HAL_UART_MspInit+0xc8>)
{
 8003e10:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART1)
 8003e12:	4293      	cmp	r3, r2
{
 8003e14:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e16:	f04f 0400 	mov.w	r4, #0
 8003e1a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003e1e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003e22:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8003e24:	d025      	beq.n	8003e72 <HAL_UART_MspInit+0x66>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8003e26:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <HAL_UART_MspInit+0xcc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003e2c:	b00a      	add	sp, #40	; 0x28
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003e32:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e36:	a905      	add	r1, sp, #20
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e3c:	2408      	movs	r4, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e3e:	f042 0220 	orr.w	r2, r2, #32
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
 8003e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e46:	f002 0220 	and.w	r2, r2, #32
 8003e4a:	9203      	str	r2, [sp, #12]
 8003e4c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e50:	f042 0204 	orr.w	r2, r2, #4
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003e58:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5e:	4820      	ldr	r0, [pc, #128]	; (8003ee0 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e62:	9304      	str	r3, [sp, #16]
 8003e64:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e66:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e6a:	f7fc fe53 	bl	8000b14 <HAL_GPIO_Init>
}
 8003e6e:	b00a      	add	sp, #40	; 0x28
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e72:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003e76:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e78:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003e7c:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e7e:	f042 0210 	orr.w	r2, r2, #16
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
 8003e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e86:	f002 0210 	and.w	r2, r2, #16
 8003e8a:	9200      	str	r2, [sp, #0]
 8003e8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e90:	4332      	orrs	r2, r6
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
 8003e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e96:	4032      	ands	r2, r6
 8003e98:	9201      	str	r2, [sp, #4]
 8003e9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003ea6:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea8:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003eac:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb0:	9302      	str	r3, [sp, #8]
 8003eb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eb4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003eb6:	f7fc fe2d 	bl	8000b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003eba:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003ebe:	a905      	add	r1, sp, #20
 8003ec0:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ec4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003ec6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003ecc:	f7fc fe22 	bl	8000b14 <HAL_GPIO_Init>
}
 8003ed0:	b00a      	add	sp, #40	; 0x28
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	40011000 	.word	0x40011000
 8003ed8:	40011400 	.word	0x40011400
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020800 	.word	0x40020800
 8003ee4:	40020400 	.word	0x40020400
 8003ee8:	40020000 	.word	0x40020000

08003eec <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eee:	f7fc fb93 	bl	8000618 <HAL_IncTick>
  if ((HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8003ef2:	f7fc fb9d 	bl	8000630 <HAL_GetTick>
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	f001 fb22 	bl	8005540 <XF_tickIntervalInMilliseconds>
 8003efc:	fbb4 f3f0 	udiv	r3, r4, r0
 8003f00:	fb03 4010 	mls	r0, r3, r0, r4
 8003f04:	b100      	cbz	r0, 8003f08 <SysTick_Handler+0x1c>
      XF_tick();
  }
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f06:	bd10      	pop	{r4, pc}
 8003f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      XF_tick();
 8003f0c:	f001 bb0a 	b.w	8005524 <XF_tick>

08003f10 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003f10:	2004      	movs	r0, #4
 8003f12:	f7fc bf27 	b.w	8000d64 <HAL_GPIO_EXTI_IRQHandler>
 8003f16:	bf00      	nop

08003f18 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003f18:	2008      	movs	r0, #8
 8003f1a:	f7fc bf23 	b.w	8000d64 <HAL_GPIO_EXTI_IRQHandler>
 8003f1e:	bf00      	nop

08003f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003f22:	2040      	movs	r0, #64	; 0x40
 8003f24:	f7fc ff1e 	bl	8000d64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003f28:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003f2e:	f7fc bf19 	b.w	8000d64 <HAL_GPIO_EXTI_IRQHandler>
 8003f32:	bf00      	nop

08003f34 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003f34:	2001      	movs	r0, #1
 8003f36:	4770      	bx	lr

08003f38 <_kill>:

int _kill(int pid, int sig)
{
 8003f38:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003f3a:	f001 fc29 	bl	8005790 <__errno>
 8003f3e:	2316      	movs	r3, #22
 8003f40:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295
 8003f46:	bd08      	pop	{r3, pc}

08003f48 <_exit>:

void _exit (int status)
{
 8003f48:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003f4a:	f001 fc21 	bl	8005790 <__errno>
 8003f4e:	2316      	movs	r3, #22
 8003f50:	6003      	str	r3, [r0, #0]
 8003f52:	e7fe      	b.n	8003f52 <_exit+0xa>

08003f54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f54:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f56:	1e16      	subs	r6, r2, #0
 8003f58:	dd07      	ble.n	8003f6a <_read+0x16>
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003f5e:	f3af 8000 	nop.w
 8003f62:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f66:	42a5      	cmp	r5, r4
 8003f68:	d1f9      	bne.n	8003f5e <_read+0xa>
	}

return len;
}
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	bf00      	nop

08003f70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	1e16      	subs	r6, r2, #0
 8003f74:	dd07      	ble.n	8003f86 <_write+0x16>
 8003f76:	460c      	mov	r4, r1
 8003f78:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003f7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	42a5      	cmp	r5, r4
 8003f84:	d1f9      	bne.n	8003f7a <_write+0xa>
	}
	return len;
}
 8003f86:	4630      	mov	r0, r6
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
 8003f8a:	bf00      	nop

08003f8c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <_sbrk+0x34>)
{
 8003f8e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	b133      	cbz	r3, 8003fa2 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003f94:	4418      	add	r0, r3
 8003f96:	4669      	mov	r1, sp
 8003f98:	4288      	cmp	r0, r1
 8003f9a:	d809      	bhi.n	8003fb0 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003f9c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003fa2:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <_sbrk+0x38>)
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003fa8:	4669      	mov	r1, sp
 8003faa:	4418      	add	r0, r3
 8003fac:	4288      	cmp	r0, r1
 8003fae:	d9f5      	bls.n	8003f9c <_sbrk+0x10>
		errno = ENOMEM;
 8003fb0:	f001 fbee 	bl	8005790 <__errno>
 8003fb4:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8003fba:	6002      	str	r2, [r0, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd08      	pop	{r3, pc}
 8003fc0:	20000090 	.word	0x20000090
 8003fc4:	200007c0 	.word	0x200007c0

08003fc8 <_close>:

int _close(int file)
{
	return -1;
}
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003fd4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003fd6:	604b      	str	r3, [r1, #4]
}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003fdc:	2001      	movs	r0, #1
 8003fde:	4770      	bx	lr

08003fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	4770      	bx	lr

08003fe4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003fec:	490f      	ldr	r1, [pc, #60]	; (800402c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fee:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8003ff2:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ff4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8003ff8:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003ffa:	6818      	ldr	r0, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ffc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8004000:	4e0b      	ldr	r6, [pc, #44]	; (8004030 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8004002:	f040 0001 	orr.w	r0, r0, #1
 8004006:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004008:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	4001      	ands	r1, r0
 800400e:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8004010:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004018:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 800401a:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800401c:	6095      	str	r5, [r2, #8]
#endif
}
 800401e:	bc70      	pop	{r4, r5, r6}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	40023800 	.word	0x40023800
 800402c:	fef6ffff 	.word	0xfef6ffff
 8004030:	24003010 	.word	0x24003010

08004034 <_ZN18ButtonEventsLoggerD1Ev>:

}

ButtonEventsLogger::~ButtonEventsLogger() {
	// TODO Auto-generated destructor stub
}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop

08004038 <_ZN18ButtonEventsLogger20onButtonShortPressedEh>:

void ButtonEventsLogger::onButtonShortPressed(ButtonIndex buttonIndex){
	Trace::out("Short press : %d\r\n", buttonIndex);
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <_ZN18ButtonEventsLogger20onButtonShortPressedEh+0x8>)
 800403a:	f000 bc0d 	b.w	8004858 <_ZN5Trace3outEPKcz>
 800403e:	bf00      	nop
 8004040:	08006eb8 	.word	0x08006eb8

08004044 <_ZN18ButtonEventsLogger19onButtonLongPressedEh>:
}
void ButtonEventsLogger::onButtonLongPressed(ButtonIndex buttonIndex){
	Trace::out("Long press : %d\r\n", buttonIndex);
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <_ZN18ButtonEventsLogger19onButtonLongPressedEh+0x8>)
 8004046:	f000 bc07 	b.w	8004858 <_ZN5Trace3outEPKcz>
 800404a:	bf00      	nop
 800404c:	08006ecc 	.word	0x08006ecc

08004050 <_ZN18ButtonEventsLoggerD0Ev>:
ButtonEventsLogger::~ButtonEventsLogger() {
 8004050:	b510      	push	{r4, lr}
 8004052:	4604      	mov	r4, r0
}
 8004054:	2104      	movs	r1, #4
 8004056:	f001 fa86 	bl	8005566 <_ZdlPvj>
 800405a:	4620      	mov	r0, r4
 800405c:	bd10      	pop	{r4, pc}
 800405e:	bf00      	nop

08004060 <_ZN18ButtonEventsLoggerC1Ev>:
ButtonEventsLogger::ButtonEventsLogger() {
 8004060:	b510      	push	{r4, lr}
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <_ZN18ButtonEventsLoggerC1Ev+0x14>)
 8004064:	4604      	mov	r4, r0
	Trace::out("Hello World\r\n");
 8004066:	4804      	ldr	r0, [pc, #16]	; (8004078 <_ZN18ButtonEventsLoggerC1Ev+0x18>)
ButtonEventsLogger::ButtonEventsLogger() {
 8004068:	6023      	str	r3, [r4, #0]
	Trace::out("Hello World\r\n");
 800406a:	f000 fbf5 	bl	8004858 <_ZN5Trace3outEPKcz>
}
 800406e:	4620      	mov	r0, r4
 8004070:	bd10      	pop	{r4, pc}
 8004072:	bf00      	nop
 8004074:	08006af4 	.word	0x08006af4
 8004078:	08006ee0 	.word	0x08006ee0

0800407c <_ZN3app7Factory5buildEv>:
// TODO: Implement app::Factory class
	void app::Factory::initialize(){

	}

	void app::Factory::build(){
 800407c:	b570      	push	{r4, r5, r6, lr}
		app::Factory::_theButtonEventsLogger = new ButtonEventsLogger();
 800407e:	2004      	movs	r0, #4
	void app::Factory::build(){
 8004080:	b082      	sub	sp, #8
		app::Factory::_theButtonEventsLogger = new ButtonEventsLogger();
 8004082:	4c14      	ldr	r4, [pc, #80]	; (80040d4 <_ZN3app7Factory5buildEv+0x58>)
 8004084:	f001 fa71 	bl	800556a <_Znwj>
 8004088:	4605      	mov	r5, r0
 800408a:	f7ff ffe9 	bl	8004060 <_ZN18ButtonEventsLoggerC1Ev>
		app::Factory::_theButtonController = new ButtonController();
 800408e:	2030      	movs	r0, #48	; 0x30
		app::Factory::_theButtonEventsLogger = new ButtonEventsLogger();
 8004090:	6025      	str	r5, [r4, #0]
		app::Factory::_theButtonController = new ButtonController();
 8004092:	f001 fa6a 	bl	800556a <_Znwj>
 8004096:	4605      	mov	r5, r0
 8004098:	f000 fab0 	bl	80045fc <_ZN16ButtonControllerC1Ev>
		app::Factory::_theButtonEventsHandler = new ButtonEventsHandler();
 800409c:	2018      	movs	r0, #24
		app::Factory::_theButtonController = new ButtonController();
 800409e:	6065      	str	r5, [r4, #4]
		app::Factory::_theButtonEventsHandler = new ButtonEventsHandler();
 80040a0:	f001 fa63 	bl	800556a <_Znwj>
 80040a4:	4605      	mov	r5, r0
 80040a6:	f000 f927 	bl	80042f8 <_ZN19ButtonEventsHandlerC1Ev>
		_theButtonController->registerCallback(_theButtonEventsHandler,
 80040aa:	6860      	ldr	r0, [r4, #4]
 80040ac:	2300      	movs	r3, #0
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <_ZN3app7Factory5buildEv+0x5c>)
 80040b0:	4629      	mov	r1, r5
				(ButtonsControllerCallbackProvider::CallbackMethod)&ButtonEventsHandler::onButtonChanged);
 80040b2:	6806      	ldr	r6, [r0, #0]
		app::Factory::_theButtonEventsHandler = new ButtonEventsHandler();
 80040b4:	60a5      	str	r5, [r4, #8]
				(ButtonsControllerCallbackProvider::CallbackMethod)&ButtonEventsHandler::onButtonChanged);
 80040b6:	68f5      	ldr	r5, [r6, #12]
		_theButtonController->registerCallback(_theButtonEventsHandler,
 80040b8:	e9cd 2300 	strd	r2, r3, [sp]
 80040bc:	ab02      	add	r3, sp, #8
 80040be:	e913 000c 	ldmdb	r3, {r2, r3}
 80040c2:	47a8      	blx	r5
		_theButtonEventsHandler->subscribe(_theButtonEventsLogger);
 80040c4:	68a0      	ldr	r0, [r4, #8]
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	6803      	ldr	r3, [r0, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
	}
 80040cc:	b002      	add	sp, #8
 80040ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_theButtonEventsHandler->subscribe(_theButtonEventsLogger);
 80040d2:	4718      	bx	r3
 80040d4:	20000098 	.word	0x20000098
 80040d8:	080041c9 	.word	0x080041c9

080040dc <Factory_initialize>:
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <Factory_build>:
    app::Factory::initialize();
}

void Factory_build()
{
    app::Factory::build();
 80040e0:	f7ff bfcc 	b.w	800407c <_ZN3app7Factory5buildEv>

080040e4 <_ZNK13XFCustomEvent18deleteAfterConsumeEv>:

    /**
     * @brief Tells the XF if the event should be deleted after processing.
     * @return True if the event should be deleted.
     */
    bool deleteAfterConsume() const override { return _bDeleteAfterConsume; }
 80040e4:	7c00      	ldrb	r0, [r0, #16]
 80040e6:	4770      	bx	lr

080040e8 <_ZN11evButtonIrqD1Ev>:
#define EVBUTTONIRQ_H

#include "xf/customevent.h"
#include "events.h"

class evButtonIrq : public XFCustomEvent
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <_ZN11evButtonIrqD0Ev>:
 80040ec:	b510      	push	{r4, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	2114      	movs	r1, #20
 80040f2:	f001 fa38 	bl	8005566 <_ZdlPvj>
 80040f6:	4620      	mov	r0, r4
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop

080040fc <_ZN11evButtonIrqC1Ev>:
#include "events.h"
#include "evbuttonirq.h"

evButtonIrq::evButtonIrq() :
 80040fc:	b510      	push	{r4, lr}
    XFCustomEvent(evButtonIrqId)
 80040fe:	2200      	movs	r2, #0
 8004100:	2101      	movs	r1, #1
evButtonIrq::evButtonIrq() :
 8004102:	4604      	mov	r4, r0
    XFCustomEvent(evButtonIrqId)
 8004104:	f000 fcee 	bl	8004ae4 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8004108:	4a02      	ldr	r2, [pc, #8]	; (8004114 <_ZN11evButtonIrqC1Ev+0x18>)
protected:
    /**
     * @brief Setter for #_bDeleteAfterConsume attribute.
     * @param bDeleteAfterConsume Parameter to be assigned. Default: true.
     */
    void setDeleteAfterConsume(bool bDeleteAfterConsume = true) { _bDeleteAfterConsume = bDeleteAfterConsume; }
 800410a:	2300      	movs	r3, #0
{
	setDeleteAfterConsume(false);
}
 800410c:	4620      	mov	r0, r4
    XFCustomEvent(evButtonIrqId)
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	7423      	strb	r3, [r4, #16]
}
 8004112:	bd10      	pop	{r4, pc}
 8004114:	08006ef8 	.word	0x08006ef8

08004118 <_ZN7XFEventD1Ev>:
public :
    /**
     * Default class constructor
     */
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) {}
    virtual ~XFEvent() {}		///< Class destructor
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop

0800411c <_ZNK7XFEvent18deleteAfterConsumeEv>:
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { _pBehavior = pBehavior; }

    inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 800411c:	2000      	movs	r0, #0
 800411e:	4770      	bx	lr

08004120 <_ZN19ButtonEventsHandler9subscribeEPN9interface27ButtonEventsHandlerObserverE>:
		Trace::out("UNPRESSED\r\n");
		btnSM->pushEvent(new XFEvent(XFEvent::Event,EventIds::evButtonReleasedId,btnSM));
	}
}
bool ButtonEventsHandler::subscribe(ButtonEventsHandlerObserver *observer) {
	_subscriber = observer;
 8004120:	6081      	str	r1, [r0, #8]
}
 8004122:	4618      	mov	r0, r3
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <_ZN19ButtonEventsHandler11unsubscribeEPN9interface27ButtonEventsHandlerObserverE>:
void ButtonEventsHandler::unsubscribe(ButtonEventsHandlerObserver *observer) {
	_subscriber = observer;
 8004128:	6081      	str	r1, [r0, #8]
}
 800412a:	4770      	bx	lr

0800412c <_ZN19ButtonEventsHandler24notifyButtonShortPressedEt>:

void ButtonEventsHandler::notifyButtonShortPressed(ButtonIndex buttonIndex){
	_subscriber->onButtonShortPressed(buttonIndex);
 800412c:	6880      	ldr	r0, [r0, #8]
 800412e:	b2c9      	uxtb	r1, r1
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4718      	bx	r3
 8004136:	bf00      	nop

08004138 <_ZThn4_N19ButtonEventsHandler24notifyButtonShortPressedEt>:
	void onButtonChanged(ButtonIndex buttonIndex, bool pressed);
	bool subscribe(ButtonEventsHandlerObserver *observer) override;
	void unsubscribe(ButtonEventsHandlerObserver *observer) override;


	void notifyButtonShortPressed(ButtonIndex buttonIndex) override;	///< @brief Notifies observers about a button short pressed.
 8004138:	f1a0 0004 	sub.w	r0, r0, #4
 800413c:	f7ff bff6 	b.w	800412c <_ZN19ButtonEventsHandler24notifyButtonShortPressedEt>

08004140 <_ZN19ButtonEventsHandler23notifyButtonLongPressedEt>:
}
void ButtonEventsHandler::notifyButtonLongPressed(ButtonIndex buttonIndex){
	_subscriber->onButtonLongPressed(buttonIndex);
 8004140:	6880      	ldr	r0, [r0, #8]
 8004142:	b2c9      	uxtb	r1, r1
 8004144:	6803      	ldr	r3, [r0, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4718      	bx	r3
 800414a:	bf00      	nop

0800414c <_ZThn4_N19ButtonEventsHandler23notifyButtonLongPressedEt>:
	void notifyButtonLongPressed(ButtonIndex buttonIndex) override; ///< @brief Notifies observers about a button long pressed.
 800414c:	f1a0 0004 	sub.w	r0, r0, #4
 8004150:	f7ff bff6 	b.w	8004140 <_ZN19ButtonEventsHandler23notifyButtonLongPressedEt>

08004154 <_ZN7XFEventD0Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8004154:	b510      	push	{r4, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	2110      	movs	r1, #16
 800415a:	f001 fa04 	bl	8005566 <_ZdlPvj>
 800415e:	4620      	mov	r0, r4
 8004160:	bd10      	pop	{r4, pc}
 8004162:	bf00      	nop

08004164 <_ZN19ButtonEventsHandlerD1Ev>:
ButtonEventsHandler::~ButtonEventsHandler() {
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <_ZN19ButtonEventsHandlerD1Ev+0x1c>)
 8004166:	b510      	push	{r4, lr}
 8004168:	f103 0220 	add.w	r2, r3, #32
 800416c:	4604      	mov	r4, r0
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800416e:	68c0      	ldr	r0, [r0, #12]
 8004170:	e9c4 3200 	strd	r3, r2, [r4]
	if (__p)
 8004174:	b108      	cbz	r0, 800417a <_ZN19ButtonEventsHandlerD1Ev+0x16>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004176:	f001 fa11 	bl	800559c <_ZdlPv>
}
 800417a:	4620      	mov	r0, r4
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	08006b0c 	.word	0x08006b0c

08004184 <_ZThn4_N19ButtonEventsHandlerD1Ev>:
	virtual ~ButtonEventsHandler();
 8004184:	f1a0 0004 	sub.w	r0, r0, #4
 8004188:	f7ff bfec 	b.w	8004164 <_ZN19ButtonEventsHandlerD1Ev>

0800418c <_ZN19ButtonEventsHandlerD0Ev>:
ButtonEventsHandler::~ButtonEventsHandler() {
 800418c:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <_ZN19ButtonEventsHandlerD0Ev+0x24>)
 800418e:	b510      	push	{r4, lr}
 8004190:	f103 0220 	add.w	r2, r3, #32
 8004194:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004196:	68c0      	ldr	r0, [r0, #12]
 8004198:	e9c4 3200 	strd	r3, r2, [r4]
	if (__p)
 800419c:	b108      	cbz	r0, 80041a2 <_ZN19ButtonEventsHandlerD0Ev+0x16>
 800419e:	f001 f9fd 	bl	800559c <_ZdlPv>
}
 80041a2:	4620      	mov	r0, r4
 80041a4:	2118      	movs	r1, #24
 80041a6:	f001 f9de 	bl	8005566 <_ZdlPvj>
 80041aa:	4620      	mov	r0, r4
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	bf00      	nop
 80041b0:	08006b0c 	.word	0x08006b0c

080041b4 <_ZThn4_N19ButtonEventsHandlerD0Ev>:
 80041b4:	f1a0 0004 	sub.w	r0, r0, #4
 80041b8:	f7ff bfe8 	b.w	800418c <_ZN19ButtonEventsHandlerD0Ev>

080041bc <_ZThn4_N19ButtonEventsHandler11unsubscribeEPN9interface27ButtonEventsHandlerObserverE>:
 80041bc:	6041      	str	r1, [r0, #4]
 80041be:	4770      	bx	lr

080041c0 <_ZThn4_N19ButtonEventsHandler9subscribeEPN9interface27ButtonEventsHandlerObserverE>:
 80041c0:	6041      	str	r1, [r0, #4]
 80041c2:	2000      	movs	r0, #0
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <_ZN19ButtonEventsHandler15onButtonChangedEtb>:
void ButtonEventsHandler::onButtonChanged(ButtonIndex buttonIndex, bool pressed) {
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4605      	mov	r5, r0
	Trace::out("Went in ButtonEventsHandler::onButtonChanged : ");
 80041cc:	481e      	ldr	r0, [pc, #120]	; (8004248 <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x80>)
void ButtonEventsHandler::onButtonChanged(ButtonIndex buttonIndex, bool pressed) {
 80041ce:	460c      	mov	r4, r1
 80041d0:	4616      	mov	r6, r2
	Trace::out("Went in ButtonEventsHandler::onButtonChanged : ");
 80041d2:	f000 fb41 	bl	8004858 <_ZN5Trace3outEPKcz>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80041d6:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
 80041da:	1a5b      	subs	r3, r3, r1
 80041dc:	109b      	asrs	r3, r3, #2
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 80041de:	429c      	cmp	r4, r3
 80041e0:	d22d      	bcs.n	800423e <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x76>
	btnSM = _vectBtnStateSM.at(buttonIndex);
 80041e2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
	if (!pressed){
 80041e6:	b1a6      	cbz	r6, 8004212 <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x4a>
		Trace::out("UNPRESSED\r\n");
 80041e8:	4818      	ldr	r0, [pc, #96]	; (800424c <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x84>)
 80041ea:	f000 fb35 	bl	8004858 <_ZN5Trace3outEPKcz>
		btnSM->pushEvent(new XFEvent(XFEvent::Event,EventIds::evButtonReleasedId,btnSM));
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	2010      	movs	r0, #16
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) {}
 80041f2:	4e17      	ldr	r6, [pc, #92]	; (8004250 <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x88>)
 80041f4:	68dd      	ldr	r5, [r3, #12]
 80041f6:	f001 f9b8 	bl	800556a <_Znwj>
 80041fa:	2203      	movs	r2, #3
 80041fc:	4603      	mov	r3, r0
 80041fe:	4620      	mov	r0, r4
 8004200:	60dc      	str	r4, [r3, #12]
 8004202:	4619      	mov	r1, r3
 8004204:	601e      	str	r6, [r3, #0]
 8004206:	711a      	strb	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	462b      	mov	r3, r5
}
 800420c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		btnSM->pushEvent(new XFEvent(XFEvent::Event,EventIds::evButtonReleasedId,btnSM));
 8004210:	4718      	bx	r3
		Trace::out("PRESSED\r\n");
 8004212:	4810      	ldr	r0, [pc, #64]	; (8004254 <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x8c>)
 8004214:	2603      	movs	r6, #3
 8004216:	f000 fb1f 	bl	8004858 <_ZN5Trace3outEPKcz>
		btnSM->pushEvent(new XFEvent(XFEvent::Event,EventIds::evButtonPressedId,btnSM));
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	2010      	movs	r0, #16
 800421e:	68dd      	ldr	r5, [r3, #12]
 8004220:	f001 f9a3 	bl	800556a <_Znwj>
 8004224:	490a      	ldr	r1, [pc, #40]	; (8004250 <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x88>)
 8004226:	4603      	mov	r3, r0
 8004228:	2202      	movs	r2, #2
 800422a:	4620      	mov	r0, r4
 800422c:	60dc      	str	r4, [r3, #12]
 800422e:	6019      	str	r1, [r3, #0]
 8004230:	4619      	mov	r1, r3
 8004232:	711e      	strb	r6, [r3, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	462b      	mov	r3, r5
}
 8004238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		btnSM->pushEvent(new XFEvent(XFEvent::Event,EventIds::evButtonPressedId,btnSM));
 800423c:	4718      	bx	r3
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800423e:	461a      	mov	r2, r3
 8004240:	4621      	mov	r1, r4
 8004242:	4805      	ldr	r0, [pc, #20]	; (8004258 <_ZN19ButtonEventsHandler15onButtonChangedEtb+0x90>)
 8004244:	f001 f9cf 	bl	80055e6 <_ZSt24__throw_out_of_range_fmtPKcz>
 8004248:	08006f18 	.word	0x08006f18
 800424c:	08006fa0 	.word	0x08006fa0
 8004250:	08006f0c 	.word	0x08006f0c
 8004254:	08006f94 	.word	0x08006f94
 8004258:	08006f48 	.word	0x08006f48

0800425c <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004260:	e9d0 5a00 	ldrd	r5, sl, [r0]
 8004264:	b083      	sub	sp, #12
 8004266:	4606      	mov	r6, r0
 8004268:	ebaa 0305 	sub.w	r3, sl, r5
 800426c:	4688      	mov	r8, r1
 800426e:	eba1 0b05 	sub.w	fp, r1, r5
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004272:	109b      	asrs	r3, r3, #2
 8004274:	d034      	beq.n	80042e0 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x84>
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 8004276:	005f      	lsls	r7, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004278:	42bb      	cmp	r3, r7
 800427a:	d934      	bls.n	80042e6 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
 800427c:	f06f 0703 	mvn.w	r7, #3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004280:	4638      	mov	r0, r7
 8004282:	9201      	str	r2, [sp, #4]
 8004284:	f001 f971 	bl	800556a <_Znwj>
 8004288:	6835      	ldr	r5, [r6, #0]
 800428a:	4681      	mov	r9, r0
 800428c:	4407      	add	r7, r0
 800428e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8004292:	eba8 0405 	sub.w	r4, r8, r5
 8004296:	9a01      	ldr	r2, [sp, #4]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004298:	eb19 0f0b 	cmn.w	r9, fp
 800429c:	d002      	beq.n	80042a4 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	f849 300b 	str.w	r3, [r9, fp]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80042a4:	45a8      	cmp	r8, r5
 80042a6:	d004      	beq.n	80042b2 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x56>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80042a8:	4622      	mov	r2, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	4648      	mov	r0, r9
 80042ae:	f001 fac6 	bl	800583e <memmove>
	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
	     __new_start, _M_get_Tp_allocator());

	  ++__new_finish;
 80042b2:	1d23      	adds	r3, r4, #4
	  if (_Num)
 80042b4:	45c2      	cmp	sl, r8
	  const ptrdiff_t _Num = __last - __first;
 80042b6:	ebaa 0408 	sub.w	r4, sl, r8
 80042ba:	444b      	add	r3, r9
	  if (_Num)
 80042bc:	d005      	beq.n	80042ca <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80042be:	4618      	mov	r0, r3
 80042c0:	4641      	mov	r1, r8
 80042c2:	4622      	mov	r2, r4
 80042c4:	f001 fab0 	bl	8005828 <memcpy>
 80042c8:	4603      	mov	r3, r0
	  return __result + _Num;
 80042ca:	441c      	add	r4, r3
	if (__p)
 80042cc:	b115      	cbz	r5, 80042d4 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	::operator delete(__p);
 80042ce:	4628      	mov	r0, r5
 80042d0:	f001 f964 	bl	800559c <_ZdlPv>
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80042d4:	60b7      	str	r7, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
 80042d6:	e9c6 9400 	strd	r9, r4, [r6]
    }
 80042da:	b003      	add	sp, #12
 80042dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const size_type __len = size() + std::max(size(), __n);
 80042e0:	2701      	movs	r7, #1
 80042e2:	00bf      	lsls	r7, r7, #2
 80042e4:	e7cc      	b.n	8004280 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80042e6:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80042ea:	d2c7      	bcs.n	800427c <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x20>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80042ec:	2f00      	cmp	r7, #0
 80042ee:	d1f8      	bne.n	80042e2 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
 80042f0:	465c      	mov	r4, fp
 80042f2:	46b9      	mov	r9, r7
 80042f4:	e7d0      	b.n	8004298 <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
 80042f6:	bf00      	nop

080042f8 <_ZN19ButtonEventsHandlerC1Ev>:
ButtonEventsHandler::ButtonEventsHandler() {
 80042f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <_ZN19ButtonEventsHandlerC1Ev+0x6c>)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80042fe:	2300      	movs	r3, #0
	assert(!_pInstance);
 8004300:	4f19      	ldr	r7, [pc, #100]	; (8004368 <_ZN19ButtonEventsHandlerC1Ev+0x70>)
ButtonEventsHandler::ButtonEventsHandler() {
 8004302:	b082      	sub	sp, #8
 8004304:	f102 0120 	add.w	r1, r2, #32
 8004308:	6002      	str	r2, [r0, #0]
	assert(!_pInstance);
 800430a:	683d      	ldr	r5, [r7, #0]
ButtonEventsHandler::ButtonEventsHandler() {
 800430c:	6041      	str	r1, [r0, #4]
 800430e:	6143      	str	r3, [r0, #20]
 8004310:	e9c0 3303 	strd	r3, r3, [r0, #12]
	assert(!_pInstance);
 8004314:	bb05      	cbnz	r5, 8004358 <_ZN19ButtonEventsHandlerC1Ev+0x60>
 8004316:	4604      	mov	r4, r0
 8004318:	f100 080c 	add.w	r8, r0, #12
	_pInstance = this;
 800431c:	6038      	str	r0, [r7, #0]
	_vectBtnStateSM.push_back(new ButtonStateSm(i,_pInstance));
 800431e:	2018      	movs	r0, #24
 8004320:	f001 f923 	bl	800556a <_Znwj>
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	b2e9      	uxtb	r1, r5
 8004328:	4606      	mov	r6, r0
 800432a:	f000 f8e9 	bl	8004500 <_ZN13ButtonStateSmC1EhP19ButtonEventsHandler>
 800432e:	9601      	str	r6, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004330:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8004334:	4299      	cmp	r1, r3
 8004336:	d00a      	beq.n	800434e <_ZN19ButtonEventsHandlerC1Ev+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004338:	b101      	cbz	r1, 800433c <_ZN19ButtonEventsHandlerC1Ev+0x44>
 800433a:	600e      	str	r6, [r1, #0]
	    ++this->_M_impl._M_finish;
 800433c:	3104      	adds	r1, #4
 800433e:	6121      	str	r1, [r4, #16]
	for (int i = 0; i < 4; i++){
 8004340:	3501      	adds	r5, #1
 8004342:	2d04      	cmp	r5, #4
 8004344:	d1eb      	bne.n	800431e <_ZN19ButtonEventsHandlerC1Ev+0x26>
}
 8004346:	4620      	mov	r0, r4
 8004348:	b002      	add	sp, #8
 800434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800434e:	aa01      	add	r2, sp, #4
 8004350:	4640      	mov	r0, r8
 8004352:	f7ff ff83 	bl	800425c <_ZNSt6vectorIP13ButtonStateSmSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8004356:	e7f3      	b.n	8004340 <_ZN19ButtonEventsHandlerC1Ev+0x48>
	assert(!_pInstance);
 8004358:	3238      	adds	r2, #56	; 0x38
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <_ZN19ButtonEventsHandlerC1Ev+0x74>)
 800435c:	210d      	movs	r1, #13
 800435e:	4804      	ldr	r0, [pc, #16]	; (8004370 <_ZN19ButtonEventsHandlerC1Ev+0x78>)
 8004360:	f001 f9f2 	bl	8005748 <__assert_func>
 8004364:	08006b0c 	.word	0x08006b0c
 8004368:	200000a4 	.word	0x200000a4
 800436c:	08006fac 	.word	0x08006fac
 8004370:	08006fb8 	.word	0x08006fb8

08004374 <_ZN13ButtonStateSmD1Ev>:
	_theHandler = handler;

	startBehavior();
}

ButtonStateSm::~ButtonStateSm() {
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <_ZN13ButtonStateSmD1Ev+0x10>)
 8004376:	b510      	push	{r4, lr}
 8004378:	4604      	mov	r4, r0
 800437a:	6003      	str	r3, [r0, #0]
 800437c:	f000 fba2 	bl	8004ac4 <_ZN10XFBehaviorD1Ev>
	// TODO Auto-generated destructor stub
}
 8004380:	4620      	mov	r0, r4
 8004382:	bd10      	pop	{r4, pc}
 8004384:	08006b78 	.word	0x08006b78

08004388 <_ZN13ButtonStateSmD0Ev>:
ButtonStateSm::~ButtonStateSm() {
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <_ZN13ButtonStateSmD0Ev+0x18>)
 800438a:	b510      	push	{r4, lr}
 800438c:	4604      	mov	r4, r0
 800438e:	6003      	str	r3, [r0, #0]
 8004390:	f000 fb98 	bl	8004ac4 <_ZN10XFBehaviorD1Ev>
}
 8004394:	2118      	movs	r1, #24
 8004396:	4620      	mov	r0, r4
 8004398:	f001 f8e5 	bl	8005566 <_ZdlPvj>
 800439c:	4620      	mov	r0, r4
 800439e:	bd10      	pop	{r4, pc}
 80043a0:	08006b78 	.word	0x08006b78

080043a4 <_ZN13ButtonStateSm12processEventEv>:
}
void ButtonStateSm::doNotifyButtonLongPressed(){
	_theHandler->notifyButtonLongPressed(btnIndex);
}

XFEventStatus ButtonStateSm::processEvent() {
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	4604      	mov	r4, r0
	Trace::out("Went in ButtonStateSm%d::processEvent\r\n", this->btnIndex);
 80043a8:	4850      	ldr	r0, [pc, #320]	; (80044ec <_ZN13ButtonStateSm12processEventEv+0x148>)
 80043aa:	7ca1      	ldrb	r1, [r4, #18]
 80043ac:	f000 fa54 	bl	8004858 <_ZN5Trace3outEPKcz>
	eEventStatus eventStatus = XFEventStatus::Unknown;

	oldState = btnState;
 80043b0:	7c23      	ldrb	r3, [r4, #16]
 80043b2:	7463      	strb	r3, [r4, #17]
	switch (btnState){
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	f200 8097 	bhi.w	80044e8 <_ZN13ButtonStateSm12processEventEv+0x144>
 80043ba:	e8df f003 	tbb	[pc, r3]
 80043be:	463d      	.short	0x463d
 80043c0:	3160      	.short	0x3160
 80043c2:	03          	.byte	0x03
 80043c3:	00          	.byte	0x00
			{
				btnState = WAIT_BUTTON_PRESSED;
				break;
			}
		case BUTTON_LONG_PRESSED:
			if(getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 80043c4:	4620      	mov	r0, r4
 80043c6:	f000 fb81 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 80043ca:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d02d      	beq.n	800442e <_ZN13ButtonStateSm12processEventEv+0x8a>
 80043d2:	7c62      	ldrb	r2, [r4, #17]
	eEventStatus eventStatus = XFEventStatus::Unknown;
 80043d4:	2500      	movs	r5, #0
 80043d6:	7c23      	ldrb	r3, [r4, #16]
				break;
			}
		default:
			break;
	}
	if (oldState!=btnState){
 80043d8:	429a      	cmp	r2, r3
 80043da:	d017      	beq.n	800440c <_ZN13ButtonStateSm12processEventEv+0x68>
		switch(btnState)
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <_ZN13ButtonStateSm12processEventEv+0x6c>
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d113      	bne.n	800440c <_ZN13ButtonStateSm12processEventEv+0x68>
				Trace::out("SEND SHORT PRESS\r\n");
				doNotifyButtonShortPressed();
				GEN(XFNullTransition);
				break;
			case BUTTON_LONG_PRESSED:
				Trace::out("SEND LONG PRESS\r\n");
 80043e4:	4842      	ldr	r0, [pc, #264]	; (80044f0 <_ZN13ButtonStateSm12processEventEv+0x14c>)
 80043e6:	f000 fa37 	bl	8004858 <_ZN5Trace3outEPKcz>
	_theHandler->notifyButtonLongPressed(btnIndex);
 80043ea:	6960      	ldr	r0, [r4, #20]
 80043ec:	7ca1      	ldrb	r1, [r4, #18]
 80043ee:	6803      	ldr	r3, [r0, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	4798      	blx	r3
				doNotifyButtonLongPressed();
				GEN(XFNullTransition);
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	2010      	movs	r0, #16
 80043f8:	68de      	ldr	r6, [r3, #12]
 80043fa:	f001 f8b6 	bl	800556a <_Znwj>
 80043fe:	4607      	mov	r7, r0
 8004400:	2100      	movs	r1, #0
 8004402:	f000 fba3 	bl	8004b4c <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8004406:	4620      	mov	r0, r4
 8004408:	4639      	mov	r1, r7
 800440a:	47b0      	blx	r6
			default:
				break;
		}
	}
	return eventStatus;
}
 800440c:	4628      	mov	r0, r5
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Trace::out("SEND SHORT PRESS\r\n");
 8004410:	4838      	ldr	r0, [pc, #224]	; (80044f4 <_ZN13ButtonStateSm12processEventEv+0x150>)
 8004412:	f000 fa21 	bl	8004858 <_ZN5Trace3outEPKcz>
	_theHandler->notifyButtonShortPressed(btnIndex);
 8004416:	6960      	ldr	r0, [r4, #20]
 8004418:	7ca1      	ldrb	r1, [r4, #18]
 800441a:	6803      	ldr	r3, [r0, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	e7e8      	b.n	80043f2 <_ZN13ButtonStateSm12processEventEv+0x4e>
			if(getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8004420:	4620      	mov	r0, r4
 8004422:	f000 fb53 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 8004426:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d1ca      	bne.n	80043c4 <_ZN13ButtonStateSm12processEventEv+0x20>
				btnState = WAIT_BUTTON_PRESSED;
 800442e:	2301      	movs	r3, #1
	eEventStatus eventStatus = XFEventStatus::Unknown;
 8004430:	2500      	movs	r5, #0
				btnState = WAIT_BUTTON_PRESSED;
 8004432:	7423      	strb	r3, [r4, #16]
}
 8004434:	4628      	mov	r0, r5
 8004436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 8004438:	4620      	mov	r0, r4
 800443a:	f000 fb47 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 800443e:	f990 5004 	ldrsb.w	r5, [r0, #4]
 8004442:	2d01      	cmp	r5, #1
 8004444:	d1c5      	bne.n	80043d2 <_ZN13ButtonStateSm12processEventEv+0x2e>
				btnState = WAIT_BUTTON_PRESSED;
 8004446:	7425      	strb	r5, [r4, #16]
 8004448:	e7e0      	b.n	800440c <_ZN13ButtonStateSm12processEventEv+0x68>
			if (getCurrentEvent()->getEventType() == XFEvent::Event
 800444a:	4620      	mov	r0, r4
 800444c:	f000 fb3e 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
					&& getCurrentEvent()->getId() == EventIds::evButtonPressedId){
 8004450:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d1bc      	bne.n	80043d2 <_ZN13ButtonStateSm12processEventEv+0x2e>
 8004458:	4620      	mov	r0, r4
 800445a:	f000 fb37 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 800445e:	6886      	ldr	r6, [r0, #8]
 8004460:	2e02      	cmp	r6, #2
 8004462:	d1b6      	bne.n	80043d2 <_ZN13ButtonStateSm12processEventEv+0x2e>
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 8004464:	4620      	mov	r0, r4
				eventStatus = XFEventStatus::Consumed;
 8004466:	2501      	movs	r5, #1
 8004468:	f000 fb2e 	bl	8004ac8 <_ZN10XFBehavior13getDispatcherEv>
 800446c:	6801      	ldr	r1, [r0, #0]
 800446e:	4623      	mov	r3, r4
 8004470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004474:	698f      	ldr	r7, [r1, #24]
 8004476:	2105      	movs	r1, #5
 8004478:	47b8      	blx	r7
				btnState = BUTTON_PRESSED;
 800447a:	7426      	strb	r6, [r4, #16]
 800447c:	e7c6      	b.n	800440c <_ZN13ButtonStateSm12processEventEv+0x68>
			if(getCurrentEvent()->getEventType() == XFEvent::Event
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fb24 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
					&& getCurrentEvent()->getId() == EventIds::evButtonReleasedId){ //On a release le button < timeLongPress
 8004484:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d019      	beq.n	80044c0 <_ZN13ButtonStateSm12processEventEv+0x11c>
	eEventStatus eventStatus = XFEventStatus::Unknown;
 800448c:	2500      	movs	r5, #0
			if (getCurrentEvent()->getEventType() == XFEvent::Timeout
 800448e:	4620      	mov	r0, r4
 8004490:	f000 fb1c 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
					&& getCurrentEvent()->getId() == EventIds::evButtonLongPressedId){
 8004494:	f990 6004 	ldrsb.w	r6, [r0, #4]
 8004498:	2e04      	cmp	r6, #4
 800449a:	d002      	beq.n	80044a2 <_ZN13ButtonStateSm12processEventEv+0xfe>
 800449c:	7c62      	ldrb	r2, [r4, #17]
 800449e:	7c23      	ldrb	r3, [r4, #16]
 80044a0:	e79a      	b.n	80043d8 <_ZN13ButtonStateSm12processEventEv+0x34>
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fb12 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 80044a8:	6883      	ldr	r3, [r0, #8]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d1f6      	bne.n	800449c <_ZN13ButtonStateSm12processEventEv+0xf8>
				Trace::out("LONG PRESS\r\n");
 80044ae:	4812      	ldr	r0, [pc, #72]	; (80044f8 <_ZN13ButtonStateSm12processEventEv+0x154>)
				eventStatus = XFEventStatus::Consumed;
 80044b0:	2501      	movs	r5, #1
				Trace::out("LONG PRESS\r\n");
 80044b2:	f000 f9d1 	bl	8004858 <_ZN5Trace3outEPKcz>
	if (oldState!=btnState){
 80044b6:	7c63      	ldrb	r3, [r4, #17]
				btnState = BUTTON_LONG_PRESSED;
 80044b8:	7426      	strb	r6, [r4, #16]
	if (oldState!=btnState){
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d192      	bne.n	80043e4 <_ZN13ButtonStateSm12processEventEv+0x40>
 80044be:	e7a5      	b.n	800440c <_ZN13ButtonStateSm12processEventEv+0x68>
					&& getCurrentEvent()->getId() == EventIds::evButtonReleasedId){ //On a release le button < timeLongPress
 80044c0:	4620      	mov	r0, r4
 80044c2:	f000 fb03 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 80044c6:	6886      	ldr	r6, [r0, #8]
 80044c8:	2e03      	cmp	r6, #3
 80044ca:	d1df      	bne.n	800448c <_ZN13ButtonStateSm12processEventEv+0xe8>
				Trace::out("SHORT PRESS\r\n");
 80044cc:	480b      	ldr	r0, [pc, #44]	; (80044fc <_ZN13ButtonStateSm12processEventEv+0x158>)
				eventStatus = XFEventStatus::Consumed;
 80044ce:	2501      	movs	r5, #1
				Trace::out("SHORT PRESS\r\n");
 80044d0:	f000 f9c2 	bl	8004858 <_ZN5Trace3outEPKcz>
				btnState = BUTTON_SHORT_PRESSED;
 80044d4:	7426      	strb	r6, [r4, #16]
    inline void unscheduleTimeout(int timeoutId) { getDispatcher()->unscheduleTimeout(timeoutId, this); }						///< @brief Unschedules a timeout for this state machine.
 80044d6:	4620      	mov	r0, r4
 80044d8:	f000 faf6 	bl	8004ac8 <_ZN10XFBehavior13getDispatcherEv>
 80044dc:	6803      	ldr	r3, [r0, #0]
 80044de:	4622      	mov	r2, r4
 80044e0:	2105      	movs	r1, #5
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4798      	blx	r3
 80044e6:	e7d2      	b.n	800448e <_ZN13ButtonStateSm12processEventEv+0xea>
	eEventStatus eventStatus = XFEventStatus::Unknown;
 80044e8:	2500      	movs	r5, #0
 80044ea:	e78f      	b.n	800440c <_ZN13ButtonStateSm12processEventEv+0x68>
 80044ec:	08007018 	.word	0x08007018
 80044f0:	08007074 	.word	0x08007074
 80044f4:	08007060 	.word	0x08007060
 80044f8:	08007050 	.word	0x08007050
 80044fc:	08007040 	.word	0x08007040

08004500 <_ZN13ButtonStateSmC1EhP19ButtonEventsHandler>:
ButtonStateSm::ButtonStateSm(ButtonIndex index, ButtonEventsHandler* handler) {
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460e      	mov	r6, r1
 8004504:	2100      	movs	r1, #0
 8004506:	4604      	mov	r4, r0
 8004508:	4615      	mov	r5, r2
 800450a:	f000 fab5 	bl	8004a78 <_ZN10XFBehaviorC1Eb>
 800450e:	4905      	ldr	r1, [pc, #20]	; (8004524 <_ZN13ButtonStateSmC1EhP19ButtonEventsHandler+0x24>)
	btnState = STATE_INITIAL;
 8004510:	2300      	movs	r3, #0
	startBehavior();
 8004512:	4620      	mov	r0, r4
	this->btnIndex = index;
 8004514:	74a6      	strb	r6, [r4, #18]
	_theHandler = handler;
 8004516:	6165      	str	r5, [r4, #20]
ButtonStateSm::ButtonStateSm(ButtonIndex index, ButtonEventsHandler* handler) {
 8004518:	6021      	str	r1, [r4, #0]
	btnState = STATE_INITIAL;
 800451a:	7423      	strb	r3, [r4, #16]
	startBehavior();
 800451c:	f000 fa96 	bl	8004a4c <_ZN10XFBehavior13startBehaviorEv>
}
 8004520:	4620      	mov	r0, r4
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	08006b78 	.word	0x08006b78

08004528 <__tcf_0>:
ButtonController::~ButtonController() {
	// TODO Auto-generated destructor stub
}

void ButtonController::onIrq(){
	static evButtonIrq e = evButtonIrq();
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <_ZN16ButtonController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:
	pushEvent(&e);


}
bool ButtonController::registerCallback(ButtonsControllerCallbackProvider * callbackProvider,
                              ButtonsControllerCallbackProvider::CallbackMethod callbackMethod){
 800452c:	b430      	push	{r4, r5}
 800452e:	4605      	mov	r5, r0
 8004530:	b082      	sub	sp, #8
	_theCallBackProvider = callbackProvider;
	_theCallBackMethod = callbackMethod;
	return true;
}
 8004532:	2001      	movs	r0, #1
	_theCallBackProvider = callbackProvider;
 8004534:	61a9      	str	r1, [r5, #24]
	_theCallBackMethod = callbackMethod;
 8004536:	f105 041c 	add.w	r4, r5, #28
                              ButtonsControllerCallbackProvider::CallbackMethod callbackMethod){
 800453a:	a902      	add	r1, sp, #8
	_theCallBackMethod = callbackMethod;
 800453c:	e884 000c 	stmia.w	r4, {r2, r3}
                              ButtonsControllerCallbackProvider::CallbackMethod callbackMethod){
 8004540:	e901 000c 	stmdb	r1, {r2, r3}
}
 8004544:	b002      	add	sp, #8
 8004546:	bc30      	pop	{r4, r5}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop

0800454c <_ZThn4_N16ButtonController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>:
	virtual ~ButtonController();
	typedef enum {STATE_INITIAL,STATE_CHECK_BUTTONS,STATE_DEBOUNCE} ButtonControllerState;

	void doCheckButtons();
	void onIrq() override;	///< @brief Called by the ISR.
    bool registerCallback(ButtonsControllerCallbackProvider * callbackProvider,
 800454c:	f1a0 0004 	sub.w	r0, r0, #4
 8004550:	f7ff bfec 	b.w	800452c <_ZN16ButtonController16registerCallbackEPN9interface33ButtonsControllerCallbackProviderEMS1_FvtbE>

08004554 <_ZN16ButtonControllerD1Ev>:
ButtonController::~ButtonController() {
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <_ZN16ButtonControllerD1Ev+0x20>)
 8004556:	f103 0108 	add.w	r1, r3, #8
 800455a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800455e:	3338      	adds	r3, #56	; 0x38
 8004560:	b510      	push	{r4, lr}
 8004562:	4604      	mov	r4, r0
 8004564:	e9c0 1200 	strd	r1, r2, [r0]
 8004568:	f840 3f08 	str.w	r3, [r0, #8]!
 800456c:	f000 faaa 	bl	8004ac4 <_ZN10XFBehaviorD1Ev>
}
 8004570:	4620      	mov	r0, r4
 8004572:	bd10      	pop	{r4, pc}
 8004574:	08006b98 	.word	0x08006b98

08004578 <_ZThn4_N16ButtonControllerD1Ev>:
	virtual ~ButtonController();
 8004578:	f1a0 0004 	sub.w	r0, r0, #4
 800457c:	f7ff bfea 	b.w	8004554 <_ZN16ButtonControllerD1Ev>

08004580 <_ZThn8_N16ButtonControllerD1Ev>:
 8004580:	f1a0 0008 	sub.w	r0, r0, #8
 8004584:	f7ff bfe6 	b.w	8004554 <_ZN16ButtonControllerD1Ev>

08004588 <_ZN16ButtonControllerD0Ev>:
ButtonController::~ButtonController() {
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <_ZN16ButtonControllerD0Ev+0x28>)
 800458a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800458e:	f103 0108 	add.w	r1, r3, #8
 8004592:	3338      	adds	r3, #56	; 0x38
 8004594:	b510      	push	{r4, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	e9c0 1200 	strd	r1, r2, [r0]
 800459c:	f840 3f08 	str.w	r3, [r0, #8]!
 80045a0:	f000 fa90 	bl	8004ac4 <_ZN10XFBehaviorD1Ev>
}
 80045a4:	4620      	mov	r0, r4
 80045a6:	2130      	movs	r1, #48	; 0x30
 80045a8:	f000 ffdd 	bl	8005566 <_ZdlPvj>
 80045ac:	4620      	mov	r0, r4
 80045ae:	bd10      	pop	{r4, pc}
 80045b0:	08006b98 	.word	0x08006b98

080045b4 <_ZThn8_N16ButtonControllerD0Ev>:
 80045b4:	f1a0 0008 	sub.w	r0, r0, #8
 80045b8:	f7ff bfe6 	b.w	8004588 <_ZN16ButtonControllerD0Ev>

080045bc <_ZThn4_N16ButtonControllerD0Ev>:
 80045bc:	f1a0 0004 	sub.w	r0, r0, #4
 80045c0:	f7ff bfe2 	b.w	8004588 <_ZN16ButtonControllerD0Ev>

080045c4 <_ZN16ButtonController5onIrqEv>:
void ButtonController::onIrq(){
 80045c4:	b570      	push	{r4, r5, r6, lr}
	static evButtonIrq e = evButtonIrq();
 80045c6:	4d0a      	ldr	r5, [pc, #40]	; (80045f0 <_ZN16ButtonController5onIrqEv+0x2c>)
void ButtonController::onIrq(){
 80045c8:	4604      	mov	r4, r0
	static evButtonIrq e = evButtonIrq();
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	07db      	lsls	r3, r3, #31
 80045ce:	d407      	bmi.n	80045e0 <_ZN16ButtonController5onIrqEv+0x1c>
 80045d0:	1d28      	adds	r0, r5, #4
 80045d2:	f7ff fd93 	bl	80040fc <_ZN11evButtonIrqC1Ev>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4806      	ldr	r0, [pc, #24]	; (80045f4 <_ZN16ButtonController5onIrqEv+0x30>)
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f001 f8d2 	bl	8005784 <atexit>
	pushEvent(&e);
 80045e0:	68a3      	ldr	r3, [r4, #8]
 80045e2:	f104 0008 	add.w	r0, r4, #8
 80045e6:	4904      	ldr	r1, [pc, #16]	; (80045f8 <_ZN16ButtonController5onIrqEv+0x34>)
 80045e8:	68db      	ldr	r3, [r3, #12]
}
 80045ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	pushEvent(&e);
 80045ee:	4718      	bx	r3
 80045f0:	200000a8 	.word	0x200000a8
 80045f4:	08004529 	.word	0x08004529
 80045f8:	200000ac 	.word	0x200000ac

080045fc <_ZN16ButtonControllerC1Ev>:
ButtonController::ButtonController(){
 80045fc:	b570      	push	{r4, r5, r6, lr}
    virtual ~ButtonIrq() {}

	virtual void onIrq() = 0;	///< @brief Called by the ISR.

protected:
	ButtonIrq() {}              ///< Not allowing to instantiate object of interface.
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <_ZN16ButtonControllerC1Ev+0x74>)
 8004600:	f100 0608 	add.w	r6, r0, #8
     */
    virtual bool registerCallback(ButtonsControllerCallbackProvider * callbackProvider,
                                  ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) = 0;

protected:
    ButtonsControllerCallbackCaller() {}                        ///< Not allowing to instantiate object of interface.
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <_ZN16ButtonControllerC1Ev+0x78>)
 8004606:	4604      	mov	r4, r0
 8004608:	2100      	movs	r1, #0
	assert(!_pInstance);
 800460a:	4d1b      	ldr	r5, [pc, #108]	; (8004678 <_ZN16ButtonControllerC1Ev+0x7c>)
 800460c:	e9c0 2300 	strd	r2, r3, [r0]
ButtonController::ButtonController(){
 8004610:	4630      	mov	r0, r6
 8004612:	f000 fa31 	bl	8004a78 <_ZN10XFBehaviorC1Eb>
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <_ZN16ButtonControllerC1Ev+0x80>)
	assert(!_pInstance);
 8004618:	69a9      	ldr	r1, [r5, #24]
ButtonController::ButtonController(){
 800461a:	f102 001c 	add.w	r0, r2, #28
 800461e:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8004622:	e9c4 2000 	strd	r2, r0, [r4]
 8004626:	60a3      	str	r3, [r4, #8]
	assert(!_pInstance);
 8004628:	b9d9      	cbnz	r1, 8004662 <_ZN16ButtonControllerC1Ev+0x66>
			oldBtnState[i] = true;
 800462a:	2301      	movs	r3, #1
	startBehavior();
 800462c:	4630      	mov	r0, r6
	_theCallBackMethod = nullptr;
 800462e:	6221      	str	r1, [r4, #32]
	state = STATE_INITIAL;
 8004630:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			oldBtnState[i] = true;
 8004634:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
			btnState[i] = true;
 8004638:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
			oldBtnState[i] = true;
 800463c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			btnState[i] = true;
 8004640:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			oldBtnState[i] = true;
 8004644:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
			btnState[i] = true;
 8004648:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
			oldBtnState[i] = true;
 800464c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			btnState[i] = true;
 8004650:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_pInstance = this;
 8004654:	61ac      	str	r4, [r5, #24]
	_theCallBackMethod = nullptr;
 8004656:	e9c4 1106 	strd	r1, r1, [r4, #24]
	startBehavior();
 800465a:	f000 f9f7 	bl	8004a4c <_ZN10XFBehavior13startBehaviorEv>
}
 800465e:	4620      	mov	r0, r4
 8004660:	bd70      	pop	{r4, r5, r6, pc}
	assert(!_pInstance);
 8004662:	3250      	adds	r2, #80	; 0x50
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <_ZN16ButtonControllerC1Ev+0x84>)
 8004666:	210c      	movs	r1, #12
 8004668:	4806      	ldr	r0, [pc, #24]	; (8004684 <_ZN16ButtonControllerC1Ev+0x88>)
 800466a:	f001 f86d 	bl	8005748 <__assert_func>
 800466e:	bf00      	nop
 8004670:	080070a4 	.word	0x080070a4
 8004674:	08007090 	.word	0x08007090
 8004678:	200000a8 	.word	0x200000a8
 800467c:	08006ba0 	.word	0x08006ba0
 8004680:	08006fac 	.word	0x08006fac
 8004684:	080070b0 	.word	0x080070b0

08004688 <_ZN16ButtonController14doCheckButtonsEv>:
		}


		return eventStatus;
	}
void ButtonController::doCheckButtons(){
 8004688:	b5f0      	push	{r4, r5, r6, r7, lr}
	Trace::out("BTN0 : %d, BTN1 : %d, BTN2 : %d, BTN3 : %d\r\n",
			btnState[0], btnState[1], btnState[2] ,btnState[3]);
	Trace::out("OLDBTN0 : %d, OLDBTN1 : %d, OLDBTN2 : %d, OLDBTN3 : %d\r\n",
			oldBtnState[0], oldBtnState[1], oldBtnState[2] ,oldBtnState[3]);

	for (int i = 0; i<4; i++){
 800468a:	2500      	movs	r5, #0
void ButtonController::doCheckButtons(){
 800468c:	4604      	mov	r4, r0
 800468e:	b083      	sub	sp, #12
	btnState[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8004690:	2104      	movs	r1, #4
 8004692:	482f      	ldr	r0, [pc, #188]	; (8004750 <_ZN16ButtonController14doCheckButtonsEv+0xc8>)
 8004694:	f104 0625 	add.w	r6, r4, #37	; 0x25
 8004698:	f7fc fb5a 	bl	8000d50 <HAL_GPIO_ReadPin>
 800469c:	1b43      	subs	r3, r0, r5
	btnState[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800469e:	f04f 0108 	mov.w	r1, #8
 80046a2:	482b      	ldr	r0, [pc, #172]	; (8004750 <_ZN16ButtonController14doCheckButtonsEv+0xc8>)
	btnState[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80046a4:	bf18      	it	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	btnState[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80046ac:	f7fc fb50 	bl	8000d50 <HAL_GPIO_ReadPin>
 80046b0:	1b43      	subs	r3, r0, r5
	btnState[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80046b2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80046b6:	4827      	ldr	r0, [pc, #156]	; (8004754 <_ZN16ButtonController14doCheckButtonsEv+0xcc>)
	btnState[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80046b8:	bf18      	it	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	btnState[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80046c0:	f7fc fb46 	bl	8000d50 <HAL_GPIO_ReadPin>
 80046c4:	1b43      	subs	r3, r0, r5
	btnState[3] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80046c6:	f04f 0140 	mov.w	r1, #64	; 0x40
 80046ca:	4822      	ldr	r0, [pc, #136]	; (8004754 <_ZN16ButtonController14doCheckButtonsEv+0xcc>)
	btnState[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80046cc:	bf18      	it	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	btnState[3] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80046d4:	f7fc fb3c 	bl	8000d50 <HAL_GPIO_ReadPin>
 80046d8:	1b43      	subs	r3, r0, r5
	Trace::out("Went in ButtonController::doCheckButton\r\n");
 80046da:	481f      	ldr	r0, [pc, #124]	; (8004758 <_ZN16ButtonController14doCheckButtonsEv+0xd0>)
	btnState[3] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80046dc:	bf18      	it	ne
 80046de:	2301      	movne	r3, #1
 80046e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	Trace::out("Went in ButtonController::doCheckButton\r\n");
 80046e4:	f000 f8b8 	bl	8004858 <_ZN5Trace3outEPKcz>
	Trace::out("BTN0 : %d, BTN1 : %d, BTN2 : %d, BTN3 : %d\r\n",
 80046e8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80046ec:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80046f0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80046f4:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80046f8:	9000      	str	r0, [sp, #0]
 80046fa:	4818      	ldr	r0, [pc, #96]	; (800475c <_ZN16ButtonController14doCheckButtonsEv+0xd4>)
 80046fc:	f000 f8ac 	bl	8004858 <_ZN5Trace3outEPKcz>
	Trace::out("OLDBTN0 : %d, OLDBTN1 : %d, OLDBTN2 : %d, OLDBTN3 : %d\r\n",
 8004700:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8004704:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8004708:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800470c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8004710:	9000      	str	r0, [sp, #0]
 8004712:	4813      	ldr	r0, [pc, #76]	; (8004760 <_ZN16ButtonController14doCheckButtonsEv+0xd8>)
 8004714:	f000 f8a0 	bl	8004858 <_ZN5Trace3outEPKcz>
		if (btnState[i] != oldBtnState[i]){
 8004718:	f816 3b01 	ldrb.w	r3, [r6], #1
			oldBtnState[i] = btnState[i];
			//NEEED TO SEND TO THE UPPER CLASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS!!!!!!!!!!!!!!!!!!!!!!!!!
			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			(_theCallBackProvider->*_theCallBackMethod)(i, btnState[i]);
 800471c:	b2a9      	uxth	r1, r5
	for (int i = 0; i<4; i++){
 800471e:	3501      	adds	r5, #1
		if (btnState[i] != oldBtnState[i]){
 8004720:	78f0      	ldrb	r0, [r6, #3]
			(_theCallBackProvider->*_theCallBackMethod)(i, btnState[i]);
 8004722:	461a      	mov	r2, r3
		if (btnState[i] != oldBtnState[i]){
 8004724:	4298      	cmp	r0, r3
 8004726:	d00e      	beq.n	8004746 <_ZN16ButtonController14doCheckButtonsEv+0xbe>
			oldBtnState[i] = btnState[i];
 8004728:	70f3      	strb	r3, [r6, #3]
			(_theCallBackProvider->*_theCallBackMethod)(i, btnState[i]);
 800472a:	6a27      	ldr	r7, [r4, #32]
 800472c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8004730:	ea4f 0c67 	mov.w	ip, r7, asr #1
 8004734:	07ff      	lsls	r7, r7, #31
 8004736:	69e3      	ldr	r3, [r4, #28]
 8004738:	eb0e 000c 	add.w	r0, lr, ip
 800473c:	d502      	bpl.n	8004744 <_ZN16ButtonController14doCheckButtonsEv+0xbc>
 800473e:	f85e 700c 	ldr.w	r7, [lr, ip]
 8004742:	58fb      	ldr	r3, [r7, r3]
 8004744:	4798      	blx	r3
	for (int i = 0; i<4; i++){
 8004746:	2d04      	cmp	r5, #4
 8004748:	d1e6      	bne.n	8004718 <_ZN16ButtonController14doCheckButtonsEv+0x90>
		}
	}


}
 800474a:	b003      	add	sp, #12
 800474c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474e:	bf00      	nop
 8004750:	40022000 	.word	0x40022000
 8004754:	40021800 	.word	0x40021800
 8004758:	08007120 	.word	0x08007120
 800475c:	0800714c 	.word	0x0800714c
 8004760:	0800717c 	.word	0x0800717c

08004764 <_ZN16ButtonController12processEventEv>:
XFEventStatus ButtonController::processEvent() {
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4604      	mov	r4, r0
	Trace::out("Went in ButtonController::processEvent\r\n");
 8004768:	482a      	ldr	r0, [pc, #168]	; (8004814 <_ZN16ButtonController12processEventEv+0xb0>)
 800476a:	f000 f875 	bl	8004858 <_ZN5Trace3outEPKcz>
	ButtonControllerState oldState = state;
 800476e:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
	switch(state){
 8004772:	2d01      	cmp	r5, #1
 8004774:	d02a      	beq.n	80047cc <_ZN16ButtonController12processEventEv+0x68>
 8004776:	d31a      	bcc.n	80047ae <_ZN16ButtonController12processEventEv+0x4a>
 8004778:	2d02      	cmp	r5, #2
 800477a:	d002      	beq.n	8004782 <_ZN16ButtonController12processEventEv+0x1e>
 800477c:	2500      	movs	r5, #0
	}
 800477e:	4628      	mov	r0, r5
 8004780:	bd70      	pop	{r4, r5, r6, pc}
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8004782:	f104 0608 	add.w	r6, r4, #8
 8004786:	4630      	mov	r0, r6
 8004788:	f000 f9a0 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 800478c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d038      	beq.n	8004806 <_ZN16ButtonController12processEventEv+0xa2>
 8004794:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
		if(state!=oldState)
 8004798:	429d      	cmp	r5, r3
 800479a:	d0ef      	beq.n	800477c <_ZN16ButtonController12processEventEv+0x18>
			switch(state)
 800479c:	2b01      	cmp	r3, #1
 800479e:	f04f 0500 	mov.w	r5, #0
 80047a2:	d1ec      	bne.n	800477e <_ZN16ButtonController12processEventEv+0x1a>
					doCheckButtons();
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff ff6f 	bl	8004688 <_ZN16ButtonController14doCheckButtonsEv>
	}
 80047aa:	4628      	mov	r0, r5
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
		if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80047ae:	f104 0008 	add.w	r0, r4, #8
 80047b2:	f000 f98b 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 80047b6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d1ea      	bne.n	8004794 <_ZN16ButtonController12processEventEv+0x30>
			state = STATE_CHECK_BUTTONS;
 80047be:	2501      	movs	r5, #1
					doCheckButtons();
 80047c0:	4620      	mov	r0, r4
			state = STATE_CHECK_BUTTONS;
 80047c2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
					doCheckButtons();
 80047c6:	f7ff ff5f 	bl	8004688 <_ZN16ButtonController14doCheckButtonsEv>
 80047ca:	e7ee      	b.n	80047aa <_ZN16ButtonController12processEventEv+0x46>
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 80047cc:	f104 0608 	add.w	r6, r4, #8
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f97b 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
 80047d6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d1da      	bne.n	8004794 <_ZN16ButtonController12processEventEv+0x30>
				getCurrentEvent()->getId() == EventIds::evButtonIrqId)
 80047de:	4630      	mov	r0, r6
 80047e0:	f000 f974 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 80047e4:	6883      	ldr	r3, [r0, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d1d4      	bne.n	8004794 <_ZN16ButtonController12processEventEv+0x30>
    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 80047ea:	4630      	mov	r0, r6
			eventStatus = XFEventStatus::Consumed;
 80047ec:	461d      	mov	r5, r3
 80047ee:	f000 f96b 	bl	8004ac8 <_ZN10XFBehavior13getDispatcherEv>
 80047f2:	6801      	ldr	r1, [r0, #0]
 80047f4:	4633      	mov	r3, r6
 80047f6:	2264      	movs	r2, #100	; 0x64
 80047f8:	698e      	ldr	r6, [r1, #24]
 80047fa:	2104      	movs	r1, #4
 80047fc:	47b0      	blx	r6
			state = STATE_DEBOUNCE;
 80047fe:	2302      	movs	r3, #2
 8004800:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004804:	e7bb      	b.n	800477e <_ZN16ButtonController12processEventEv+0x1a>
				getCurrentEvent()->getId() == EventIds::tmDebounceId)
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f960 	bl	8004acc <_ZNK10XFBehavior15getCurrentEventEv>
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 800480c:	6883      	ldr	r3, [r0, #8]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d1c0      	bne.n	8004794 <_ZN16ButtonController12processEventEv+0x30>
 8004812:	e7d4      	b.n	80047be <_ZN16ButtonController12processEventEv+0x5a>
 8004814:	080071b8 	.word	0x080071b8

08004818 <_ZThn8_N16ButtonController12processEventEv>:
                                  ButtonsControllerCallbackProvider::CallbackMethod callbackMethod) override;


	XFEventStatus processEvent() override;		///< Remplementation from XFBehavior
 8004818:	f1a0 0008 	sub.w	r0, r0, #8
 800481c:	f7ff bfa2 	b.w	8004764 <_ZN16ButtonController12processEventEv>

08004820 <_ZN16ButtonController11getInstanceEv>:
ButtonController* ButtonController::getInstance(){
	return _pInstance;
 8004820:	4b01      	ldr	r3, [pc, #4]	; (8004828 <_ZN16ButtonController11getInstanceEv+0x8>)
}
 8004822:	6998      	ldr	r0, [r3, #24]
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	200000a8 	.word	0x200000a8

0800482c <_ZL17checkStringEndingPcm.part.4.constprop.8>:
	if (!len)
	{
		return 0;
	}

	if (str[len-1] != '\n')
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <_ZL17checkStringEndingPcm.part.4.constprop.8+0x28>)
 800482e:	1813      	adds	r3, r2, r0
 8004830:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004834:	290a      	cmp	r1, #10
 8004836:	d009      	beq.n	800484c <_ZL17checkStringEndingPcm.part.4.constprop.8+0x20>
		str[len+1] = '\n';
		str[len+2] = '\0';
#else
		// Add "\n" at the end of the string
		str[len] = '\n';
		str[len+1] = '\0';
 8004838:	2100      	movs	r1, #0
static int32_t checkStringEnding(char * str, uint32_t len)
 800483a:	b410      	push	{r4}
		str[len] = '\n';
 800483c:	240a      	movs	r4, #10
 800483e:	5414      	strb	r4, [r2, r0]
		str[len+1] = '\0';
 8004840:	7059      	strb	r1, [r3, #1]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 8004842:	4804      	ldr	r0, [pc, #16]	; (8004854 <_ZL17checkStringEndingPcm.part.4.constprop.8+0x28>)
}
 8004844:	f85d 4b04 	ldr.w	r4, [sp], #4
	return strlen(str);
 8004848:	f7fb bd32 	b.w	80002b0 <strlen>
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <_ZL17checkStringEndingPcm.part.4.constprop.8+0x28>)
 800484e:	f7fb bd2f 	b.w	80002b0 <strlen>
 8004852:	bf00      	nop
 8004854:	200000c4 	.word	0x200000c4

08004858 <_ZN5Trace3outEPKcz>:
	}
	traceUart.write(str.data(), str.length());
}

void Trace::out(const char * format, ...)
{
 8004858:	b40f      	push	{r0, r1, r2, r3}
 800485a:	b500      	push	{lr}
 800485c:	b083      	sub	sp, #12
	va_list args;

	// Format string
	va_start(args, format);
	vsprintf(strTrace, format, args);
 800485e:	480c      	ldr	r0, [pc, #48]	; (8004890 <_ZN5Trace3outEPKcz+0x38>)
{
 8004860:	ab04      	add	r3, sp, #16
 8004862:	f853 1b04 	ldr.w	r1, [r3], #4
	vsprintf(strTrace, format, args);
 8004866:	461a      	mov	r2, r3
	va_start(args, format);
 8004868:	9301      	str	r3, [sp, #4]
	vsprintf(strTrace, format, args);
 800486a:	f001 fbe3 	bl	8006034 <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 800486e:	4808      	ldr	r0, [pc, #32]	; (8004890 <_ZN5Trace3outEPKcz+0x38>)
 8004870:	f7fb fd1e 	bl	80002b0 <strlen>
	if (!len)
 8004874:	b108      	cbz	r0, 800487a <_ZN5Trace3outEPKcz+0x22>
 8004876:	f7ff ffd9 	bl	800482c <_ZL17checkStringEndingPcm.part.4.constprop.8>

	traceUart.write(strTrace);
 800487a:	4905      	ldr	r1, [pc, #20]	; (8004890 <_ZN5Trace3outEPKcz+0x38>)
 800487c:	2200      	movs	r2, #0
 800487e:	f501 7080 	add.w	r0, r1, #256	; 0x100
 8004882:	f000 f887 	bl	8004994 <_ZN4Uart5writeEPKcj>
}
 8004886:	b003      	add	sp, #12
 8004888:	f85d eb04 	ldr.w	lr, [sp], #4
 800488c:	b004      	add	sp, #16
 800488e:	4770      	bx	lr
 8004890:	200000c4 	.word	0x200000c4

08004894 <_GLOBAL__sub_I_trace_initialize>:
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8004894:	2300      	movs	r3, #0
 8004896:	4a02      	ldr	r2, [pc, #8]	; (80048a0 <_GLOBAL__sub_I_trace_initialize+0xc>)
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <_GLOBAL__sub_I_trace_initialize+0x10>)
 800489a:	4619      	mov	r1, r3
 800489c:	f000 b82e 	b.w	80048fc <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 80048a0:	200005cc 	.word	0x200005cc
 80048a4:	200001c4 	.word	0x200001c4

080048a8 <_GLOBAL__sub_D_trace_initialize>:
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <_GLOBAL__sub_D_trace_initialize+0x8>)
 80048aa:	f000 b81d 	b.w	80048e8 <_ZN4UartD1Ev>
 80048ae:	bf00      	nop
 80048b0:	200001c4 	.word	0x200001c4

080048b4 <_Z13enterCriticalv>:

int inISR()
{
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <_Z13enterCriticalv+0x18>)
 80048b6:	681a      	ldr	r2, [r3, #0]
}

void enterCritical()
{
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 80048b8:	b922      	cbnz	r2, 80048c4 <_Z13enterCriticalv+0x10>
	{
		if (!bOMEnterCriticalRegionNested)
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	b11a      	cbz	r2, 80048c6 <_Z13enterCriticalv+0x12>
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	3201      	adds	r2, #1
 80048c2:	605a      	str	r2, [r3, #4]
	}
}
 80048c4:	4770      	bx	lr
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048c6:	b672      	cpsid	i
 80048c8:	e7f9      	b.n	80048be <_Z13enterCriticalv+0xa>
 80048ca:	bf00      	nop
 80048cc:	20000254 	.word	0x20000254

080048d0 <_Z12exitCriticalv>:
	return bInISR;
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <_Z12exitCriticalv+0x14>)
 80048d2:	681a      	ldr	r2, [r3, #0]

void exitCritical()
{
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 80048d4:	b92a      	cbnz	r2, 80048e2 <_Z12exitCriticalv+0x12>
	{
		bOMEnterCriticalRegionNested--;
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	3a01      	subs	r2, #1
 80048da:	605a      	str	r2, [r3, #4]

		if (!bOMEnterCriticalRegionNested)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	b903      	cbnz	r3, 80048e2 <_Z12exitCriticalv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 80048e0:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 80048e2:	4770      	bx	lr
 80048e4:	20000254 	.word	0x20000254

080048e8 <_ZN4UartD1Ev>:
}

Uart::~Uart()
{

}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop

080048ec <_ZN4UartD0Ev>:
Uart::~Uart()
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4604      	mov	r4, r0
}
 80048f0:	2190      	movs	r1, #144	; 0x90
 80048f2:	f000 fe38 	bl	8005566 <_ZdlPvj>
 80048f6:	4620      	mov	r0, r4
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	bf00      	nop

080048fc <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 80048fc:	b570      	push	{r4, r5, r6, lr}
   _bTxDMA(bTxDMA)
 80048fe:	25ff      	movs	r5, #255	; 0xff
 8004900:	2600      	movs	r6, #0
	assert(uartNbr < UART_COUNT);
 8004902:	2902      	cmp	r1, #2
   _bTxDMA(bTxDMA)
 8004904:	7303      	strb	r3, [r0, #12]
 8004906:	7105      	strb	r5, [r0, #4]
 8004908:	4d0d      	ldr	r5, [pc, #52]	; (8004940 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 800490a:	6086      	str	r6, [r0, #8]
 800490c:	6005      	str	r5, [r0, #0]
	assert(uartNbr < UART_COUNT);
 800490e:	d808      	bhi.n	8004922 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x26>
        if (!_sUart[uartNbr])
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 8004912:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
 8004916:	b95e      	cbnz	r6, 8004930 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 8004918:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 800491c:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 800491e:	6082      	str	r2, [r0, #8]
}
 8004920:	bd70      	pop	{r4, r5, r6, pc}
	assert(uartNbr < UART_COUNT);
 8004922:	f105 0208 	add.w	r2, r5, #8
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8004928:	2111      	movs	r1, #17
 800492a:	4808      	ldr	r0, [pc, #32]	; (800494c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 800492c:	f000 ff0c 	bl	8005748 <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 8004930:	f105 0208 	add.w	r2, r5, #8
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 8004936:	211f      	movs	r1, #31
 8004938:	4804      	ldr	r0, [pc, #16]	; (800494c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 800493a:	f000 ff05 	bl	8005748 <__assert_func>
 800493e:	bf00      	nop
 8004940:	08006c20 	.word	0x08006c20
 8004944:	2000025c 	.word	0x2000025c
 8004948:	080071e4 	.word	0x080071e4
 800494c:	080071fc 	.word	0x080071fc
 8004950:	08007260 	.word	0x08007260

08004954 <_ZN4Uart13writeUsingDMAEPKhm>:
    }
}

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
    assert(length <= sizeof(_pTxDmaBuffer));
 8004954:	2a80      	cmp	r2, #128	; 0x80
{
 8004956:	b570      	push	{r4, r5, r6, lr}
    assert(length <= sizeof(_pTxDmaBuffer));
 8004958:	d810      	bhi.n	800497c <_ZN4Uart13writeUsingDMAEPKhm+0x28>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 800495a:	f100 040d 	add.w	r4, r0, #13
 800495e:	4606      	mov	r6, r0
 8004960:	4615      	mov	r5, r2
 8004962:	4620      	mov	r0, r4
 8004964:	f000 ff60 	bl	8005828 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004968:	68b0      	ldr	r0, [r6, #8]
 800496a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800496c:	2b20      	cmp	r3, #32
 800496e:	d1fc      	bne.n	800496a <_ZN4Uart13writeUsingDMAEPKhm+0x16>
    { continue; }

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8004970:	b2aa      	uxth	r2, r5
 8004972:	4621      	mov	r1, r4
}
 8004974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8004978:	f7fd beca 	b.w	8002710 <HAL_UART_Transmit_DMA>
    assert(length <= sizeof(_pTxDmaBuffer));
 800497c:	4b02      	ldr	r3, [pc, #8]	; (8004988 <_ZN4Uart13writeUsingDMAEPKhm+0x34>)
 800497e:	2150      	movs	r1, #80	; 0x50
 8004980:	4a02      	ldr	r2, [pc, #8]	; (800498c <_ZN4Uart13writeUsingDMAEPKhm+0x38>)
 8004982:	4803      	ldr	r0, [pc, #12]	; (8004990 <_ZN4Uart13writeUsingDMAEPKhm+0x3c>)
 8004984:	f000 fee0 	bl	8005748 <__assert_func>
 8004988:	08007268 	.word	0x08007268
 800498c:	08006c60 	.word	0x08006c60
 8004990:	080071fc 	.word	0x080071fc

08004994 <_ZN4Uart5writeEPKcj>:
{
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
	if (!length)
 800499a:	b91a      	cbnz	r2, 80049a4 <_ZN4Uart5writeEPKcj+0x10>
		length = strlen(str);
 800499c:	4608      	mov	r0, r1
 800499e:	f7fb fc87 	bl	80002b0 <strlen>
 80049a2:	4602      	mov	r2, r0
    if (!_bTxDMA)
 80049a4:	7b23      	ldrb	r3, [r4, #12]
 80049a6:	b12b      	cbz	r3, 80049b4 <_ZN4Uart5writeEPKcj+0x20>
        writeUsingDMA((const uint8_t *)str, length);
 80049a8:	4629      	mov	r1, r5
 80049aa:	4620      	mov	r0, r4
}
 80049ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writeUsingDMA((const uint8_t *)str, length);
 80049b0:	f7ff bfd0 	b.w	8004954 <_ZN4Uart13writeUsingDMAEPKhm>
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 80049b4:	4629      	mov	r1, r5
 80049b6:	68a0      	ldr	r0, [r4, #8]
 80049b8:	b292      	uxth	r2, r2
 80049ba:	2332      	movs	r3, #50	; 0x32
}
 80049bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 80049c0:	f7fe b952 	b.w	8002c68 <HAL_UART_Transmit>

080049c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049ca:	e003      	b.n	80049d4 <LoopCopyDataInit>

080049cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049d2:	3104      	adds	r1, #4

080049d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049d4:	480b      	ldr	r0, [pc, #44]	; (8004a04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049dc:	d3f6      	bcc.n	80049cc <CopyDataInit>
  ldr  r2, =_sbss
 80049de:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80049e0:	e002      	b.n	80049e8 <LoopFillZerobss>

080049e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049e4:	f842 3b04 	str.w	r3, [r2], #4

080049e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049ec:	d3f9      	bcc.n	80049e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049ee:	f7ff faf9 	bl	8003fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049f2:	f000 fee5 	bl	80057c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049f6:	f7fe fa77 	bl	8002ee8 <main>
  bx  lr    
 80049fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004a00:	080074e0 	.word	0x080074e0
  ldr  r0, =_sdata
 8004a04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a08:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004a0c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004a10:	200007bc 	.word	0x200007bc

08004a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a14:	e7fe      	b.n	8004a14 <ADC_IRQHandler>
	...

08004a18 <_ZN10XFBehavior9pushEventEP7XFEvent>:
    return (eventStatus == XFEventStatus::Terminate);
}

interface::XFDispatcher * XFBehavior::getDispatcher()
{
    return _pDispatcher;
 8004a18:	6843      	ldr	r3, [r0, #4]
    inline void setBehavior(interface::XFReactive * pBehavior) { _pBehavior = pBehavior; }
 8004a1a:	60c8      	str	r0, [r1, #12]
    getDispatcher()->pushEvent(pEvent);
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	6953      	ldr	r3, [r2, #20]
 8004a22:	4718      	bx	r3

08004a24 <_ZNK10XFBehavior17deleteOnTerminateEv>:
}
 8004a24:	7a40      	ldrb	r0, [r0, #9]
 8004a26:	4770      	bx	lr

08004a28 <_ZN10XFBehavior20setDeleteOnTerminateEb>:
    deleteOnTerminate_ = deleteBehaviour;
 8004a28:	7241      	strb	r1, [r0, #9]
}
 8004a2a:	4770      	bx	lr

08004a2c <_ZN10XFBehavior7processEPK7XFEvent>:
    eventStatus = processEvent();
 8004a2c:	6803      	ldr	r3, [r0, #0]
{
 8004a2e:	b510      	push	{r4, lr}
    eventStatus = processEvent();
 8004a30:	69db      	ldr	r3, [r3, #28]
{
 8004a32:	4604      	mov	r4, r0
}

void XFBehavior::setCurrentEvent(const XFEvent * pEvent)
{
    _pCurrentEvent = pEvent;
 8004a34:	60c1      	str	r1, [r0, #12]
    eventStatus = processEvent();
 8004a36:	4798      	blx	r3
    _pCurrentEvent = pEvent;
 8004a38:	2300      	movs	r3, #0
    eventStatus = processEvent();
 8004a3a:	b2c0      	uxtb	r0, r0
    _pCurrentEvent = pEvent;
 8004a3c:	60e3      	str	r3, [r4, #12]
}
 8004a3e:	f1a0 0008 	sub.w	r0, r0, #8
 8004a42:	fab0 f080 	clz	r0, r0
 8004a46:	0940      	lsrs	r0, r0, #5
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	bf00      	nop

08004a4c <_ZN10XFBehavior13startBehaviorEv>:
{
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	4604      	mov	r4, r0
    GEN(XFInitialEvent());
 8004a50:	2010      	movs	r0, #16
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	68dd      	ldr	r5, [r3, #12]
 8004a56:	f000 fd88 	bl	800556a <_Znwj>
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	f000 f85c 	bl	8004b18 <_ZN14XFInitialEventC1Ev>
 8004a60:	4620      	mov	r0, r4
 8004a62:	4631      	mov	r1, r6
 8004a64:	47a8      	blx	r5
    if (hasOwnDispatcher())
 8004a66:	7a23      	ldrb	r3, [r4, #8]
 8004a68:	b903      	cbnz	r3, 8004a6c <_ZN10XFBehavior13startBehaviorEv+0x20>
}
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
    return _pDispatcher;
 8004a6c:	6860      	ldr	r0, [r4, #4]
        getDispatcher()->start();
 8004a6e:	6803      	ldr	r3, [r0, #0]
}
 8004a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        getDispatcher()->start();
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	4718      	bx	r3

08004a78 <_ZN10XFBehaviorC1Eb>:
XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 8004a78:	b538      	push	{r3, r4, r5, lr}
    _pCurrentEvent(nullptr)
 8004a7a:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <_ZN10XFBehaviorC1Eb+0x48>)
 8004a7c:	2300      	movs	r3, #0
XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 8004a7e:	4604      	mov	r4, r0
    _pCurrentEvent(nullptr)
 8004a80:	7201      	strb	r1, [r0, #8]
 8004a82:	7243      	strb	r3, [r0, #9]
 8004a84:	60c3      	str	r3, [r0, #12]
 8004a86:	e9c0 2300 	strd	r2, r3, [r0]
    if (ownDispatcher)
 8004a8a:	b189      	cbz	r1, 8004ab0 <_ZN10XFBehaviorC1Eb+0x38>
        _pDispatcher = XFResourceFactory::getInstance()->createDispatcher();
 8004a8c:	f000 f9c2 	bl	8004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004a90:	6803      	ldr	r3, [r0, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4798      	blx	r3
 8004a96:	4605      	mov	r5, r0
 8004a98:	6060      	str	r0, [r4, #4]
    if (_pDispatcher == XFResourceFactory::getInstance()->getDefaultDispatcher())
 8004a9a:	f000 f9bb 	bl	8004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004a9e:	6803      	ldr	r3, [r0, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4798      	blx	r3
 8004aa4:	4285      	cmp	r5, r0
 8004aa6:	d101      	bne.n	8004aac <_ZN10XFBehaviorC1Eb+0x34>
        _hasOwnDispatcher = false;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	7223      	strb	r3, [r4, #8]
}
 8004aac:	4620      	mov	r0, r4
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
        _pDispatcher = XFResourceFactory::getInstance()->getDefaultDispatcher();
 8004ab0:	f000 f9b0 	bl	8004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004ab4:	6803      	ldr	r3, [r0, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4798      	blx	r3
 8004aba:	4605      	mov	r5, r0
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	e7ec      	b.n	8004a9a <_ZN10XFBehaviorC1Eb+0x22>
 8004ac0:	08006c9c 	.word	0x08006c9c

08004ac4 <_ZN10XFBehaviorD1Ev>:
}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <_ZN10XFBehavior13getDispatcherEv>:
}
 8004ac8:	6840      	ldr	r0, [r0, #4]
 8004aca:	4770      	bx	lr

08004acc <_ZNK10XFBehavior15getCurrentEventEv>:
}

const XFEvent * XFBehavior::getCurrentEvent() const
{
    return _pCurrentEvent;
}
 8004acc:	68c0      	ldr	r0, [r0, #12]
 8004ace:	4770      	bx	lr

08004ad0 <_ZN13XFCustomEventD1Ev>:
class XFCustomEvent : public XFEvent
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop

08004ad4 <_ZN13XFCustomEventD0Ev>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	2114      	movs	r1, #20
 8004ada:	f000 fd44 	bl	8005566 <_ZdlPvj>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop

08004ae4 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>:
#include "xf/customevent.h"

XFCustomEvent::XFCustomEvent(int id, interface::XFReactive * pBehavior)
 8004ae4:	b470      	push	{r4, r5, r6}
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) {}
 8004ae6:	2603      	movs	r6, #3
    : XFEvent(XFEvent::Event, id, pBehavior),
      _bDeleteAfterConsume(true)
 8004ae8:	4d04      	ldr	r5, [pc, #16]	; (8004afc <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE+0x18>)
 8004aea:	2401      	movs	r4, #1
 8004aec:	7106      	strb	r6, [r0, #4]
 8004aee:	6005      	str	r5, [r0, #0]
 8004af0:	7404      	strb	r4, [r0, #16]
 8004af2:	e9c0 1202 	strd	r1, r2, [r0, #8]
{

}
 8004af6:	bc70      	pop	{r4, r5, r6}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	08007290 	.word	0x08007290

08004b00 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:
}

bool XFInitialEvent::deleteAfterConsume() const
{
    return true;
}
 8004b00:	2001      	movs	r0, #1
 8004b02:	4770      	bx	lr

08004b04 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <_ZN14XFInitialEventD0Ev>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	2110      	movs	r1, #16
 8004b0e:	f000 fd2a 	bl	8005566 <_ZdlPvj>
 8004b12:	4620      	mov	r0, r4
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	bf00      	nop

08004b18 <_ZN14XFInitialEventC1Ev>:
XFInitialEvent::XFInitialEvent()
 8004b18:	b410      	push	{r4}
 8004b1a:	2401      	movs	r4, #1
    : XFEvent(XFEvent::Initial, 0, nullptr)
 8004b1c:	4904      	ldr	r1, [pc, #16]	; (8004b30 <_ZN14XFInitialEventC1Ev+0x18>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	7104      	strb	r4, [r0, #4]
 8004b22:	6001      	str	r1, [r0, #0]
}
 8004b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b28:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	08006cf8 	.word	0x08006cf8

08004b34 <_ZNK16XFNullTransition18deleteAfterConsumeEv>:
}

bool XFNullTransition::deleteAfterConsume() const
{
    return true;
}
 8004b34:	2001      	movs	r0, #1
 8004b36:	4770      	bx	lr

08004b38 <_ZN16XFNullTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * an other (without a trigger) a null transition must be pushed.
 */
class XFNullTransition : public XFEvent
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <_ZN16XFNullTransitionD0Ev>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4604      	mov	r4, r0
 8004b40:	2110      	movs	r1, #16
 8004b42:	f000 fd10 	bl	8005566 <_ZdlPvj>
 8004b46:	4620      	mov	r0, r4
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	bf00      	nop

08004b4c <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>:
XFNullTransition::XFNullTransition(interface::XFReactive * pBehavior)
 8004b4c:	b430      	push	{r4, r5}
 8004b4e:	2502      	movs	r5, #2
 8004b50:	2400      	movs	r4, #0
 : XFEvent(XFEvent::NullTransition, 0, pBehavior)
 8004b52:	4a03      	ldr	r2, [pc, #12]	; (8004b60 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE+0x14>)
 8004b54:	7105      	strb	r5, [r0, #4]
 8004b56:	6084      	str	r4, [r0, #8]
 8004b58:	60c1      	str	r1, [r0, #12]
 8004b5a:	6002      	str	r2, [r0, #0]
}
 8004b5c:	bc30      	pop	{r4, r5}
 8004b5e:	4770      	bx	lr
 8004b60:	08006d0c 	.word	0x08006d0c

08004b64 <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
    return true;
}
 8004b64:	2001      	movs	r0, #1
 8004b66:	4770      	bx	lr

08004b68 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <_ZN9XFTimeoutD0Ev>:
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	4604      	mov	r4, r0
 8004b70:	2118      	movs	r1, #24
 8004b72:	f000 fcf8 	bl	8005566 <_ZdlPvj>
 8004b76:	4620      	mov	r0, r4
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	bf00      	nop

08004b7c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8004b7c:	b470      	push	{r4, r5, r6}
 8004b7e:	2604      	movs	r6, #4
   _relTicks(interval)
 8004b80:	4d04      	ldr	r5, [pc, #16]	; (8004b94 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x18>)
 8004b82:	6102      	str	r2, [r0, #16]
 8004b84:	7106      	strb	r6, [r0, #4]
 8004b86:	6005      	str	r5, [r0, #0]
 8004b88:	6142      	str	r2, [r0, #20]
 8004b8a:	e9c0 1302 	strd	r1, r3, [r0, #8]
}
 8004b8e:	bc70      	pop	{r4, r5, r6}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	08006d20 	.word	0x08006d20

08004b98 <_ZNK9XFTimeouteqERKS_>:
    return (_pBehavior == timeout._pBehavior && getId() == timeout.getId()) ? true : false;
 8004b98:	68c2      	ldr	r2, [r0, #12]
 8004b9a:	68cb      	ldr	r3, [r1, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <_ZNK9XFTimeouteqERKS_+0xc>
 8004ba0:	2000      	movs	r0, #0
}
 8004ba2:	4770      	bx	lr
    return (_pBehavior == timeout._pBehavior && getId() == timeout.getId()) ? true : false;
 8004ba4:	6880      	ldr	r0, [r0, #8]
 8004ba6:	688b      	ldr	r3, [r1, #8]
 8004ba8:	1ac0      	subs	r0, r0, r3
 8004baa:	fab0 f080 	clz	r0, r0
 8004bae:	0940      	lsrs	r0, r0, #5
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	4770      	bx	lr

08004bb8 <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 8004bb8:	2000      	movs	r0, #0
 8004bba:	4770      	bx	lr

08004bbc <_ZN19XFDispatcherDefault4stopEv>:
	_bExecuting = true;
}

void XFDispatcherDefault::stop()
{
	_bExecuting = false;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	7103      	strb	r3, [r0, #4]
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:
	}
	_pMutex->unlock();
}

void XFDispatcherDefault::scheduleTimeout(int timeoutId, int interval, interface::XFReactive * pReactive)
{
 8004bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc8:	460d      	mov	r5, r1
 8004bca:	4617      	mov	r7, r2
 8004bcc:	461e      	mov	r6, r3
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 8004bce:	f000 fa8b 	bl	80050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004bd2:	6804      	ldr	r4, [r0, #0]
 8004bd4:	463a      	mov	r2, r7
 8004bd6:	4633      	mov	r3, r6
 8004bd8:	4629      	mov	r1, r5
 8004bda:	6964      	ldr	r4, [r4, #20]
 8004bdc:	46a4      	mov	ip, r4
}
 8004bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 8004be2:	4760      	bx	ip

08004be4 <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:

void XFDispatcherDefault::unscheduleTimeout(int timeoutId, interface::XFReactive * pReactive)
{
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	460c      	mov	r4, r1
 8004be8:	4615      	mov	r5, r2
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8004bea:	f000 fa7d 	bl	80050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004bee:	6803      	ldr	r3, [r0, #0]
 8004bf0:	462a      	mov	r2, r5
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	699b      	ldr	r3, [r3, #24]
}
 8004bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8004bfa:	4718      	bx	r3

08004bfc <_ZN19XFDispatcherDefault5startEv>:
{
 8004bfc:	b508      	push	{r3, lr}
        assert(_pMutex);
 8004bfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c00:	b113      	cbz	r3, 8004c08 <_ZN19XFDispatcherDefault5startEv+0xc>
	_bExecuting = true;
 8004c02:	2301      	movs	r3, #1
 8004c04:	7103      	strb	r3, [r0, #4]
}
 8004c06:	bd08      	pop	{r3, pc}
        assert(_pMutex);
 8004c08:	4b02      	ldr	r3, [pc, #8]	; (8004c14 <_ZN19XFDispatcherDefault5startEv+0x18>)
 8004c0a:	2122      	movs	r1, #34	; 0x22
 8004c0c:	4a02      	ldr	r2, [pc, #8]	; (8004c18 <_ZN19XFDispatcherDefault5startEv+0x1c>)
 8004c0e:	4803      	ldr	r0, [pc, #12]	; (8004c1c <_ZN19XFDispatcherDefault5startEv+0x20>)
 8004c10:	f000 fd9a 	bl	8005748 <__assert_func>
 8004c14:	0800729c 	.word	0x0800729c
 8004c18:	08006d2c 	.word	0x08006d2c
 8004c1c:	080072a4 	.word	0x080072a4

08004c20 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8004c20:	68c8      	ldr	r0, [r1, #12]
 8004c22:	6803      	ldr	r3, [r0, #0]
{
 8004c24:	b510      	push	{r4, lr}
	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8004c26:	699b      	ldr	r3, [r3, #24]
{
 8004c28:	460c      	mov	r4, r1
	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8004c2a:	4798      	blx	r3

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 8004c2c:	b900      	cbnz	r0, 8004c30 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x10>
	{
		delete pEvent->getBehavior();
	}
}
 8004c2e:	bd10      	pop	{r4, pc}
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	6803      	ldr	r3, [r0, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4798      	blx	r3
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d0f8      	beq.n	8004c2e <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0xe>
		delete pEvent->getBehavior();
 8004c3c:	68e0      	ldr	r0, [r4, #12]
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d0f5      	beq.n	8004c2e <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0xe>
 8004c42:	6803      	ldr	r3, [r0, #0]
}
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		delete pEvent->getBehavior();
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4718      	bx	r3

08004c4c <_ZN19XFDispatcherDefaultC1Ev>:
XFDispatcherDefault::XFDispatcherDefault() :
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4604      	mov	r4, r0
	_pMutex(nullptr)
 8004c50:	2500      	movs	r5, #0
 8004c52:	4e0a      	ldr	r6, [pc, #40]	; (8004c7c <_ZN19XFDispatcherDefaultC1Ev+0x30>)
 8004c54:	3008      	adds	r0, #8
 8004c56:	f840 6c08 	str.w	r6, [r0, #-8]
 8004c5a:	7125      	strb	r5, [r4, #4]
 8004c5c:	f000 fb16 	bl	800528c <_ZN19XFEventQueueDefaultC1Ev>
 8004c60:	63a5      	str	r5, [r4, #56]	; 0x38
	_pMutex = XFMutex::create();
 8004c62:	f000 fc4d 	bl	8005500 <_ZN9interface7XFMutex6createEv>
 8004c66:	63a0      	str	r0, [r4, #56]	; 0x38
	assert(_pMutex);
 8004c68:	b108      	cbz	r0, 8004c6e <_ZN19XFDispatcherDefaultC1Ev+0x22>
}
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
	assert(_pMutex);
 8004c6e:	f106 0230 	add.w	r2, r6, #48	; 0x30
 8004c72:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <_ZN19XFDispatcherDefaultC1Ev+0x34>)
 8004c74:	2118      	movs	r1, #24
 8004c76:	4803      	ldr	r0, [pc, #12]	; (8004c84 <_ZN19XFDispatcherDefaultC1Ev+0x38>)
 8004c78:	f000 fd66 	bl	8005748 <__assert_func>
 8004c7c:	08006d60 	.word	0x08006d60
 8004c80:	0800729c 	.word	0x0800729c
 8004c84:	080072a4 	.word	0x080072a4

08004c88 <_ZN19XFDispatcherDefaultD1Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <_ZN19XFDispatcherDefaultD1Ev+0x14>)
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	f840 3b08 	str.w	r3, [r0], #8
 8004c92:	f000 fb41 	bl	8005318 <_ZN19XFEventQueueDefaultD1Ev>
}
 8004c96:	4620      	mov	r0, r4
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	bf00      	nop
 8004c9c:	08006d60 	.word	0x08006d60

08004ca0 <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <_ZN19XFDispatcherDefaultD0Ev+0x1c>)
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	f840 3b08 	str.w	r3, [r0], #8
 8004caa:	f000 fb35 	bl	8005318 <_ZN19XFEventQueueDefaultD1Ev>
}
 8004cae:	213c      	movs	r1, #60	; 0x3c
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 fc58 	bl	8005566 <_ZdlPvj>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	bf00      	nop
 8004cbc:	08006d60 	.word	0x08006d60

08004cc0 <_ZN19XFDispatcherDefault9pushEventEP7XFEvent>:
{
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4604      	mov	r4, r0
	_pMutex->lock();
 8004cc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004cc6:	460d      	mov	r5, r1
	_pMutex->lock();
 8004cc8:	6803      	ldr	r3, [r0, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4798      	blx	r3
		_events.push(pEvent);
 8004cce:	4629      	mov	r1, r5
 8004cd0:	f104 0008 	add.w	r0, r4, #8
 8004cd4:	f000 fb40 	bl	8005358 <_ZN19XFEventQueueDefault4pushEPK7XFEvent>
	_pMutex->unlock();
 8004cd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004cda:	6803      	ldr	r3, [r0, #0]
}
 8004cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pMutex->unlock();
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	4718      	bx	r3

08004ce4 <_ZN19XFDispatcherDefault7executeEPKv>:
{
 8004ce4:	b538      	push	{r3, r4, r5, lr}
	while(_bExecuting)
 8004ce6:	7903      	ldrb	r3, [r0, #4]
 8004ce8:	b183      	cbz	r3, 8004d0c <_ZN19XFDispatcherDefault7executeEPKv+0x28>
 8004cea:	4604      	mov	r4, r0
 8004cec:	f100 0508 	add.w	r5, r0, #8
		while (_events.empty() && _bExecuting)
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 fac1 	bl	8005278 <_ZNK19XFEventQueueDefault5emptyEv>
 8004cf6:	b110      	cbz	r0, 8004cfe <_ZN19XFDispatcherDefault7executeEPKv+0x1a>
 8004cf8:	7923      	ldrb	r3, [r4, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f8      	bne.n	8004cf0 <_ZN19XFDispatcherDefault7executeEPKv+0xc>
		executeOnce();  // Dispatch next event
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	4620      	mov	r0, r4
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	4798      	blx	r3
	while(_bExecuting)
 8004d06:	7923      	ldrb	r3, [r4, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f1      	bne.n	8004cf0 <_ZN19XFDispatcherDefault7executeEPKv+0xc>
}
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}

08004d10 <_ZN19XFDispatcherDefault11executeOnceEv>:
{
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!_events.empty() and _bExecuting)
 8004d12:	f100 0508 	add.w	r5, r0, #8
{
 8004d16:	4604      	mov	r4, r0
    if (!_events.empty() and _bExecuting)
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f000 faad 	bl	8005278 <_ZNK19XFEventQueueDefault5emptyEv>
 8004d1e:	b920      	cbnz	r0, 8004d2a <_ZN19XFDispatcherDefault11executeOnceEv+0x1a>
 8004d20:	4606      	mov	r6, r0
 8004d22:	7920      	ldrb	r0, [r4, #4]
 8004d24:	b918      	cbnz	r0, 8004d2e <_ZN19XFDispatcherDefault11executeOnceEv+0x1e>
}
 8004d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                delete pEvent;
 8004d28:	4798      	blx	r3
 8004d2a:	7920      	ldrb	r0, [r4, #4]
}
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _pMutex->lock();
 8004d2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d30:	6803      	ldr	r3, [r0, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4798      	blx	r3
        	pEvent = _events.front(); _events.pop();
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fba0 	bl	800547c <_ZN19XFEventQueueDefault5frontEv>
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fbaa 	bl	8005498 <_ZN19XFEventQueueDefault3popEv>
    	_pMutex->unlock();
 8004d44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4798      	blx	r3
        if (pEvent)
 8004d4c:	2f00      	cmp	r7, #0
 8004d4e:	d0ec      	beq.n	8004d2a <_ZN19XFDispatcherDefault11executeOnceEv+0x1a>
            dispatchEvent(pEvent);
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	4639      	mov	r1, r7
 8004d54:	4620      	mov	r0, r4
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4798      	blx	r3
            if (pEvent->getEventType() == XFEvent::Terminate)
 8004d5a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <_ZN19XFDispatcherDefault11executeOnceEv+0x7c>)
 8004d60:	3301      	adds	r3, #1
            if (pEvent->deleteAfterConsume())
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
                _bExecuting = false;
 8004d66:	bf08      	it	eq
 8004d68:	7126      	strbeq	r6, [r4, #4]
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d0dd      	beq.n	8004d2a <_ZN19XFDispatcherDefault11executeOnceEv+0x1a>
            if (pEvent->deleteAfterConsume())
 8004d6e:	4638      	mov	r0, r7
 8004d70:	4798      	blx	r3
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d0d9      	beq.n	8004d2a <_ZN19XFDispatcherDefault11executeOnceEv+0x1a>
                delete pEvent;
 8004d76:	683b      	ldr	r3, [r7, #0]
    virtual ~XFEvent() {}		///< Class destructor
 8004d78:	4638      	mov	r0, r7
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <_ZN19XFDispatcherDefault11executeOnceEv+0x80>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d1d2      	bne.n	8004d28 <_ZN19XFDispatcherDefault11executeOnceEv+0x18>
 8004d82:	2110      	movs	r1, #16
 8004d84:	f000 fbef 	bl	8005566 <_ZdlPvj>
 8004d88:	7920      	ldrb	r0, [r4, #4]
}
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8c:	0800411d 	.word	0x0800411d
 8004d90:	08004155 	.word	0x08004155

08004d94 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:
}

interface::XFDispatcher * XFResourceFactoryDefault::getDefaultDispatcher()
{
	return &_mainDispatcher;
}
 8004d94:	3004      	adds	r0, #4
 8004d96:	4770      	bx	lr

08004d98 <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 8004d98:	b082      	sub	sp, #8
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
}
 8004d9a:	2000      	movs	r0, #0
{
 8004d9c:	a902      	add	r1, sp, #8
 8004d9e:	e901 000c 	stmdb	r1, {r2, r3}
}
 8004da2:	b002      	add	sp, #8
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop

08004da8 <_ZN24XFResourceFactoryDefault11createMutexEv>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
 8004da8:	b510      	push	{r4, lr}
	static XFMutexDefault mutex;
 8004daa:	4c07      	ldr	r4, [pc, #28]	; (8004dc8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x20>)
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d407      	bmi.n	8004dc2 <_ZN24XFResourceFactoryDefault11createMutexEv+0x1a>
 8004db2:	1d20      	adds	r0, r4, #4
 8004db4:	f000 fbae 	bl	8005514 <_ZN14XFMutexDefaultC1Ev>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4804      	ldr	r0, [pc, #16]	; (8004dcc <_ZN24XFResourceFactoryDefault11createMutexEv+0x24>)
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	f000 fce1 	bl	8005784 <atexit>

	return &mutex;
}
 8004dc2:	4803      	ldr	r0, [pc, #12]	; (8004dd0 <_ZN24XFResourceFactoryDefault11createMutexEv+0x28>)
 8004dc4:	bd10      	pop	{r4, pc}
 8004dc6:	bf00      	nop
 8004dc8:	2000026c 	.word	0x2000026c
 8004dcc:	08004e81 	.word	0x08004e81
 8004dd0:	20000270 	.word	0x20000270

08004dd4 <_ZN24XFResourceFactoryDefault11getInstanceEv.part.1>:
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
 8004dd4:	b510      	push	{r4, lr}
											   const char * threadName,                             
											   const uint32_t stackSize = 0);                       ///< Creates and returns a new thread.
	virtual interface::XFMutex * createMutex();                                                     ///< Creates and returns a new mutex.
	
protected:
	XFResourceFactoryDefault() {}
 8004dd6:	4c07      	ldr	r4, [pc, #28]	; (8004df4 <_ZN24XFResourceFactoryDefault11getInstanceEv.part.1+0x20>)
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <_ZN24XFResourceFactoryDefault11getInstanceEv.part.1+0x24>)
 8004dda:	f104 000c 	add.w	r0, r4, #12
 8004dde:	60a3      	str	r3, [r4, #8]
 8004de0:	f7ff ff34 	bl	8004c4c <_ZN19XFDispatcherDefaultC1Ev>
    static XFResourceFactoryDefault theResourceFactory;
 8004de4:	2301      	movs	r3, #1
 8004de6:	4805      	ldr	r0, [pc, #20]	; (8004dfc <_ZN24XFResourceFactoryDefault11getInstanceEv.part.1+0x28>)
 8004de8:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8004dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    static XFResourceFactoryDefault theResourceFactory;
 8004dee:	f000 bcc9 	b.w	8005784 <atexit>
 8004df2:	bf00      	nop
 8004df4:	2000026c 	.word	0x2000026c
 8004df8:	08006dc4 	.word	0x08006dc4
 8004dfc:	08004e49 	.word	0x08004e49

08004e00 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:
	return getDefaultDispatcher();
 8004e00:	6802      	ldr	r2, [r0, #0]
 8004e02:	4903      	ldr	r1, [pc, #12]	; (8004e10 <_ZN24XFResourceFactoryDefault16createDispatcherEv+0x10>)
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	428a      	cmp	r2, r1
 8004e08:	d101      	bne.n	8004e0e <_ZN24XFResourceFactoryDefault16createDispatcherEv+0xe>
	return &_mainDispatcher;
 8004e0a:	3004      	adds	r0, #4
}
 8004e0c:	4770      	bx	lr
	return getDefaultDispatcher();
 8004e0e:	4710      	bx	r2
 8004e10:	08004d95 	.word	0x08004d95

08004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>:
{
 8004e14:	b508      	push	{r3, lr}
    static XFResourceFactoryDefault theResourceFactory;
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <_ZN9interface17XFResourceFactory11getInstanceEv+0x14>)
 8004e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1a:	07db      	lsls	r3, r3, #31
 8004e1c:	d401      	bmi.n	8004e22 <_ZN9interface17XFResourceFactory11getInstanceEv+0xe>
 8004e1e:	f7ff ffd9 	bl	8004dd4 <_ZN24XFResourceFactoryDefault11getInstanceEv.part.1>
}
 8004e22:	4802      	ldr	r0, [pc, #8]	; (8004e2c <_ZN9interface17XFResourceFactory11getInstanceEv+0x18>)
 8004e24:	bd08      	pop	{r3, pc}
 8004e26:	bf00      	nop
 8004e28:	2000026c 	.word	0x2000026c
 8004e2c:	20000274 	.word	0x20000274

08004e30 <_ZN24XFResourceFactoryDefaultD1Ev>:
	virtual ~XFResourceFactoryDefault() {}
 8004e30:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <_ZN24XFResourceFactoryDefaultD1Ev+0x14>)
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	f840 3b04 	str.w	r3, [r0], #4
 8004e3a:	f7ff ff25 	bl	8004c88 <_ZN19XFDispatcherDefaultD1Ev>
 8004e3e:	4620      	mov	r0, r4
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	08006dc4 	.word	0x08006dc4

08004e48 <__tcf_0>:
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <__tcf_0+0x10>)
 8004e4a:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <__tcf_0+0x14>)
 8004e4c:	f103 000c 	add.w	r0, r3, #12
 8004e50:	609a      	str	r2, [r3, #8]
 8004e52:	f7ff bf19 	b.w	8004c88 <_ZN19XFDispatcherDefaultD1Ev>
 8004e56:	bf00      	nop
 8004e58:	2000026c 	.word	0x2000026c
 8004e5c:	08006dc4 	.word	0x08006dc4

08004e60 <_ZN24XFResourceFactoryDefaultD0Ev>:
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <_ZN24XFResourceFactoryDefaultD0Ev+0x1c>)
 8004e62:	b510      	push	{r4, lr}
 8004e64:	4604      	mov	r4, r0
 8004e66:	f840 3b04 	str.w	r3, [r0], #4
 8004e6a:	f7ff ff0d 	bl	8004c88 <_ZN19XFDispatcherDefaultD1Ev>
 8004e6e:	2140      	movs	r1, #64	; 0x40
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fb78 	bl	8005566 <_ZdlPvj>
 8004e76:	4620      	mov	r0, r4
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08006dc4 	.word	0x08006dc4

08004e80 <__tcf_1>:
	static XFMutexDefault mutex;
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__tcf_1+0x8>)
 8004e82:	f000 bb2d 	b.w	80054e0 <_ZN14XFMutexDefaultD1Ev>
 8004e86:	bf00      	nop
 8004e88:	20000270 	.word	0x20000270

08004e8c <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        _tickInterval = tickInterval;
 8004e8c:	6041      	str	r1, [r0, #4]
    }
 8004e8e:	4770      	bx	lr

08004e90 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return _tickInterval;
    }
 8004e90:	6840      	ldr	r0, [r0, #4]
 8004e92:	4770      	bx	lr

08004e94 <_ZN23XFTimeoutManagerDefaultD1Ev>:
{
    _pMutex = XFMutex::create();
    assert(_pMutex);
}

XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <_ZN23XFTimeoutManagerDefaultD1Ev+0x24>)
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004e98:	4605      	mov	r5, r0
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	6003      	str	r3, [r0, #0]
 8004e9e:	f855 0f08 	ldr.w	r0, [r5, #8]!
      while (__cur != &_M_impl._M_node)
 8004ea2:	42a8      	cmp	r0, r5
 8004ea4:	d005      	beq.n	8004eb2 <_ZN23XFTimeoutManagerDefaultD1Ev+0x1e>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8004ea6:	6804      	ldr	r4, [r0, #0]
	::operator delete(__p);
 8004ea8:	f000 fb78 	bl	800559c <_ZdlPv>
      while (__cur != &_M_impl._M_node)
 8004eac:	42ac      	cmp	r4, r5
 8004eae:	4620      	mov	r0, r4
 8004eb0:	d1f9      	bne.n	8004ea6 <_ZN23XFTimeoutManagerDefaultD1Ev+0x12>
{
}
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
 8004eb6:	bf00      	nop
 8004eb8:	08006de4 	.word	0x08006de4

08004ebc <__tcf_0>:
    static XFTimeoutManagerDefault timeoutManager;
 8004ebc:	b538      	push	{r3, r4, r5, lr}
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <__tcf_0+0x20>)
 8004ec0:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <__tcf_0+0x24>)
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f855 0f08 	ldr.w	r0, [r5, #8]!
      while (__cur != &_M_impl._M_node)
 8004eca:	42a8      	cmp	r0, r5
 8004ecc:	d005      	beq.n	8004eda <__tcf_0+0x1e>
	  __cur = __tmp->_M_next;
 8004ece:	6804      	ldr	r4, [r0, #0]
 8004ed0:	f000 fb64 	bl	800559c <_ZdlPv>
      while (__cur != &_M_impl._M_node)
 8004ed4:	42ac      	cmp	r4, r5
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	d1f9      	bne.n	8004ece <__tcf_0+0x12>
    static XFTimeoutManagerDefault timeoutManager;
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	200002b8 	.word	0x200002b8
 8004ee0:	08006de4 	.word	0x08006de4

08004ee4 <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <_ZN23XFTimeoutManagerDefaultD0Ev+0x2c>)
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004ee8:	4605      	mov	r5, r0
 8004eea:	4606      	mov	r6, r0
 8004eec:	6003      	str	r3, [r0, #0]
 8004eee:	f855 0f08 	ldr.w	r0, [r5, #8]!
      while (__cur != &_M_impl._M_node)
 8004ef2:	42a8      	cmp	r0, r5
 8004ef4:	d005      	beq.n	8004f02 <_ZN23XFTimeoutManagerDefaultD0Ev+0x1e>
	  __cur = __tmp->_M_next;
 8004ef6:	6804      	ldr	r4, [r0, #0]
 8004ef8:	f000 fb50 	bl	800559c <_ZdlPv>
      while (__cur != &_M_impl._M_node)
 8004efc:	42ac      	cmp	r4, r5
 8004efe:	4620      	mov	r0, r4
 8004f00:	d1f9      	bne.n	8004ef6 <_ZN23XFTimeoutManagerDefaultD0Ev+0x12>
}
 8004f02:	4630      	mov	r0, r6
 8004f04:	2118      	movs	r1, #24
 8004f06:	f000 fb2e 	bl	8005566 <_ZdlPvj>
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	bf00      	nop
 8004f10:	08006de4 	.word	0x08006de4

08004f14 <_ZN23XFTimeoutManagerDefault5startEv>:

void XFTimeoutManagerDefault::start()
{
    // Check tickInterval. Set default value if not set
    if (_tickInterval == 0)
 8004f14:	6843      	ldr	r3, [r0, #4]
 8004f16:	b913      	cbnz	r3, 8004f1e <_ZN23XFTimeoutManagerDefault5startEv+0xa>
    {
        _tickInterval = 10;
 8004f18:	220a      	movs	r2, #10
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	6042      	str	r2, [r0, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(_tickInterval));
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 bafe 	b.w	8005520 <XF_startTimeoutManagerTimer>

08004f24 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:
}

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	460e      	mov	r6, r1
 8004f2a:	4617      	mov	r7, r2
 8004f2c:	4698      	mov	r8, r3
 8004f2e:	4604      	mov	r4, r0
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8004f30:	2018      	movs	r0, #24
 8004f32:	f000 fb1a 	bl	800556a <_Znwj>
 8004f36:	4643      	mov	r3, r8
 8004f38:	4631      	mov	r1, r6
 8004f3a:	463a      	mov	r2, r7
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	f7ff fe1d 	bl	8004b7c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>

    if (pTimeout)
    {
        addTimeout(pTimeout);
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	6a1b      	ldr	r3, [r3, #32]
    }
}
 8004f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        addTimeout(pTimeout);
 8004f4e:	4718      	bx	r3

08004f50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive * pReactive)
{
 8004f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	4607      	mov	r7, r0
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8004f58:	4613      	mov	r3, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4668      	mov	r0, sp
    XFTimeout * pTimeout;

    _pMutex->lock();
    {
        for (TimeoutList::iterator i = _timeouts.begin();
 8004f5e:	463e      	mov	r6, r7
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8004f60:	f7ff fe0c 	bl	8004b7c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    _pMutex->lock();
 8004f64:	6978      	ldr	r0, [r7, #20]
 8004f66:	6803      	ldr	r3, [r0, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	4798      	blx	r3
        for (TimeoutList::iterator i = _timeouts.begin();
 8004f6c:	f856 4f08 	ldr.w	r4, [r6, #8]!
             i != _timeouts.end(); /*Do not increment here!*/)
 8004f70:	42b4      	cmp	r4, r6
        {
            pTimeout = *i;

            // Check if behavior and timeout id are equal
            if (*pTimeout == timeout)
 8004f72:	4669      	mov	r1, sp
             i != _timeouts.end(); /*Do not increment here!*/)
 8004f74:	d01f      	beq.n	8004fb6 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x66>
            pTimeout = *i;
 8004f76:	68a5      	ldr	r5, [r4, #8]
            if (*pTimeout == timeout)
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f7ff fe0d 	bl	8004b98 <_ZNK9XFTimeouteqERKS_>
 8004f7e:	b308      	cbz	r0, 8004fc4 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x74>
      { return static_cast<_Node*>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _M_node->_M_next;
 8004f80:	f8d4 8000 	ldr.w	r8, [r4]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004f84:	4620      	mov	r0, r4
            {
                TimeoutList::iterator next = i;

                // Check if remaining ticks can be given further
                if (++next != _timeouts.end())
 8004f86:	45b0      	cmp	r8, r6
 8004f88:	d01e      	beq.n	8004fc8 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x78>
                {
                    // Add (remaining) ticks to next timeout in list
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 8004f8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { _relTicks = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return _relTicks; }                                            ///< Returns remaining ticks.
    inline void substractFromRelTicks(int ticksToSubstract) { _relTicks -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
    inline void addToRelTicks(int ticksToAdd) { _relTicks += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8004f8e:	696a      	ldr	r2, [r5, #20]
 8004f90:	694b      	ldr	r3, [r1, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	614b      	str	r3, [r1, #20]
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]
	__position._M_node->_M_unhook();
 8004f9c:	f000 fb18 	bl	80055d0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fafb 	bl	800559c <_ZdlPv>
                }

                i = _timeouts.erase(i);
                // Iterator now points to the next element

                delete pTimeout;
 8004fa6:	682b      	ldr	r3, [r5, #0]
	_M_node = _M_node->_M_next;
 8004fa8:	4644      	mov	r4, r8
 8004faa:	4628      	mov	r0, r5
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4798      	blx	r3
             i != _timeouts.end(); /*Do not increment here!*/)
 8004fb0:	42b4      	cmp	r4, r6
            if (*pTimeout == timeout)
 8004fb2:	4669      	mov	r1, sp
             i != _timeouts.end(); /*Do not increment here!*/)
 8004fb4:	d1df      	bne.n	8004f76 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x26>
            {
                i++;
            }
        }
    }
    _pMutex->unlock();
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	6803      	ldr	r3, [r0, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4798      	blx	r3
}
 8004fbe:	b006      	add	sp, #24
 8004fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _M_node->_M_next;
 8004fc4:	6824      	ldr	r4, [r4, #0]
 8004fc6:	e7d3      	b.n	8004f70 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x20>
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	613b      	str	r3, [r7, #16]
	__position._M_node->_M_unhook();
 8004fce:	f000 faff 	bl	80055d0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4634      	mov	r4, r6
 8004fd6:	f000 fae1 	bl	800559c <_ZdlPv>
                delete pTimeout;
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	d0c8      	beq.n	8004f70 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x20>
 8004fde:	e7e2      	b.n	8004fa6 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x56>

08004fe0 <_ZN23XFTimeoutManagerDefault4tickEv>:

void XFTimeoutManagerDefault::tick()
{
 8004fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(_tickInterval);      // Did you call start()?!
 8004fe4:	6844      	ldr	r4, [r0, #4]
 8004fe6:	2c00      	cmp	r4, #0
 8004fe8:	d052      	beq.n	8005090 <_ZN23XFTimeoutManagerDefault4tickEv+0xb0>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004fea:	f100 0708 	add.w	r7, r0, #8
    int32_t intervalToSubtract = _tickInterval;

    while (!_timeouts.empty())
 8004fee:	6883      	ldr	r3, [r0, #8]
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	429f      	cmp	r7, r3
 8004ff4:	d044      	beq.n	8005080 <_ZN23XFTimeoutManagerDefault4tickEv+0xa0>
    {
        _pMutex->lock();
 8004ff6:	6970      	ldr	r0, [r6, #20]
 8004ff8:	6803      	ldr	r3, [r0, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4798      	blx	r3
        {
            XFTimeout * pFirstTimeout = _timeouts.front();
 8004ffe:	68b3      	ldr	r3, [r6, #8]
 8005000:	6899      	ldr	r1, [r3, #8]
    inline void substractFromRelTicks(int ticksToSubstract) { _relTicks -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8005002:	694b      	ldr	r3, [r1, #20]
 8005004:	1b1b      	subs	r3, r3, r4

            // From now on set it to zero.
            intervalToSubtract = 0;

            // Check timeout timed out
            if (pFirstTimeout->getRelTicks() <= 0)
 8005006:	2b00      	cmp	r3, #0
 8005008:	614b      	str	r3, [r1, #20]
 800500a:	dc3b      	bgt.n	8005084 <_ZN23XFTimeoutManagerDefault4tickEv+0xa4>
            {
                // Check remaining ticks can be given further
                if (_timeouts.size() > 1)
 800500c:	6932      	ldr	r2, [r6, #16]
 800500e:	2a01      	cmp	r2, #1
 8005010:	d905      	bls.n	800501e <_ZN23XFTimeoutManagerDefault4tickEv+0x3e>
	_M_node = _M_node->_M_next;
 8005012:	68b2      	ldr	r2, [r6, #8]
                {
                    TimeoutList::iterator i = _timeouts.begin();

                    // Add ticks overrun to next timeout
                    i++;
                    (*i)->substractFromRelTicks(pFirstTimeout->getRelTicks());
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	6890      	ldr	r0, [r2, #8]
 8005018:	6942      	ldr	r2, [r0, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	6143      	str	r3, [r0, #20]
    }
}

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
    pTimeout->getBehavior()->pushEvent(pTimeout);
 800501e:	68c8      	ldr	r0, [r1, #12]
 8005020:	6803      	ldr	r3, [r0, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4798      	blx	r3
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8005026:	6933      	ldr	r3, [r6, #16]
      { this->_M_erase(begin()); }
 8005028:	68b4      	ldr	r4, [r6, #8]
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 800502a:	3b01      	subs	r3, #1
	__position._M_node->_M_unhook();
 800502c:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 800502e:	6133      	str	r3, [r6, #16]
	__position._M_node->_M_unhook();
 8005030:	f000 face 	bl	80055d0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8005034:	4620      	mov	r0, r4
 8005036:	f000 fab1 	bl	800559c <_ZdlPv>
                for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 800503a:	68b4      	ldr	r4, [r6, #8]
 800503c:	42bc      	cmp	r4, r7
 800503e:	d017      	beq.n	8005070 <_ZN23XFTimeoutManagerDefault4tickEv+0x90>
                    if ((*it)->getRelTicks() == 0)
 8005040:	68a1      	ldr	r1, [r4, #8]
 8005042:	694b      	ldr	r3, [r1, #20]
 8005044:	b123      	cbz	r3, 8005050 <_ZN23XFTimeoutManagerDefault4tickEv+0x70>
 8005046:	e013      	b.n	8005070 <_ZN23XFTimeoutManagerDefault4tickEv+0x90>
 8005048:	68a9      	ldr	r1, [r5, #8]
 800504a:	462c      	mov	r4, r5
 800504c:	694b      	ldr	r3, [r1, #20]
 800504e:	b97b      	cbnz	r3, 8005070 <_ZN23XFTimeoutManagerDefault4tickEv+0x90>
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8005050:	68c8      	ldr	r0, [r1, #12]
 8005052:	6803      	ldr	r3, [r0, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4798      	blx	r3
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8005058:	6933      	ldr	r3, [r6, #16]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 800505a:	6825      	ldr	r5, [r4, #0]
	__position._M_node->_M_unhook();
 800505c:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 800505e:	3b01      	subs	r3, #1
 8005060:	6133      	str	r3, [r6, #16]
	__position._M_node->_M_unhook();
 8005062:	f000 fab5 	bl	80055d0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8005066:	4620      	mov	r0, r4
 8005068:	f000 fa98 	bl	800559c <_ZdlPv>
                for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 800506c:	42bd      	cmp	r5, r7
 800506e:	d1eb      	bne.n	8005048 <_ZN23XFTimeoutManagerDefault4tickEv+0x68>
        _pMutex->unlock();
 8005070:	6970      	ldr	r0, [r6, #20]
            intervalToSubtract = 0;
 8005072:	2400      	movs	r4, #0
        _pMutex->unlock();
 8005074:	6803      	ldr	r3, [r0, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4798      	blx	r3
    while (!_timeouts.empty())
 800507a:	68b3      	ldr	r3, [r6, #8]
 800507c:	42bb      	cmp	r3, r7
 800507e:	d1ba      	bne.n	8004ff6 <_ZN23XFTimeoutManagerDefault4tickEv+0x16>
}
 8005080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                _pMutex->unlock();
 8005084:	6970      	ldr	r0, [r6, #20]
 8005086:	6803      	ldr	r3, [r0, #0]
}
 8005088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                _pMutex->unlock();
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	4718      	bx	r3
    assert(_tickInterval);      // Did you call start()?!
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <_ZN23XFTimeoutManagerDefault4tickEv+0xbc>)
 8005092:	2161      	movs	r1, #97	; 0x61
 8005094:	4a02      	ldr	r2, [pc, #8]	; (80050a0 <_ZN23XFTimeoutManagerDefault4tickEv+0xc0>)
 8005096:	4803      	ldr	r0, [pc, #12]	; (80050a4 <_ZN23XFTimeoutManagerDefault4tickEv+0xc4>)
 8005098:	f000 fb56 	bl	8005748 <__assert_func>
 800509c:	08007308 	.word	0x08007308
 80050a0:	08006e08 	.word	0x08006e08
 80050a4:	08007318 	.word	0x08007318

080050a8 <_ZN23XFTimeoutManagerDefaultC1Ev>:
XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 80050a8:	b538      	push	{r3, r4, r5, lr}
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        _tickInterval(0)
 80050aa:	2100      	movs	r1, #0
    _pMutex(nullptr)
 80050ac:	4603      	mov	r3, r0
 80050ae:	4d0b      	ldr	r5, [pc, #44]	; (80050dc <_ZN23XFTimeoutManagerDefaultC1Ev+0x34>)
XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 80050b0:	4604      	mov	r4, r0
 80050b2:	6041      	str	r1, [r0, #4]
    _pMutex(nullptr)
 80050b4:	f843 5b08 	str.w	r5, [r3], #8
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 80050b8:	6101      	str	r1, [r0, #16]
 80050ba:	6141      	str	r1, [r0, #20]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 80050bc:	e9c0 3302 	strd	r3, r3, [r0, #8]
    _pMutex = XFMutex::create();
 80050c0:	f000 fa1e 	bl	8005500 <_ZN9interface7XFMutex6createEv>
 80050c4:	6160      	str	r0, [r4, #20]
    assert(_pMutex);
 80050c6:	b108      	cbz	r0, 80050cc <_ZN23XFTimeoutManagerDefaultC1Ev+0x24>
}
 80050c8:	4620      	mov	r0, r4
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
    assert(_pMutex);
 80050cc:	f105 0254 	add.w	r2, r5, #84	; 0x54
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <_ZN23XFTimeoutManagerDefaultC1Ev+0x38>)
 80050d2:	211d      	movs	r1, #29
 80050d4:	4803      	ldr	r0, [pc, #12]	; (80050e4 <_ZN23XFTimeoutManagerDefaultC1Ev+0x3c>)
 80050d6:	f000 fb37 	bl	8005748 <__assert_func>
 80050da:	bf00      	nop
 80050dc:	08006de4 	.word	0x08006de4
 80050e0:	0800729c 	.word	0x0800729c
 80050e4:	08007318 	.word	0x08007318

080050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
{
 80050e8:	b510      	push	{r4, lr}
    static XFTimeoutManagerDefault timeoutManager;
 80050ea:	4c07      	ldr	r4, [pc, #28]	; (8005108 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x20>)
 80050ec:	69a3      	ldr	r3, [r4, #24]
 80050ee:	07db      	lsls	r3, r3, #31
 80050f0:	d407      	bmi.n	8005102 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x1a>
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7ff ffd8 	bl	80050a8 <_ZN23XFTimeoutManagerDefaultC1Ev>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4804      	ldr	r0, [pc, #16]	; (800510c <_ZN9interface16XFTimeoutManager11getInstanceEv+0x24>)
 80050fc:	61a3      	str	r3, [r4, #24]
 80050fe:	f000 fb41 	bl	8005784 <atexit>
}
 8005102:	4801      	ldr	r0, [pc, #4]	; (8005108 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x20>)
 8005104:	bd10      	pop	{r4, pc}
 8005106:	bf00      	nop
 8005108:	200002b8 	.word	0x200002b8
 800510c:	08004ebd 	.word	0x08004ebd

08005110 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	4617      	mov	r7, r2
 8005114:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005116:	200c      	movs	r0, #12
 8005118:	460e      	mov	r6, r1
 800511a:	f000 fa26 	bl	800556a <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800511e:	683b      	ldr	r3, [r7, #0]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8005120:	4631      	mov	r1, r6
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005122:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005124:	6083      	str	r3, [r0, #8]
 8005126:	f000 fa4c 	bl	80055c2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 800512a:	68a3      	ldr	r3, [r4, #8]
    }
 800512c:	4628      	mov	r0, r5
 800512e:	3301      	adds	r3, #1
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005134 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:
{
 8005134:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8005136:	f100 0608 	add.w	r6, r0, #8
    if (!_timeouts.empty())
 800513a:	6883      	ldr	r3, [r0, #8]
{
 800513c:	b083      	sub	sp, #12
 800513e:	4607      	mov	r7, r0
    if (!_timeouts.empty())
 8005140:	429e      	cmp	r6, r3
{
 8005142:	9101      	str	r1, [sp, #4]
    if (!_timeouts.empty())
 8005144:	d043      	beq.n	80051ce <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x9a>
        _pMutex->lock();
 8005146:	6940      	ldr	r0, [r0, #20]
 8005148:	6803      	ldr	r3, [r0, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4798      	blx	r3
            TimeoutList::iterator i = _timeouts.begin();
 800514e:	68bc      	ldr	r4, [r7, #8]
            while (i != _timeouts.end() &&
 8005150:	42a6      	cmp	r6, r4
 8005152:	d00f      	beq.n	8005174 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x40>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 8005154:	68a3      	ldr	r3, [r4, #8]
 8005156:	9901      	ldr	r1, [sp, #4]
 8005158:	695d      	ldr	r5, [r3, #20]
 800515a:	694b      	ldr	r3, [r1, #20]
            while (i != _timeouts.end() &&
 800515c:	42ab      	cmp	r3, r5
 800515e:	dc04      	bgt.n	800516a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
 8005160:	e013      	b.n	800518a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x56>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 8005162:	68a2      	ldr	r2, [r4, #8]
 8005164:	6955      	ldr	r5, [r2, #20]
            while (i != _timeouts.end() &&
 8005166:	42ab      	cmp	r3, r5
 8005168:	dd0f      	ble.n	800518a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x56>
	_M_node = _M_node->_M_next;
 800516a:	6824      	ldr	r4, [r4, #0]
 800516c:	1b5b      	subs	r3, r3, r5
 800516e:	42b4      	cmp	r4, r6
 8005170:	614b      	str	r3, [r1, #20]
 8005172:	d1f6      	bne.n	8005162 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x2e>
                _timeouts.insert(_timeouts.end(), pNewTimeout);
 8005174:	aa01      	add	r2, sp, #4
 8005176:	4631      	mov	r1, r6
 8005178:	4630      	mov	r0, r6
 800517a:	f7ff ffc9 	bl	8005110 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
        _pMutex->unlock();
 800517e:	6978      	ldr	r0, [r7, #20]
 8005180:	6803      	ldr	r3, [r0, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4798      	blx	r3
}
 8005186:	b003      	add	sp, #12
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 800518a:	429d      	cmp	r5, r3
 800518c:	d113      	bne.n	80051b6 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x82>
 800518e:	6821      	ldr	r1, [r4, #0]
                    while(i != _timeouts.end() && (*i)->getRelTicks() == 0)
 8005190:	428e      	cmp	r6, r1
 8005192:	d103      	bne.n	800519c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x68>
 8005194:	e006      	b.n	80051a4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x70>
 8005196:	6809      	ldr	r1, [r1, #0]
 8005198:	428e      	cmp	r6, r1
 800519a:	d025      	beq.n	80051e8 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xb4>
 800519c:	688b      	ldr	r3, [r1, #8]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f8      	beq.n	8005196 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x62>
                    _timeouts.insert(i, pNewTimeout);
 80051a4:	aa01      	add	r2, sp, #4
 80051a6:	4630      	mov	r0, r6
 80051a8:	f7ff ffb2 	bl	8005110 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    pNewTimeout->substractFromRelTicks(relTicks);
 80051ac:	9a01      	ldr	r2, [sp, #4]
 80051ae:	6953      	ldr	r3, [r2, #20]
 80051b0:	1b5d      	subs	r5, r3, r5
 80051b2:	6155      	str	r5, [r2, #20]
 80051b4:	e7e3      	b.n	800517e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x4a>
                    _timeouts.insert(i, pNewTimeout);
 80051b6:	aa01      	add	r2, sp, #4
 80051b8:	4621      	mov	r1, r4
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ffa8 	bl	8005110 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 80051c0:	68a2      	ldr	r2, [r4, #8]
 80051c2:	9901      	ldr	r1, [sp, #4]
 80051c4:	6953      	ldr	r3, [r2, #20]
 80051c6:	6949      	ldr	r1, [r1, #20]
 80051c8:	1a5b      	subs	r3, r3, r1
 80051ca:	6153      	str	r3, [r2, #20]
 80051cc:	e7d7      	b.n	800517e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x4a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80051ce:	200c      	movs	r0, #12
 80051d0:	f000 f9cb 	bl	800556a <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80051d4:	9b01      	ldr	r3, [sp, #4]
	 __tmp->_M_hook(__position._M_node);
 80051d6:	4631      	mov	r1, r6
 80051d8:	6083      	str	r3, [r0, #8]
 80051da:	f000 f9f2 	bl	80055c2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3301      	adds	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
}
 80051e4:	b003      	add	sp, #12
 80051e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e8:	4631      	mov	r1, r6
 80051ea:	e7db      	b.n	80051a4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x70>

080051ec <_ZN2XF10initializeEiiPPc.part.0>:
void XF_execOnce()
{
    XF::execOnce();
}

void XF::initialize(int timeInterval /* = 10 */, int argc /* = 0 */, char * argv[] /* = nullptr */)
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4604      	mov	r4, r0
{
    if (!_bInitialized)
    {
        // Create and initialize TimeoutManager
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 80051f0:	f7ff ff7a 	bl	80050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80051f4:	6802      	ldr	r2, [r0, #0]
 80051f6:	4907      	ldr	r1, [pc, #28]	; (8005214 <_ZN2XF10initializeEiiPPc.part.0+0x28>)
 80051f8:	6892      	ldr	r2, [r2, #8]
 80051fa:	428a      	cmp	r2, r1
 80051fc:	d104      	bne.n	8005208 <_ZN2XF10initializeEiiPPc.part.0+0x1c>

        _bInitialized = true;
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <_ZN2XF10initializeEiiPPc.part.0+0x2c>)
 8005200:	2201      	movs	r2, #1
        _tickInterval = tickInterval;
 8005202:	6044      	str	r4, [r0, #4]
 8005204:	701a      	strb	r2, [r3, #0]
    }
}
 8005206:	bd10      	pop	{r4, pc}
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 8005208:	4621      	mov	r1, r4
 800520a:	4790      	blx	r2
        _bInitialized = true;
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <_ZN2XF10initializeEiiPPc.part.0+0x2c>)
 800520e:	2201      	movs	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
}
 8005212:	bd10      	pop	{r4, pc}
 8005214:	08004e8d 	.word	0x08004e8d
 8005218:	200002d4 	.word	0x200002d4

0800521c <XF_initialize>:
    if (!_bInitialized)
 800521c:	4b02      	ldr	r3, [pc, #8]	; (8005228 <XF_initialize+0xc>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b103      	cbz	r3, 8005224 <XF_initialize+0x8>
}
 8005222:	4770      	bx	lr
 8005224:	f7ff bfe2 	b.w	80051ec <_ZN2XF10initializeEiiPPc.part.0>
 8005228:	200002d4 	.word	0x200002d4

0800522c <_ZN2XF4execEv>:

int XF::exec()
{
 800522c:	b510      	push	{r4, lr}
	// Start timeout manager
	XFTimeoutManager::getInstance()->start();
 800522e:	f7ff ff5b 	bl	80050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005232:	6803      	ldr	r3, [r0, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	4798      	blx	r3

	// Start default dispatcher
	XFResourceFactory::getInstance()->getDefaultDispatcher()->start();
 8005238:	f7ff fdec 	bl	8004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800523c:	6803      	ldr	r3, [r0, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4798      	blx	r3
 8005242:	6803      	ldr	r3, [r0, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	4798      	blx	r3

	// In case default dispatcher does not have a thread executing it,
	// call it with this thread
	if (!XFResourceFactory::getInstance()->getDefaultDispatcher()->isActive())
 8005248:	f7ff fde4 	bl	8004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800524c:	6803      	ldr	r3, [r0, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4798      	blx	r3
 8005252:	6803      	ldr	r3, [r0, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4798      	blx	r3
 8005258:	b948      	cbnz	r0, 800526e <_ZN2XF4execEv+0x42>
 800525a:	4604      	mov	r4, r0
	{
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
 800525c:	f7ff fdda 	bl	8004e14 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8005260:	6803      	ldr	r3, [r0, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4798      	blx	r3
 8005266:	6803      	ldr	r3, [r0, #0]
 8005268:	4621      	mov	r1, r4
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	4798      	blx	r3
	}
    return 0;
}
 800526e:	2000      	movs	r0, #0
 8005270:	bd10      	pop	{r4, pc}
 8005272:	bf00      	nop

08005274 <XF_exec>:
    XF::exec();
 8005274:	f7ff bfda 	b.w	800522c <_ZN2XF4execEv>

08005278 <_ZNK19XFEventQueueDefault5emptyEv>:
  // are in scope (for additional details, see libstdc++/3628)
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    { return __x._M_cur == __y._M_cur; }
 8005278:	6a02      	ldr	r2, [r0, #32]
 800527a:	6900      	ldr	r0, [r0, #16]
}

bool XFEventQueueDefault::empty() const
{
    return _queue.empty();
}
 800527c:	1a10      	subs	r0, r2, r0
 800527e:	fab0 f080 	clz	r0, r0
 8005282:	0940      	lsrs	r0, r0, #5
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop

08005288 <_ZN19XFEventQueueDefault4pendEv>:
bool XFEventQueueDefault::pend()
{
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
}
 8005288:	2000      	movs	r0, #0
 800528a:	4770      	bx	lr

0800528c <_ZN19XFEventQueueDefaultC1Ev>:
XFEventQueueDefault::XFEventQueueDefault()
 800528c:	4b17      	ldr	r3, [pc, #92]	; (80052ec <_ZN19XFEventQueueDefaultC1Ev+0x60>)
 800528e:	b570      	push	{r4, r5, r6, lr}
 8005290:	4604      	mov	r4, r0
 8005292:	f840 3b04 	str.w	r3, [r0], #4
 8005296:	f000 f93d 	bl	8005514 <_ZN14XFMutexDefaultC1Ev>
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 800529a:	2300      	movs	r3, #0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800529c:	2208      	movs	r2, #8
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800529e:	2020      	movs	r0, #32
	  _M_start(), _M_finish()
 80052a0:	e9c4 3202 	strd	r3, r2, [r4, #8]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80052a4:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80052a8:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80052ac:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80052b0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80052b4:	f000 f959 	bl	800556a <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80052b8:	68e5      	ldr	r5, [r4, #12]
 80052ba:	4606      	mov	r6, r0
 80052bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80052c0:	3d01      	subs	r5, #1
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80052c2:	60a6      	str	r6, [r4, #8]
 80052c4:	f000 f951 	bl	800556a <_Znwj>
 80052c8:	4603      	mov	r3, r0
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80052ca:	086d      	lsrs	r5, r5, #1
}
 80052cc:	4620      	mov	r0, r4
	_M_last = _M_first + difference_type(_S_buffer_size());
 80052ce:	f503 7200 	add.w	r2, r3, #512	; 0x200
	_M_first = *__new_node;
 80052d2:	6163      	str	r3, [r4, #20]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80052d4:	eb06 0185 	add.w	r1, r6, r5, lsl #2
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 80052d8:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	_M_first = *__new_node;
 80052dc:	6263      	str	r3, [r4, #36]	; 0x24
	_M_node = __new_node;
 80052de:	61e1      	str	r1, [r4, #28]
 80052e0:	62e1      	str	r1, [r4, #44]	; 0x2c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80052e2:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80052e4:	6223      	str	r3, [r4, #32]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80052e6:	61a2      	str	r2, [r4, #24]
 80052e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	08006e74 	.word	0x08006e74

080052f0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	4606      	mov	r6, r0
      if (this->_M_impl._M_map)
 80052f4:	6800      	ldr	r0, [r0, #0]
 80052f6:	b168      	cbz	r0, 8005314 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x24>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80052f8:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80052fa:	6974      	ldr	r4, [r6, #20]
 80052fc:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80052fe:	42ac      	cmp	r4, r5
 8005300:	d206      	bcs.n	8005310 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x20>
	::operator delete(__p);
 8005302:	f854 0b04 	ldr.w	r0, [r4], #4
 8005306:	f000 f949 	bl	800559c <_ZdlPv>
 800530a:	42a5      	cmp	r5, r4
 800530c:	d8f9      	bhi.n	8005302 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x12>
 800530e:	6830      	ldr	r0, [r6, #0]
 8005310:	f000 f944 	bl	800559c <_ZdlPv>
    }
 8005314:	4630      	mov	r0, r6
 8005316:	bd70      	pop	{r4, r5, r6, pc}

08005318 <_ZN19XFEventQueueDefaultD1Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <_ZN19XFEventQueueDefaultD1Ev+0x18>)
 800531a:	b510      	push	{r4, lr}
 800531c:	4604      	mov	r4, r0
 800531e:	f840 3b08 	str.w	r3, [r0], #8
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8005322:	f7ff ffe5 	bl	80052f0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8005326:	1d20      	adds	r0, r4, #4
 8005328:	f000 f8da 	bl	80054e0 <_ZN14XFMutexDefaultD1Ev>
}
 800532c:	4620      	mov	r0, r4
 800532e:	bd10      	pop	{r4, pc}
 8005330:	08006e74 	.word	0x08006e74

08005334 <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <_ZN19XFEventQueueDefaultD0Ev+0x20>)
 8005336:	b510      	push	{r4, lr}
 8005338:	4604      	mov	r4, r0
 800533a:	f840 3b08 	str.w	r3, [r0], #8
 800533e:	f7ff ffd7 	bl	80052f0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8005342:	1d20      	adds	r0, r4, #4
 8005344:	f000 f8cc 	bl	80054e0 <_ZN14XFMutexDefaultD1Ev>
}
 8005348:	4620      	mov	r0, r4
 800534a:	2130      	movs	r1, #48	; 0x30
 800534c:	f000 f90b 	bl	8005566 <_ZdlPvj>
 8005350:	4620      	mov	r0, r4
 8005352:	bd10      	pop	{r4, pc}
 8005354:	08006e74 	.word	0x08006e74

08005358 <_ZN19XFEventQueueDefault4pushEPK7XFEvent>:
{
 8005358:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    _mutex.lock();
 800535c:	1d05      	adds	r5, r0, #4
{
 800535e:	4604      	mov	r4, r0
 8005360:	460e      	mov	r6, r1
    _mutex.lock();
 8005362:	4628      	mov	r0, r5
 8005364:	f000 f8c8 	bl	80054f8 <_ZN14XFMutexDefault4lockEv>
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
 8005368:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (this->_M_impl._M_finish._M_cur
 800536a:	6a23      	ldr	r3, [r4, #32]
	    != this->_M_impl._M_finish._M_last - 1)
 800536c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x2e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005372:	b103      	cbz	r3, 8005376 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x1e>
 8005374:	601e      	str	r6, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl,
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8005376:	3304      	adds	r3, #4
    _mutex.unlock();
 8005378:	4628      	mov	r0, r5
 800537a:	6223      	str	r3, [r4, #32]
 800537c:	f000 f8be 	bl	80054fc <_ZN14XFMutexDefault6unlockEv>
}
 8005380:	2001      	movs	r0, #1
 8005382:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005386:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800538a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800538c:	1a3b      	subs	r3, r7, r0
 800538e:	eba2 03a3 	sub.w	r3, r2, r3, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005392:	2b01      	cmp	r3, #1
 8005394:	d916      	bls.n	80053c4 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x6c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005396:	f44f 7000 	mov.w	r0, #512	; 0x200
 800539a:	f000 f8e6 	bl	800556a <_Znwj>
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800539e:	6078      	str	r0, [r7, #4]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80053a0:	6a23      	ldr	r3, [r4, #32]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80053a2:	b103      	cbz	r3, 80053a6 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x4e>
 80053a4:	601e      	str	r6, [r3, #0]
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80053a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    _mutex.unlock();
 80053a8:	4628      	mov	r0, r5
	_M_first = *__new_node;
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	3304      	adds	r3, #4
	_M_last = _M_first + difference_type(_S_buffer_size());
 80053ae:	f502 7100 	add.w	r1, r2, #512	; 0x200
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80053b2:	e9c4 2208 	strd	r2, r2, [r4, #32]
	_M_node = __new_node;
 80053b6:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
 80053ba:	f000 f89f 	bl	80054fc <_ZN14XFMutexDefault6unlockEv>
}
 80053be:	2001      	movs	r0, #1
 80053c0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80053c4:	69e1      	ldr	r1, [r4, #28]
 80053c6:	eba7 0a01 	sub.w	sl, r7, r1
 80053ca:	ea4f 0aaa 	mov.w	sl, sl, asr #2
 80053ce:	f10a 0a01 	add.w	sl, sl, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80053d2:	f10a 0801 	add.w	r8, sl, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80053d6:	ebb2 0f48 	cmp.w	r2, r8, lsl #1
 80053da:	d833      	bhi.n	8005444 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0xec>
      if (__a < __b)
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d041      	beq.n	8005464 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x10c>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 80053e0:	0052      	lsls	r2, r2, #1
	  size_type __new_map_size = this->_M_impl._M_map_size
 80053e2:	1c97      	adds	r7, r2, #2
	if (__n > this->max_size())
 80053e4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80053e8:	d246      	bcs.n	8005478 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x120>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80053ea:	00b8      	lsls	r0, r7, #2
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80053ec:	eba7 0808 	sub.w	r8, r7, r8
 80053f0:	f000 f8bb 	bl	800556a <_Znwj>
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 80053f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053f6:	69e1      	ldr	r1, [r4, #28]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80053f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
	  std::copy(this->_M_impl._M_start._M_node,
 80053fc:	3204      	adds	r2, #4
 80053fe:	4683      	mov	fp, r0
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005400:	eb00 0888 	add.w	r8, r0, r8, lsl #2
	  if (_Num)
 8005404:	428a      	cmp	r2, r1
 8005406:	d003      	beq.n	8005410 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0xb8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005408:	1a52      	subs	r2, r2, r1
 800540a:	4640      	mov	r0, r8
 800540c:	f000 fa17 	bl	800583e <memmove>
	::operator delete(__p);
 8005410:	68a0      	ldr	r0, [r4, #8]
 8005412:	f000 f8c3 	bl	800559c <_ZdlPv>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
 8005416:	e9c4 b702 	strd	fp, r7, [r4, #8]
	_M_first = *__new_node;
 800541a:	f8d8 2000 	ldr.w	r2, [r8]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800541e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	_M_node = __new_node;
 8005422:	f8c4 801c 	str.w	r8, [r4, #28]
 8005426:	4453      	add	r3, sl
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005428:	f502 7100 	add.w	r1, r2, #512	; 0x200
 800542c:	eb08 0783 	add.w	r7, r8, r3, lsl #2
 8005430:	e9c4 2105 	strd	r2, r1, [r4, #20]
	_M_first = *__new_node;
 8005434:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
	_M_node = __new_node;
 8005438:	62e7      	str	r7, [r4, #44]	; 0x2c
	_M_last = _M_first + difference_type(_S_buffer_size());
 800543a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800543e:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
 8005442:	e7a8      	b.n	8005396 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x3e>
					 - __new_num_nodes) / 2
 8005444:	eba2 0808 	sub.w	r8, r2, r8
 8005448:	3704      	adds	r7, #4
 800544a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800544e:	1a7a      	subs	r2, r7, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005450:	eb00 0888 	add.w	r8, r0, r8, lsl #2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8005454:	4541      	cmp	r1, r8
 8005456:	d907      	bls.n	8005468 <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x110>
	  if (_Num)
 8005458:	42b9      	cmp	r1, r7
 800545a:	d0de      	beq.n	800541a <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0xc2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800545c:	4640      	mov	r0, r8
 800545e:	f000 f9ee 	bl	800583e <memmove>
 8005462:	e7da      	b.n	800541a <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0xc2>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005464:	2703      	movs	r7, #3
 8005466:	e7c0      	b.n	80053ea <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0x92>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8005468:	42b9      	cmp	r1, r7
 800546a:	d0d6      	beq.n	800541a <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0xc2>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800546c:	ebc2 008a 	rsb	r0, r2, sl, lsl #2
 8005470:	4440      	add	r0, r8
 8005472:	f000 f9e4 	bl	800583e <memmove>
 8005476:	e7d0      	b.n	800541a <_ZN19XFEventQueueDefault4pushEPK7XFEvent+0xc2>
	  std::__throw_bad_alloc();
 8005478:	f000 f8af 	bl	80055da <_ZSt17__throw_bad_allocv>

0800547c <_ZN19XFEventQueueDefault5frontEv>:
{
 800547c:	b538      	push	{r3, r4, r5, lr}
    _mutex.lock();
 800547e:	1d04      	adds	r4, r0, #4
{
 8005480:	4605      	mov	r5, r0
    _mutex.lock();
 8005482:	4620      	mov	r0, r4
 8005484:	f000 f838 	bl	80054f8 <_ZN14XFMutexDefault4lockEv>
        event =  _queue.front();
 8005488:	692b      	ldr	r3, [r5, #16]
    _mutex.unlock();
 800548a:	4620      	mov	r0, r4
        event =  _queue.front();
 800548c:	681c      	ldr	r4, [r3, #0]
    _mutex.unlock();
 800548e:	f000 f835 	bl	80054fc <_ZN14XFMutexDefault6unlockEv>
}
 8005492:	4620      	mov	r0, r4
 8005494:	bd38      	pop	{r3, r4, r5, pc}
 8005496:	bf00      	nop

08005498 <_ZN19XFEventQueueDefault3popEv>:
{
 8005498:	b538      	push	{r3, r4, r5, lr}
    _mutex.lock();
 800549a:	1d05      	adds	r5, r0, #4
{
 800549c:	4604      	mov	r4, r0
    _mutex.lock();
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 f82a 	bl	80054f8 <_ZN14XFMutexDefault4lockEv>
	    != this->_M_impl._M_start._M_last - 1)
 80054a4:	69a2      	ldr	r2, [r4, #24]
	if (this->_M_impl._M_start._M_cur
 80054a6:	6923      	ldr	r3, [r4, #16]
	    != this->_M_impl._M_start._M_last - 1)
 80054a8:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d006      	beq.n	80054bc <_ZN19XFEventQueueDefault3popEv+0x24>
	    ++this->_M_impl._M_start._M_cur;
 80054ae:	3304      	adds	r3, #4
    _mutex.unlock();
 80054b0:	4628      	mov	r0, r5
 80054b2:	6123      	str	r3, [r4, #16]
}
 80054b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _mutex.unlock();
 80054b8:	f000 b820 	b.w	80054fc <_ZN14XFMutexDefault6unlockEv>
	::operator delete(__p);
 80054bc:	6960      	ldr	r0, [r4, #20]
 80054be:	f000 f86d 	bl	800559c <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80054c2:	69e3      	ldr	r3, [r4, #28]
 80054c4:	4628      	mov	r0, r5
	_M_first = *__new_node;
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	3304      	adds	r3, #4
	_M_last = _M_first + difference_type(_S_buffer_size());
 80054ca:	f502 7100 	add.w	r1, r2, #512	; 0x200
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80054ce:	e9c4 2204 	strd	r2, r2, [r4, #16]
	_M_node = __new_node;
 80054d2:	e9c4 1306 	strd	r1, r3, [r4, #24]
}
 80054d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _mutex.unlock();
 80054da:	f000 b80f 	b.w	80054fc <_ZN14XFMutexDefault6unlockEv>
 80054de:	bf00      	nop

080054e0 <_ZN14XFMutexDefaultD1Ev>:
{
}

XFMutexDefault::~XFMutexDefault()
{
}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <_ZN14XFMutexDefault7tryLockEl>:
}

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
	return true;	// Always allow
}
 80054e4:	2001      	movs	r0, #1
 80054e6:	4770      	bx	lr

080054e8 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 80054e8:	b510      	push	{r4, lr}
 80054ea:	4604      	mov	r4, r0
}
 80054ec:	2104      	movs	r1, #4
 80054ee:	f000 f83a 	bl	8005566 <_ZdlPvj>
 80054f2:	4620      	mov	r0, r4
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	bf00      	nop

080054f8 <_ZN14XFMutexDefault4lockEv>:
	enterCritical();
 80054f8:	f7ff b9dc 	b.w	80048b4 <_Z13enterCriticalv>

080054fc <_ZN14XFMutexDefault6unlockEv>:
	exitCritical();
 80054fc:	f7ff b9e8 	b.w	80048d0 <_Z12exitCriticalv>

08005500 <_ZN9interface7XFMutex6createEv>:
{
 8005500:	b508      	push	{r3, lr}
    return new XFMutexDefault;
 8005502:	2004      	movs	r0, #4
 8005504:	f000 f831 	bl	800556a <_Znwj>
XFMutexDefault::XFMutexDefault()
 8005508:	4b01      	ldr	r3, [pc, #4]	; (8005510 <_ZN9interface7XFMutex6createEv+0x10>)
 800550a:	6003      	str	r3, [r0, #0]
}
 800550c:	bd08      	pop	{r3, pc}
 800550e:	bf00      	nop
 8005510:	08006e98 	.word	0x08006e98

08005514 <_ZN14XFMutexDefaultC1Ev>:
XFMutexDefault::XFMutexDefault()
 8005514:	4b01      	ldr	r3, [pc, #4]	; (800551c <_ZN14XFMutexDefaultC1Ev+0x8>)
 8005516:	6003      	str	r3, [r0, #0]
}
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	08006e98 	.word	0x08006e98

08005520 <XF_startTimeoutManagerTimer>:
{
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8005524:	b510      	push	{r4, lr}
	bInISR = true;								// Tell critical section we are in an ISR
 8005526:	2301      	movs	r3, #1
 8005528:	4c04      	ldr	r4, [pc, #16]	; (800553c <XF_tick+0x18>)
 800552a:	6023      	str	r3, [r4, #0]
	XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 800552c:	f7ff fddc 	bl	80050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005530:	6803      	ldr	r3, [r0, #0]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	4798      	blx	r3
	bInISR = false;
 8005536:	2300      	movs	r3, #0
 8005538:	6023      	str	r3, [r4, #0]
}
 800553a:	bd10      	pop	{r4, pc}
 800553c:	20000254 	.word	0x20000254

08005540 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 8005540:	b510      	push	{r4, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 8005542:	f7ff fdd1 	bl	80050e8 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005546:	6802      	ldr	r2, [r0, #0]
 8005548:	4904      	ldr	r1, [pc, #16]	; (800555c <XF_tickIntervalInMilliseconds+0x1c>)
 800554a:	68d2      	ldr	r2, [r2, #12]
 800554c:	428a      	cmp	r2, r1
 800554e:	d101      	bne.n	8005554 <XF_tickIntervalInMilliseconds+0x14>
        return _tickInterval;
 8005550:	6840      	ldr	r0, [r0, #4]
}
 8005552:	bd10      	pop	{r4, pc}
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 8005558:	4710      	bx	r2
 800555a:	bf00      	nop
 800555c:	08004e91 	.word	0x08004e91

08005560 <__cxa_pure_virtual>:
 8005560:	b508      	push	{r3, lr}
 8005562:	f000 f829 	bl	80055b8 <_ZSt9terminatev>

08005566 <_ZdlPvj>:
 8005566:	f000 b819 	b.w	800559c <_ZdlPv>

0800556a <_Znwj>:
 800556a:	b510      	push	{r4, lr}
 800556c:	2800      	cmp	r0, #0
 800556e:	bf14      	ite	ne
 8005570:	4604      	movne	r4, r0
 8005572:	2401      	moveq	r4, #1
 8005574:	4620      	mov	r0, r4
 8005576:	f000 f947 	bl	8005808 <malloc>
 800557a:	b930      	cbnz	r0, 800558a <_Znwj+0x20>
 800557c:	f000 f806 	bl	800558c <_ZSt15get_new_handlerv>
 8005580:	b908      	cbnz	r0, 8005586 <_Znwj+0x1c>
 8005582:	f000 f8d9 	bl	8005738 <abort>
 8005586:	4780      	blx	r0
 8005588:	e7f4      	b.n	8005574 <_Znwj+0xa>
 800558a:	bd10      	pop	{r4, pc}

0800558c <_ZSt15get_new_handlerv>:
 800558c:	4b02      	ldr	r3, [pc, #8]	; (8005598 <_ZSt15get_new_handlerv+0xc>)
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	f3bf 8f5b 	dmb	ish
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	200002d8 	.word	0x200002d8

0800559c <_ZdlPv>:
 800559c:	f000 b93c 	b.w	8005818 <free>

080055a0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80055a0:	b508      	push	{r3, lr}
 80055a2:	4780      	blx	r0
 80055a4:	f000 f8c8 	bl	8005738 <abort>

080055a8 <_ZSt13get_terminatev>:
 80055a8:	4b02      	ldr	r3, [pc, #8]	; (80055b4 <_ZSt13get_terminatev+0xc>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	f3bf 8f5b 	dmb	ish
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	2000000c 	.word	0x2000000c

080055b8 <_ZSt9terminatev>:
 80055b8:	b508      	push	{r3, lr}
 80055ba:	f7ff fff5 	bl	80055a8 <_ZSt13get_terminatev>
 80055be:	f7ff ffef 	bl	80055a0 <_ZN10__cxxabiv111__terminateEPFvvE>

080055c2 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80055c2:	684b      	ldr	r3, [r1, #4]
 80055c4:	6043      	str	r3, [r0, #4]
 80055c6:	684b      	ldr	r3, [r1, #4]
 80055c8:	6001      	str	r1, [r0, #0]
 80055ca:	6018      	str	r0, [r3, #0]
 80055cc:	6048      	str	r0, [r1, #4]
 80055ce:	4770      	bx	lr

080055d0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80055d0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	4770      	bx	lr

080055da <_ZSt17__throw_bad_allocv>:
 80055da:	b508      	push	{r3, lr}
 80055dc:	f000 f8ac 	bl	8005738 <abort>

080055e0 <_ZSt19__throw_logic_errorPKc>:
 80055e0:	b508      	push	{r3, lr}
 80055e2:	f000 f8a9 	bl	8005738 <abort>

080055e6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80055e6:	b40f      	push	{r0, r1, r2, r3}
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	f107 0410 	add.w	r4, r7, #16
 80055f2:	f854 5b04 	ldr.w	r5, [r4], #4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7fa fe5a 	bl	80002b0 <strlen>
 80055fc:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8005600:	f023 0307 	bic.w	r3, r3, #7
 8005604:	ebad 0d03 	sub.w	sp, sp, r3
 8005608:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800560c:	4623      	mov	r3, r4
 800560e:	462a      	mov	r2, r5
 8005610:	4668      	mov	r0, sp
 8005612:	607c      	str	r4, [r7, #4]
 8005614:	f000 f850 	bl	80056b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8005618:	f000 f88e 	bl	8005738 <abort>

0800561c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800561c:	b580      	push	{r7, lr}
 800561e:	b09c      	sub	sp, #112	; 0x70
 8005620:	af00      	add	r7, sp, #0
 8005622:	1a0e      	subs	r6, r1, r0
 8005624:	4680      	mov	r8, r0
 8005626:	2269      	movs	r2, #105	; 0x69
 8005628:	490e      	ldr	r1, [pc, #56]	; (8005664 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800562a:	1d38      	adds	r0, r7, #4
 800562c:	f000 f8fc 	bl	8005828 <memcpy>
 8005630:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8005634:	f023 0307 	bic.w	r3, r3, #7
 8005638:	ebad 0d03 	sub.w	sp, sp, r3
 800563c:	466c      	mov	r4, sp
 800563e:	2268      	movs	r2, #104	; 0x68
 8005640:	1d39      	adds	r1, r7, #4
 8005642:	1c75      	adds	r5, r6, #1
 8005644:	4620      	mov	r0, r4
 8005646:	f000 f8ef 	bl	8005828 <memcpy>
 800564a:	4425      	add	r5, r4
 800564c:	4632      	mov	r2, r6
 800564e:	4641      	mov	r1, r8
 8005650:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005654:	f000 f8e8 	bl	8005828 <memcpy>
 8005658:	2300      	movs	r3, #0
 800565a:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ffbe 	bl	80055e0 <_ZSt19__throw_logic_errorPKc>
 8005664:	0800738b 	.word	0x0800738b

08005668 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	af00      	add	r7, sp, #0
 800566c:	b086      	sub	sp, #24
 800566e:	466d      	mov	r5, sp
 8005670:	f105 040c 	add.w	r4, r5, #12
 8005674:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80056b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8005678:	4623      	mov	r3, r4
 800567a:	f04f 0c0a 	mov.w	ip, #10
 800567e:	fbb2 f6fc 	udiv	r6, r2, ip
 8005682:	fb0c 2216 	mls	r2, ip, r6, r2
 8005686:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800568a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800568e:	4632      	mov	r2, r6
 8005690:	2e00      	cmp	r6, #0
 8005692:	d1f4      	bne.n	800567e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8005694:	1ae4      	subs	r4, r4, r3
 8005696:	428c      	cmp	r4, r1
 8005698:	d808      	bhi.n	80056ac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800569a:	f1c4 010c 	rsb	r1, r4, #12
 800569e:	4622      	mov	r2, r4
 80056a0:	4429      	add	r1, r5
 80056a2:	f000 f8c1 	bl	8005828 <memcpy>
 80056a6:	4620      	mov	r0, r4
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ac:	f04f 34ff 	mov.w	r4, #4294967295
 80056b0:	e7f9      	b.n	80056a6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80056b2:	bf00      	nop
 80056b4:	08007380 	.word	0x08007380

080056b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80056b8:	3901      	subs	r1, #1
 80056ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	4606      	mov	r6, r0
 80056c0:	4615      	mov	r5, r2
 80056c2:	1847      	adds	r7, r0, r1
 80056c4:	4604      	mov	r4, r0
 80056c6:	782a      	ldrb	r2, [r5, #0]
 80056c8:	b392      	cbz	r2, 8005730 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 80056ca:	42bc      	cmp	r4, r7
 80056cc:	d22c      	bcs.n	8005728 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80056ce:	2a25      	cmp	r2, #37	; 0x25
 80056d0:	d107      	bne.n	80056e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80056d2:	786a      	ldrb	r2, [r5, #1]
 80056d4:	2a73      	cmp	r2, #115	; 0x73
 80056d6:	d009      	beq.n	80056ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 80056d8:	2a7a      	cmp	r2, #122	; 0x7a
 80056da:	d012      	beq.n	8005702 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 80056dc:	2a25      	cmp	r2, #37	; 0x25
 80056de:	d100      	bne.n	80056e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80056e0:	3501      	adds	r5, #1
 80056e2:	782a      	ldrb	r2, [r5, #0]
 80056e4:	7022      	strb	r2, [r4, #0]
 80056e6:	3501      	adds	r5, #1
 80056e8:	3401      	adds	r4, #1
 80056ea:	e7ec      	b.n	80056c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80056f6:	b1a2      	cbz	r2, 8005722 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 80056f8:	42bc      	cmp	r4, r7
 80056fa:	d015      	beq.n	8005728 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80056fc:	f804 2b01 	strb.w	r2, [r4], #1
 8005700:	e7f7      	b.n	80056f2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8005702:	78aa      	ldrb	r2, [r5, #2]
 8005704:	2a75      	cmp	r2, #117	; 0x75
 8005706:	d1ec      	bne.n	80056e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	1b39      	subs	r1, r7, r4
 800570c:	4620      	mov	r0, r4
 800570e:	f103 0804 	add.w	r8, r3, #4
 8005712:	f7ff ffa9 	bl	8005668 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8005716:	2800      	cmp	r0, #0
 8005718:	dd06      	ble.n	8005728 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800571a:	4404      	add	r4, r0
 800571c:	3503      	adds	r5, #3
 800571e:	4643      	mov	r3, r8
 8005720:	e7d1      	b.n	80056c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005722:	3502      	adds	r5, #2
 8005724:	460b      	mov	r3, r1
 8005726:	e7ce      	b.n	80056c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005728:	4621      	mov	r1, r4
 800572a:	4630      	mov	r0, r6
 800572c:	f7ff ff76 	bl	800561c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8005730:	7022      	strb	r2, [r4, #0]
 8005732:	1ba0      	subs	r0, r4, r6
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005738 <abort>:
 8005738:	b508      	push	{r3, lr}
 800573a:	2006      	movs	r0, #6
 800573c:	f000 fc48 	bl	8005fd0 <raise>
 8005740:	2001      	movs	r0, #1
 8005742:	f7fe fc01 	bl	8003f48 <_exit>
	...

08005748 <__assert_func>:
 8005748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800574a:	461c      	mov	r4, r3
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <__assert_func+0x2c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4605      	mov	r5, r0
 8005752:	68d8      	ldr	r0, [r3, #12]
 8005754:	b152      	cbz	r2, 800576c <__assert_func+0x24>
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <__assert_func+0x30>)
 8005758:	9100      	str	r1, [sp, #0]
 800575a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800575e:	4907      	ldr	r1, [pc, #28]	; (800577c <__assert_func+0x34>)
 8005760:	462b      	mov	r3, r5
 8005762:	4622      	mov	r2, r4
 8005764:	f000 f81a 	bl	800579c <fiprintf>
 8005768:	f7ff ffe6 	bl	8005738 <abort>
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <__assert_func+0x38>)
 800576e:	461a      	mov	r2, r3
 8005770:	e7f2      	b.n	8005758 <__assert_func+0x10>
 8005772:	bf00      	nop
 8005774:	20000010 	.word	0x20000010
 8005778:	080073f4 	.word	0x080073f4
 800577c:	08007401 	.word	0x08007401
 8005780:	0800742f 	.word	0x0800742f

08005784 <atexit>:
 8005784:	2300      	movs	r3, #0
 8005786:	4601      	mov	r1, r0
 8005788:	461a      	mov	r2, r3
 800578a:	4618      	mov	r0, r3
 800578c:	f000 bd1c 	b.w	80061c8 <__register_exitproc>

08005790 <__errno>:
 8005790:	4b01      	ldr	r3, [pc, #4]	; (8005798 <__errno+0x8>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000010 	.word	0x20000010

0800579c <fiprintf>:
 800579c:	b40e      	push	{r1, r2, r3}
 800579e:	b503      	push	{r0, r1, lr}
 80057a0:	4601      	mov	r1, r0
 80057a2:	ab03      	add	r3, sp, #12
 80057a4:	4805      	ldr	r0, [pc, #20]	; (80057bc <fiprintf+0x20>)
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	f000 f939 	bl	8005a24 <_vfiprintf_r>
 80057b2:	b002      	add	sp, #8
 80057b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b8:	b003      	add	sp, #12
 80057ba:	4770      	bx	lr
 80057bc:	20000010 	.word	0x20000010

080057c0 <__libc_init_array>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0d      	ldr	r6, [pc, #52]	; (80057f8 <__libc_init_array+0x38>)
 80057c4:	4c0d      	ldr	r4, [pc, #52]	; (80057fc <__libc_init_array+0x3c>)
 80057c6:	1ba4      	subs	r4, r4, r6
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	2500      	movs	r5, #0
 80057cc:	42a5      	cmp	r5, r4
 80057ce:	d109      	bne.n	80057e4 <__libc_init_array+0x24>
 80057d0:	4e0b      	ldr	r6, [pc, #44]	; (8005800 <__libc_init_array+0x40>)
 80057d2:	4c0c      	ldr	r4, [pc, #48]	; (8005804 <__libc_init_array+0x44>)
 80057d4:	f001 f968 	bl	8006aa8 <_init>
 80057d8:	1ba4      	subs	r4, r4, r6
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	2500      	movs	r5, #0
 80057de:	42a5      	cmp	r5, r4
 80057e0:	d105      	bne.n	80057ee <__libc_init_array+0x2e>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057e8:	4798      	blx	r3
 80057ea:	3501      	adds	r5, #1
 80057ec:	e7ee      	b.n	80057cc <__libc_init_array+0xc>
 80057ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057f2:	4798      	blx	r3
 80057f4:	3501      	adds	r5, #1
 80057f6:	e7f2      	b.n	80057de <__libc_init_array+0x1e>
 80057f8:	080074d0 	.word	0x080074d0
 80057fc:	080074d0 	.word	0x080074d0
 8005800:	080074d0 	.word	0x080074d0
 8005804:	080074d8 	.word	0x080074d8

08005808 <malloc>:
 8005808:	4b02      	ldr	r3, [pc, #8]	; (8005814 <malloc+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f000 b885 	b.w	800591c <_malloc_r>
 8005812:	bf00      	nop
 8005814:	20000010 	.word	0x20000010

08005818 <free>:
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <free+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f000 b82f 	b.w	8005880 <_free_r>
 8005822:	bf00      	nop
 8005824:	20000010 	.word	0x20000010

08005828 <memcpy>:
 8005828:	b510      	push	{r4, lr}
 800582a:	1e43      	subs	r3, r0, #1
 800582c:	440a      	add	r2, r1
 800582e:	4291      	cmp	r1, r2
 8005830:	d100      	bne.n	8005834 <memcpy+0xc>
 8005832:	bd10      	pop	{r4, pc}
 8005834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583c:	e7f7      	b.n	800582e <memcpy+0x6>

0800583e <memmove>:
 800583e:	4288      	cmp	r0, r1
 8005840:	b510      	push	{r4, lr}
 8005842:	eb01 0302 	add.w	r3, r1, r2
 8005846:	d807      	bhi.n	8005858 <memmove+0x1a>
 8005848:	1e42      	subs	r2, r0, #1
 800584a:	4299      	cmp	r1, r3
 800584c:	d00a      	beq.n	8005864 <memmove+0x26>
 800584e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005852:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005856:	e7f8      	b.n	800584a <memmove+0xc>
 8005858:	4283      	cmp	r3, r0
 800585a:	d9f5      	bls.n	8005848 <memmove+0xa>
 800585c:	1881      	adds	r1, r0, r2
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	42d3      	cmn	r3, r2
 8005862:	d100      	bne.n	8005866 <memmove+0x28>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800586a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800586e:	e7f7      	b.n	8005860 <memmove+0x22>

08005870 <memset>:
 8005870:	4402      	add	r2, r0
 8005872:	4603      	mov	r3, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	d100      	bne.n	800587a <memset+0xa>
 8005878:	4770      	bx	lr
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	e7f9      	b.n	8005874 <memset+0x4>

08005880 <_free_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4605      	mov	r5, r0
 8005884:	2900      	cmp	r1, #0
 8005886:	d045      	beq.n	8005914 <_free_r+0x94>
 8005888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588c:	1f0c      	subs	r4, r1, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	bfb8      	it	lt
 8005892:	18e4      	addlt	r4, r4, r3
 8005894:	f000 feda 	bl	800664c <__malloc_lock>
 8005898:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <_free_r+0x98>)
 800589a:	6813      	ldr	r3, [r2, #0]
 800589c:	4610      	mov	r0, r2
 800589e:	b933      	cbnz	r3, 80058ae <_free_r+0x2e>
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	6014      	str	r4, [r2, #0]
 80058a4:	4628      	mov	r0, r5
 80058a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058aa:	f000 bed0 	b.w	800664e <__malloc_unlock>
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	d90c      	bls.n	80058cc <_free_r+0x4c>
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	1862      	adds	r2, r4, r1
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bf04      	itt	eq
 80058ba:	681a      	ldreq	r2, [r3, #0]
 80058bc:	685b      	ldreq	r3, [r3, #4]
 80058be:	6063      	str	r3, [r4, #4]
 80058c0:	bf04      	itt	eq
 80058c2:	1852      	addeq	r2, r2, r1
 80058c4:	6022      	streq	r2, [r4, #0]
 80058c6:	6004      	str	r4, [r0, #0]
 80058c8:	e7ec      	b.n	80058a4 <_free_r+0x24>
 80058ca:	4613      	mov	r3, r2
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	b10a      	cbz	r2, 80058d4 <_free_r+0x54>
 80058d0:	42a2      	cmp	r2, r4
 80058d2:	d9fa      	bls.n	80058ca <_free_r+0x4a>
 80058d4:	6819      	ldr	r1, [r3, #0]
 80058d6:	1858      	adds	r0, r3, r1
 80058d8:	42a0      	cmp	r0, r4
 80058da:	d10b      	bne.n	80058f4 <_free_r+0x74>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	4401      	add	r1, r0
 80058e0:	1858      	adds	r0, r3, r1
 80058e2:	4282      	cmp	r2, r0
 80058e4:	6019      	str	r1, [r3, #0]
 80058e6:	d1dd      	bne.n	80058a4 <_free_r+0x24>
 80058e8:	6810      	ldr	r0, [r2, #0]
 80058ea:	6852      	ldr	r2, [r2, #4]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	4401      	add	r1, r0
 80058f0:	6019      	str	r1, [r3, #0]
 80058f2:	e7d7      	b.n	80058a4 <_free_r+0x24>
 80058f4:	d902      	bls.n	80058fc <_free_r+0x7c>
 80058f6:	230c      	movs	r3, #12
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	e7d3      	b.n	80058a4 <_free_r+0x24>
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	1821      	adds	r1, r4, r0
 8005900:	428a      	cmp	r2, r1
 8005902:	bf04      	itt	eq
 8005904:	6811      	ldreq	r1, [r2, #0]
 8005906:	6852      	ldreq	r2, [r2, #4]
 8005908:	6062      	str	r2, [r4, #4]
 800590a:	bf04      	itt	eq
 800590c:	1809      	addeq	r1, r1, r0
 800590e:	6021      	streq	r1, [r4, #0]
 8005910:	605c      	str	r4, [r3, #4]
 8005912:	e7c7      	b.n	80058a4 <_free_r+0x24>
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	200002dc 	.word	0x200002dc

0800591c <_malloc_r>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	1ccd      	adds	r5, r1, #3
 8005920:	f025 0503 	bic.w	r5, r5, #3
 8005924:	3508      	adds	r5, #8
 8005926:	2d0c      	cmp	r5, #12
 8005928:	bf38      	it	cc
 800592a:	250c      	movcc	r5, #12
 800592c:	2d00      	cmp	r5, #0
 800592e:	4606      	mov	r6, r0
 8005930:	db01      	blt.n	8005936 <_malloc_r+0x1a>
 8005932:	42a9      	cmp	r1, r5
 8005934:	d903      	bls.n	800593e <_malloc_r+0x22>
 8005936:	230c      	movs	r3, #12
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	2000      	movs	r0, #0
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	f000 fe85 	bl	800664c <__malloc_lock>
 8005942:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <_malloc_r+0xac>)
 8005944:	6814      	ldr	r4, [r2, #0]
 8005946:	4621      	mov	r1, r4
 8005948:	b991      	cbnz	r1, 8005970 <_malloc_r+0x54>
 800594a:	4c20      	ldr	r4, [pc, #128]	; (80059cc <_malloc_r+0xb0>)
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	b91b      	cbnz	r3, 8005958 <_malloc_r+0x3c>
 8005950:	4630      	mov	r0, r6
 8005952:	f000 fb05 	bl	8005f60 <_sbrk_r>
 8005956:	6020      	str	r0, [r4, #0]
 8005958:	4629      	mov	r1, r5
 800595a:	4630      	mov	r0, r6
 800595c:	f000 fb00 	bl	8005f60 <_sbrk_r>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d124      	bne.n	80059ae <_malloc_r+0x92>
 8005964:	230c      	movs	r3, #12
 8005966:	6033      	str	r3, [r6, #0]
 8005968:	4630      	mov	r0, r6
 800596a:	f000 fe70 	bl	800664e <__malloc_unlock>
 800596e:	e7e4      	b.n	800593a <_malloc_r+0x1e>
 8005970:	680b      	ldr	r3, [r1, #0]
 8005972:	1b5b      	subs	r3, r3, r5
 8005974:	d418      	bmi.n	80059a8 <_malloc_r+0x8c>
 8005976:	2b0b      	cmp	r3, #11
 8005978:	d90f      	bls.n	800599a <_malloc_r+0x7e>
 800597a:	600b      	str	r3, [r1, #0]
 800597c:	50cd      	str	r5, [r1, r3]
 800597e:	18cc      	adds	r4, r1, r3
 8005980:	4630      	mov	r0, r6
 8005982:	f000 fe64 	bl	800664e <__malloc_unlock>
 8005986:	f104 000b 	add.w	r0, r4, #11
 800598a:	1d23      	adds	r3, r4, #4
 800598c:	f020 0007 	bic.w	r0, r0, #7
 8005990:	1ac3      	subs	r3, r0, r3
 8005992:	d0d3      	beq.n	800593c <_malloc_r+0x20>
 8005994:	425a      	negs	r2, r3
 8005996:	50e2      	str	r2, [r4, r3]
 8005998:	e7d0      	b.n	800593c <_malloc_r+0x20>
 800599a:	428c      	cmp	r4, r1
 800599c:	684b      	ldr	r3, [r1, #4]
 800599e:	bf16      	itet	ne
 80059a0:	6063      	strne	r3, [r4, #4]
 80059a2:	6013      	streq	r3, [r2, #0]
 80059a4:	460c      	movne	r4, r1
 80059a6:	e7eb      	b.n	8005980 <_malloc_r+0x64>
 80059a8:	460c      	mov	r4, r1
 80059aa:	6849      	ldr	r1, [r1, #4]
 80059ac:	e7cc      	b.n	8005948 <_malloc_r+0x2c>
 80059ae:	1cc4      	adds	r4, r0, #3
 80059b0:	f024 0403 	bic.w	r4, r4, #3
 80059b4:	42a0      	cmp	r0, r4
 80059b6:	d005      	beq.n	80059c4 <_malloc_r+0xa8>
 80059b8:	1a21      	subs	r1, r4, r0
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 fad0 	bl	8005f60 <_sbrk_r>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d0cf      	beq.n	8005964 <_malloc_r+0x48>
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	e7db      	b.n	8005980 <_malloc_r+0x64>
 80059c8:	200002dc 	.word	0x200002dc
 80059cc:	200002e0 	.word	0x200002e0

080059d0 <__sfputc_r>:
 80059d0:	6893      	ldr	r3, [r2, #8]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	b410      	push	{r4}
 80059d8:	6093      	str	r3, [r2, #8]
 80059da:	da08      	bge.n	80059ee <__sfputc_r+0x1e>
 80059dc:	6994      	ldr	r4, [r2, #24]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	db01      	blt.n	80059e6 <__sfputc_r+0x16>
 80059e2:	290a      	cmp	r1, #10
 80059e4:	d103      	bne.n	80059ee <__sfputc_r+0x1e>
 80059e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ea:	f000 bb2d 	b.w	8006048 <__swbuf_r>
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	1c58      	adds	r0, r3, #1
 80059f2:	6010      	str	r0, [r2, #0]
 80059f4:	7019      	strb	r1, [r3, #0]
 80059f6:	4608      	mov	r0, r1
 80059f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <__sfputs_r>:
 80059fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a00:	4606      	mov	r6, r0
 8005a02:	460f      	mov	r7, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	18d5      	adds	r5, r2, r3
 8005a08:	42ac      	cmp	r4, r5
 8005a0a:	d101      	bne.n	8005a10 <__sfputs_r+0x12>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e007      	b.n	8005a20 <__sfputs_r+0x22>
 8005a10:	463a      	mov	r2, r7
 8005a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff ffda 	bl	80059d0 <__sfputc_r>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d1f3      	bne.n	8005a08 <__sfputs_r+0xa>
 8005a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a24 <_vfiprintf_r>:
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b09d      	sub	sp, #116	; 0x74
 8005a2c:	4617      	mov	r7, r2
 8005a2e:	461d      	mov	r5, r3
 8005a30:	4606      	mov	r6, r0
 8005a32:	b118      	cbz	r0, 8005a3c <_vfiprintf_r+0x18>
 8005a34:	6983      	ldr	r3, [r0, #24]
 8005a36:	b90b      	cbnz	r3, 8005a3c <_vfiprintf_r+0x18>
 8005a38:	f000 fd1a 	bl	8006470 <__sinit>
 8005a3c:	4b7c      	ldr	r3, [pc, #496]	; (8005c30 <_vfiprintf_r+0x20c>)
 8005a3e:	429c      	cmp	r4, r3
 8005a40:	d158      	bne.n	8005af4 <_vfiprintf_r+0xd0>
 8005a42:	6874      	ldr	r4, [r6, #4]
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	0718      	lsls	r0, r3, #28
 8005a48:	d55e      	bpl.n	8005b08 <_vfiprintf_r+0xe4>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d05b      	beq.n	8005b08 <_vfiprintf_r+0xe4>
 8005a50:	2300      	movs	r3, #0
 8005a52:	9309      	str	r3, [sp, #36]	; 0x24
 8005a54:	2320      	movs	r3, #32
 8005a56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a5a:	2330      	movs	r3, #48	; 0x30
 8005a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a60:	9503      	str	r5, [sp, #12]
 8005a62:	f04f 0b01 	mov.w	fp, #1
 8005a66:	46b8      	mov	r8, r7
 8005a68:	4645      	mov	r5, r8
 8005a6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a6e:	b10b      	cbz	r3, 8005a74 <_vfiprintf_r+0x50>
 8005a70:	2b25      	cmp	r3, #37	; 0x25
 8005a72:	d154      	bne.n	8005b1e <_vfiprintf_r+0xfa>
 8005a74:	ebb8 0a07 	subs.w	sl, r8, r7
 8005a78:	d00b      	beq.n	8005a92 <_vfiprintf_r+0x6e>
 8005a7a:	4653      	mov	r3, sl
 8005a7c:	463a      	mov	r2, r7
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffbc 	bl	80059fe <__sfputs_r>
 8005a86:	3001      	adds	r0, #1
 8005a88:	f000 80c2 	beq.w	8005c10 <_vfiprintf_r+0x1ec>
 8005a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8e:	4453      	add	r3, sl
 8005a90:	9309      	str	r3, [sp, #36]	; 0x24
 8005a92:	f898 3000 	ldrb.w	r3, [r8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80ba 	beq.w	8005c10 <_vfiprintf_r+0x1ec>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	9307      	str	r3, [sp, #28]
 8005aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aae:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab0:	46a8      	mov	r8, r5
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005ab8:	485e      	ldr	r0, [pc, #376]	; (8005c34 <_vfiprintf_r+0x210>)
 8005aba:	f7fa fba9 	bl	8000210 <memchr>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	bb78      	cbnz	r0, 8005b22 <_vfiprintf_r+0xfe>
 8005ac2:	06d9      	lsls	r1, r3, #27
 8005ac4:	bf44      	itt	mi
 8005ac6:	2220      	movmi	r2, #32
 8005ac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005acc:	071a      	lsls	r2, r3, #28
 8005ace:	bf44      	itt	mi
 8005ad0:	222b      	movmi	r2, #43	; 0x2b
 8005ad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ad6:	782a      	ldrb	r2, [r5, #0]
 8005ad8:	2a2a      	cmp	r2, #42	; 0x2a
 8005ada:	d02a      	beq.n	8005b32 <_vfiprintf_r+0x10e>
 8005adc:	9a07      	ldr	r2, [sp, #28]
 8005ade:	46a8      	mov	r8, r5
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	250a      	movs	r5, #10
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aea:	3b30      	subs	r3, #48	; 0x30
 8005aec:	2b09      	cmp	r3, #9
 8005aee:	d969      	bls.n	8005bc4 <_vfiprintf_r+0x1a0>
 8005af0:	b360      	cbz	r0, 8005b4c <_vfiprintf_r+0x128>
 8005af2:	e024      	b.n	8005b3e <_vfiprintf_r+0x11a>
 8005af4:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <_vfiprintf_r+0x214>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d101      	bne.n	8005afe <_vfiprintf_r+0xda>
 8005afa:	68b4      	ldr	r4, [r6, #8]
 8005afc:	e7a2      	b.n	8005a44 <_vfiprintf_r+0x20>
 8005afe:	4b4f      	ldr	r3, [pc, #316]	; (8005c3c <_vfiprintf_r+0x218>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	bf08      	it	eq
 8005b04:	68f4      	ldreq	r4, [r6, #12]
 8005b06:	e79d      	b.n	8005a44 <_vfiprintf_r+0x20>
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f000 faee 	bl	80060ec <__swsetup_r>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d09d      	beq.n	8005a50 <_vfiprintf_r+0x2c>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	b01d      	add	sp, #116	; 0x74
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	46a8      	mov	r8, r5
 8005b20:	e7a2      	b.n	8005a68 <_vfiprintf_r+0x44>
 8005b22:	4a44      	ldr	r2, [pc, #272]	; (8005c34 <_vfiprintf_r+0x210>)
 8005b24:	1a80      	subs	r0, r0, r2
 8005b26:	fa0b f000 	lsl.w	r0, fp, r0
 8005b2a:	4318      	orrs	r0, r3
 8005b2c:	9004      	str	r0, [sp, #16]
 8005b2e:	4645      	mov	r5, r8
 8005b30:	e7be      	b.n	8005ab0 <_vfiprintf_r+0x8c>
 8005b32:	9a03      	ldr	r2, [sp, #12]
 8005b34:	1d11      	adds	r1, r2, #4
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	9103      	str	r1, [sp, #12]
 8005b3a:	2a00      	cmp	r2, #0
 8005b3c:	db01      	blt.n	8005b42 <_vfiprintf_r+0x11e>
 8005b3e:	9207      	str	r2, [sp, #28]
 8005b40:	e004      	b.n	8005b4c <_vfiprintf_r+0x128>
 8005b42:	4252      	negs	r2, r2
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	9207      	str	r2, [sp, #28]
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	f898 3000 	ldrb.w	r3, [r8]
 8005b50:	2b2e      	cmp	r3, #46	; 0x2e
 8005b52:	d10e      	bne.n	8005b72 <_vfiprintf_r+0x14e>
 8005b54:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d138      	bne.n	8005bce <_vfiprintf_r+0x1aa>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfb8      	it	lt
 8005b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b6c:	f108 0802 	add.w	r8, r8, #2
 8005b70:	9305      	str	r3, [sp, #20]
 8005b72:	4d33      	ldr	r5, [pc, #204]	; (8005c40 <_vfiprintf_r+0x21c>)
 8005b74:	f898 1000 	ldrb.w	r1, [r8]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7fa fb48 	bl	8000210 <memchr>
 8005b80:	b140      	cbz	r0, 8005b94 <_vfiprintf_r+0x170>
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	1b40      	subs	r0, r0, r5
 8005b86:	fa03 f000 	lsl.w	r0, r3, r0
 8005b8a:	9b04      	ldr	r3, [sp, #16]
 8005b8c:	4303      	orrs	r3, r0
 8005b8e:	f108 0801 	add.w	r8, r8, #1
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	f898 1000 	ldrb.w	r1, [r8]
 8005b98:	482a      	ldr	r0, [pc, #168]	; (8005c44 <_vfiprintf_r+0x220>)
 8005b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9e:	2206      	movs	r2, #6
 8005ba0:	f108 0701 	add.w	r7, r8, #1
 8005ba4:	f7fa fb34 	bl	8000210 <memchr>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d037      	beq.n	8005c1c <_vfiprintf_r+0x1f8>
 8005bac:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <_vfiprintf_r+0x224>)
 8005bae:	bb1b      	cbnz	r3, 8005bf8 <_vfiprintf_r+0x1d4>
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	3307      	adds	r3, #7
 8005bb4:	f023 0307 	bic.w	r3, r3, #7
 8005bb8:	3308      	adds	r3, #8
 8005bba:	9303      	str	r3, [sp, #12]
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	444b      	add	r3, r9
 8005bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc2:	e750      	b.n	8005a66 <_vfiprintf_r+0x42>
 8005bc4:	fb05 3202 	mla	r2, r5, r2, r3
 8005bc8:	2001      	movs	r0, #1
 8005bca:	4688      	mov	r8, r1
 8005bcc:	e78a      	b.n	8005ae4 <_vfiprintf_r+0xc0>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f108 0801 	add.w	r8, r8, #1
 8005bd4:	9305      	str	r3, [sp, #20]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	250a      	movs	r5, #10
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be0:	3a30      	subs	r2, #48	; 0x30
 8005be2:	2a09      	cmp	r2, #9
 8005be4:	d903      	bls.n	8005bee <_vfiprintf_r+0x1ca>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0c3      	beq.n	8005b72 <_vfiprintf_r+0x14e>
 8005bea:	9105      	str	r1, [sp, #20]
 8005bec:	e7c1      	b.n	8005b72 <_vfiprintf_r+0x14e>
 8005bee:	fb05 2101 	mla	r1, r5, r1, r2
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4680      	mov	r8, r0
 8005bf6:	e7f0      	b.n	8005bda <_vfiprintf_r+0x1b6>
 8005bf8:	ab03      	add	r3, sp, #12
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	4622      	mov	r2, r4
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <_vfiprintf_r+0x228>)
 8005c00:	a904      	add	r1, sp, #16
 8005c02:	4630      	mov	r0, r6
 8005c04:	f3af 8000 	nop.w
 8005c08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c0c:	4681      	mov	r9, r0
 8005c0e:	d1d5      	bne.n	8005bbc <_vfiprintf_r+0x198>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	065b      	lsls	r3, r3, #25
 8005c14:	f53f af7e 	bmi.w	8005b14 <_vfiprintf_r+0xf0>
 8005c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c1a:	e77d      	b.n	8005b18 <_vfiprintf_r+0xf4>
 8005c1c:	ab03      	add	r3, sp, #12
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	4622      	mov	r2, r4
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <_vfiprintf_r+0x228>)
 8005c24:	a904      	add	r1, sp, #16
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f888 	bl	8005d3c <_printf_i>
 8005c2c:	e7ec      	b.n	8005c08 <_vfiprintf_r+0x1e4>
 8005c2e:	bf00      	nop
 8005c30:	08007488 	.word	0x08007488
 8005c34:	08007434 	.word	0x08007434
 8005c38:	080074a8 	.word	0x080074a8
 8005c3c:	08007468 	.word	0x08007468
 8005c40:	0800743a 	.word	0x0800743a
 8005c44:	0800743e 	.word	0x0800743e
 8005c48:	00000000 	.word	0x00000000
 8005c4c:	080059ff 	.word	0x080059ff

08005c50 <_printf_common>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	4691      	mov	r9, r2
 8005c56:	461f      	mov	r7, r3
 8005c58:	688a      	ldr	r2, [r1, #8]
 8005c5a:	690b      	ldr	r3, [r1, #16]
 8005c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c60:	4293      	cmp	r3, r2
 8005c62:	bfb8      	it	lt
 8005c64:	4613      	movlt	r3, r2
 8005c66:	f8c9 3000 	str.w	r3, [r9]
 8005c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c6e:	4606      	mov	r6, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	b112      	cbz	r2, 8005c7a <_printf_common+0x2a>
 8005c74:	3301      	adds	r3, #1
 8005c76:	f8c9 3000 	str.w	r3, [r9]
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	0699      	lsls	r1, r3, #26
 8005c7e:	bf42      	ittt	mi
 8005c80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c84:	3302      	addmi	r3, #2
 8005c86:	f8c9 3000 	strmi.w	r3, [r9]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	f015 0506 	ands.w	r5, r5, #6
 8005c90:	d107      	bne.n	8005ca2 <_printf_common+0x52>
 8005c92:	f104 0a19 	add.w	sl, r4, #25
 8005c96:	68e3      	ldr	r3, [r4, #12]
 8005c98:	f8d9 2000 	ldr.w	r2, [r9]
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	42ab      	cmp	r3, r5
 8005ca0:	dc28      	bgt.n	8005cf4 <_printf_common+0xa4>
 8005ca2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	3300      	adds	r3, #0
 8005caa:	bf18      	it	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	0692      	lsls	r2, r2, #26
 8005cb0:	d42d      	bmi.n	8005d0e <_printf_common+0xbe>
 8005cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	4630      	mov	r0, r6
 8005cba:	47c0      	blx	r8
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d020      	beq.n	8005d02 <_printf_common+0xb2>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	68e5      	ldr	r5, [r4, #12]
 8005cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8005cc8:	f003 0306 	and.w	r3, r3, #6
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	bf08      	it	eq
 8005cd0:	1aad      	subeq	r5, r5, r2
 8005cd2:	68a3      	ldr	r3, [r4, #8]
 8005cd4:	6922      	ldr	r2, [r4, #16]
 8005cd6:	bf0c      	ite	eq
 8005cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cdc:	2500      	movne	r5, #0
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bfc4      	itt	gt
 8005ce2:	1a9b      	subgt	r3, r3, r2
 8005ce4:	18ed      	addgt	r5, r5, r3
 8005ce6:	f04f 0900 	mov.w	r9, #0
 8005cea:	341a      	adds	r4, #26
 8005cec:	454d      	cmp	r5, r9
 8005cee:	d11a      	bne.n	8005d26 <_printf_common+0xd6>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e008      	b.n	8005d06 <_printf_common+0xb6>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4652      	mov	r2, sl
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	47c0      	blx	r8
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d103      	bne.n	8005d0a <_printf_common+0xba>
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	e7c3      	b.n	8005c96 <_printf_common+0x46>
 8005d0e:	18e1      	adds	r1, r4, r3
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	2030      	movs	r0, #48	; 0x30
 8005d14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d18:	4422      	add	r2, r4
 8005d1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d22:	3302      	adds	r3, #2
 8005d24:	e7c5      	b.n	8005cb2 <_printf_common+0x62>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4622      	mov	r2, r4
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	47c0      	blx	r8
 8005d30:	3001      	adds	r0, #1
 8005d32:	d0e6      	beq.n	8005d02 <_printf_common+0xb2>
 8005d34:	f109 0901 	add.w	r9, r9, #1
 8005d38:	e7d8      	b.n	8005cec <_printf_common+0x9c>
	...

08005d3c <_printf_i>:
 8005d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d44:	460c      	mov	r4, r1
 8005d46:	7e09      	ldrb	r1, [r1, #24]
 8005d48:	b085      	sub	sp, #20
 8005d4a:	296e      	cmp	r1, #110	; 0x6e
 8005d4c:	4617      	mov	r7, r2
 8005d4e:	4606      	mov	r6, r0
 8005d50:	4698      	mov	r8, r3
 8005d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d54:	f000 80b3 	beq.w	8005ebe <_printf_i+0x182>
 8005d58:	d822      	bhi.n	8005da0 <_printf_i+0x64>
 8005d5a:	2963      	cmp	r1, #99	; 0x63
 8005d5c:	d036      	beq.n	8005dcc <_printf_i+0x90>
 8005d5e:	d80a      	bhi.n	8005d76 <_printf_i+0x3a>
 8005d60:	2900      	cmp	r1, #0
 8005d62:	f000 80b9 	beq.w	8005ed8 <_printf_i+0x19c>
 8005d66:	2958      	cmp	r1, #88	; 0x58
 8005d68:	f000 8083 	beq.w	8005e72 <_printf_i+0x136>
 8005d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d74:	e032      	b.n	8005ddc <_printf_i+0xa0>
 8005d76:	2964      	cmp	r1, #100	; 0x64
 8005d78:	d001      	beq.n	8005d7e <_printf_i+0x42>
 8005d7a:	2969      	cmp	r1, #105	; 0x69
 8005d7c:	d1f6      	bne.n	8005d6c <_printf_i+0x30>
 8005d7e:	6820      	ldr	r0, [r4, #0]
 8005d80:	6813      	ldr	r3, [r2, #0]
 8005d82:	0605      	lsls	r5, r0, #24
 8005d84:	f103 0104 	add.w	r1, r3, #4
 8005d88:	d52a      	bpl.n	8005de0 <_printf_i+0xa4>
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da03      	bge.n	8005d9a <_printf_i+0x5e>
 8005d92:	222d      	movs	r2, #45	; 0x2d
 8005d94:	425b      	negs	r3, r3
 8005d96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d9a:	486f      	ldr	r0, [pc, #444]	; (8005f58 <_printf_i+0x21c>)
 8005d9c:	220a      	movs	r2, #10
 8005d9e:	e039      	b.n	8005e14 <_printf_i+0xd8>
 8005da0:	2973      	cmp	r1, #115	; 0x73
 8005da2:	f000 809d 	beq.w	8005ee0 <_printf_i+0x1a4>
 8005da6:	d808      	bhi.n	8005dba <_printf_i+0x7e>
 8005da8:	296f      	cmp	r1, #111	; 0x6f
 8005daa:	d020      	beq.n	8005dee <_printf_i+0xb2>
 8005dac:	2970      	cmp	r1, #112	; 0x70
 8005dae:	d1dd      	bne.n	8005d6c <_printf_i+0x30>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	f043 0320 	orr.w	r3, r3, #32
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	e003      	b.n	8005dc2 <_printf_i+0x86>
 8005dba:	2975      	cmp	r1, #117	; 0x75
 8005dbc:	d017      	beq.n	8005dee <_printf_i+0xb2>
 8005dbe:	2978      	cmp	r1, #120	; 0x78
 8005dc0:	d1d4      	bne.n	8005d6c <_printf_i+0x30>
 8005dc2:	2378      	movs	r3, #120	; 0x78
 8005dc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dc8:	4864      	ldr	r0, [pc, #400]	; (8005f5c <_printf_i+0x220>)
 8005dca:	e055      	b.n	8005e78 <_printf_i+0x13c>
 8005dcc:	6813      	ldr	r3, [r2, #0]
 8005dce:	1d19      	adds	r1, r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6011      	str	r1, [r2, #0]
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e08c      	b.n	8005efa <_printf_i+0x1be>
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6011      	str	r1, [r2, #0]
 8005de4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005de8:	bf18      	it	ne
 8005dea:	b21b      	sxthne	r3, r3
 8005dec:	e7cf      	b.n	8005d8e <_printf_i+0x52>
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	6825      	ldr	r5, [r4, #0]
 8005df2:	1d18      	adds	r0, r3, #4
 8005df4:	6010      	str	r0, [r2, #0]
 8005df6:	0628      	lsls	r0, r5, #24
 8005df8:	d501      	bpl.n	8005dfe <_printf_i+0xc2>
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	e002      	b.n	8005e04 <_printf_i+0xc8>
 8005dfe:	0668      	lsls	r0, r5, #25
 8005e00:	d5fb      	bpl.n	8005dfa <_printf_i+0xbe>
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	4854      	ldr	r0, [pc, #336]	; (8005f58 <_printf_i+0x21c>)
 8005e06:	296f      	cmp	r1, #111	; 0x6f
 8005e08:	bf14      	ite	ne
 8005e0a:	220a      	movne	r2, #10
 8005e0c:	2208      	moveq	r2, #8
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e14:	6865      	ldr	r5, [r4, #4]
 8005e16:	60a5      	str	r5, [r4, #8]
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	f2c0 8095 	blt.w	8005f48 <_printf_i+0x20c>
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	f021 0104 	bic.w	r1, r1, #4
 8005e24:	6021      	str	r1, [r4, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13d      	bne.n	8005ea6 <_printf_i+0x16a>
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	f040 808e 	bne.w	8005f4c <_printf_i+0x210>
 8005e30:	4665      	mov	r5, ip
 8005e32:	2a08      	cmp	r2, #8
 8005e34:	d10b      	bne.n	8005e4e <_printf_i+0x112>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	07db      	lsls	r3, r3, #31
 8005e3a:	d508      	bpl.n	8005e4e <_printf_i+0x112>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	6862      	ldr	r2, [r4, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bfde      	ittt	le
 8005e44:	2330      	movle	r3, #48	; 0x30
 8005e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e4e:	ebac 0305 	sub.w	r3, ip, r5
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	f8cd 8000 	str.w	r8, [sp]
 8005e58:	463b      	mov	r3, r7
 8005e5a:	aa03      	add	r2, sp, #12
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7ff fef6 	bl	8005c50 <_printf_common>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d14d      	bne.n	8005f04 <_printf_i+0x1c8>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	b005      	add	sp, #20
 8005e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e72:	4839      	ldr	r0, [pc, #228]	; (8005f58 <_printf_i+0x21c>)
 8005e74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e78:	6813      	ldr	r3, [r2, #0]
 8005e7a:	6821      	ldr	r1, [r4, #0]
 8005e7c:	1d1d      	adds	r5, r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6015      	str	r5, [r2, #0]
 8005e82:	060a      	lsls	r2, r1, #24
 8005e84:	d50b      	bpl.n	8005e9e <_printf_i+0x162>
 8005e86:	07ca      	lsls	r2, r1, #31
 8005e88:	bf44      	itt	mi
 8005e8a:	f041 0120 	orrmi.w	r1, r1, #32
 8005e8e:	6021      	strmi	r1, [r4, #0]
 8005e90:	b91b      	cbnz	r3, 8005e9a <_printf_i+0x15e>
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	f022 0220 	bic.w	r2, r2, #32
 8005e98:	6022      	str	r2, [r4, #0]
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	e7b7      	b.n	8005e0e <_printf_i+0xd2>
 8005e9e:	064d      	lsls	r5, r1, #25
 8005ea0:	bf48      	it	mi
 8005ea2:	b29b      	uxthmi	r3, r3
 8005ea4:	e7ef      	b.n	8005e86 <_printf_i+0x14a>
 8005ea6:	4665      	mov	r5, ip
 8005ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eac:	fb02 3311 	mls	r3, r2, r1, r3
 8005eb0:	5cc3      	ldrb	r3, [r0, r3]
 8005eb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d1f5      	bne.n	8005ea8 <_printf_i+0x16c>
 8005ebc:	e7b9      	b.n	8005e32 <_printf_i+0xf6>
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	6825      	ldr	r5, [r4, #0]
 8005ec2:	6961      	ldr	r1, [r4, #20]
 8005ec4:	1d18      	adds	r0, r3, #4
 8005ec6:	6010      	str	r0, [r2, #0]
 8005ec8:	0628      	lsls	r0, r5, #24
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	d501      	bpl.n	8005ed2 <_printf_i+0x196>
 8005ece:	6019      	str	r1, [r3, #0]
 8005ed0:	e002      	b.n	8005ed8 <_printf_i+0x19c>
 8005ed2:	066a      	lsls	r2, r5, #25
 8005ed4:	d5fb      	bpl.n	8005ece <_printf_i+0x192>
 8005ed6:	8019      	strh	r1, [r3, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	4665      	mov	r5, ip
 8005ede:	e7b9      	b.n	8005e54 <_printf_i+0x118>
 8005ee0:	6813      	ldr	r3, [r2, #0]
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	6011      	str	r1, [r2, #0]
 8005ee6:	681d      	ldr	r5, [r3, #0]
 8005ee8:	6862      	ldr	r2, [r4, #4]
 8005eea:	2100      	movs	r1, #0
 8005eec:	4628      	mov	r0, r5
 8005eee:	f7fa f98f 	bl	8000210 <memchr>
 8005ef2:	b108      	cbz	r0, 8005ef8 <_printf_i+0x1bc>
 8005ef4:	1b40      	subs	r0, r0, r5
 8005ef6:	6060      	str	r0, [r4, #4]
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	2300      	movs	r3, #0
 8005efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f02:	e7a7      	b.n	8005e54 <_printf_i+0x118>
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	462a      	mov	r2, r5
 8005f08:	4639      	mov	r1, r7
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	47c0      	blx	r8
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d0aa      	beq.n	8005e68 <_printf_i+0x12c>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	079b      	lsls	r3, r3, #30
 8005f16:	d413      	bmi.n	8005f40 <_printf_i+0x204>
 8005f18:	68e0      	ldr	r0, [r4, #12]
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	4298      	cmp	r0, r3
 8005f1e:	bfb8      	it	lt
 8005f20:	4618      	movlt	r0, r3
 8005f22:	e7a3      	b.n	8005e6c <_printf_i+0x130>
 8005f24:	2301      	movs	r3, #1
 8005f26:	464a      	mov	r2, r9
 8005f28:	4639      	mov	r1, r7
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	47c0      	blx	r8
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d09a      	beq.n	8005e68 <_printf_i+0x12c>
 8005f32:	3501      	adds	r5, #1
 8005f34:	68e3      	ldr	r3, [r4, #12]
 8005f36:	9a03      	ldr	r2, [sp, #12]
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	42ab      	cmp	r3, r5
 8005f3c:	dcf2      	bgt.n	8005f24 <_printf_i+0x1e8>
 8005f3e:	e7eb      	b.n	8005f18 <_printf_i+0x1dc>
 8005f40:	2500      	movs	r5, #0
 8005f42:	f104 0919 	add.w	r9, r4, #25
 8005f46:	e7f5      	b.n	8005f34 <_printf_i+0x1f8>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ac      	bne.n	8005ea6 <_printf_i+0x16a>
 8005f4c:	7803      	ldrb	r3, [r0, #0]
 8005f4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f56:	e76c      	b.n	8005e32 <_printf_i+0xf6>
 8005f58:	08007445 	.word	0x08007445
 8005f5c:	08007456 	.word	0x08007456

08005f60 <_sbrk_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4c06      	ldr	r4, [pc, #24]	; (8005f7c <_sbrk_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4605      	mov	r5, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	f7fe f80e 	bl	8003f8c <_sbrk>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_sbrk_r+0x1a>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_sbrk_r+0x1a>
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	200007b8 	.word	0x200007b8

08005f80 <_raise_r>:
 8005f80:	291f      	cmp	r1, #31
 8005f82:	b538      	push	{r3, r4, r5, lr}
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	d904      	bls.n	8005f94 <_raise_r+0x14>
 8005f8a:	2316      	movs	r3, #22
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f96:	b112      	cbz	r2, 8005f9e <_raise_r+0x1e>
 8005f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f9c:	b94b      	cbnz	r3, 8005fb2 <_raise_r+0x32>
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f830 	bl	8006004 <_getpid_r>
 8005fa4:	462a      	mov	r2, r5
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fae:	f000 b817 	b.w	8005fe0 <_kill_r>
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d00a      	beq.n	8005fcc <_raise_r+0x4c>
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	d103      	bne.n	8005fc2 <_raise_r+0x42>
 8005fba:	2316      	movs	r3, #22
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e7e7      	b.n	8005f92 <_raise_r+0x12>
 8005fc2:	2400      	movs	r4, #0
 8005fc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fc8:	4628      	mov	r0, r5
 8005fca:	4798      	blx	r3
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e7e0      	b.n	8005f92 <_raise_r+0x12>

08005fd0 <raise>:
 8005fd0:	4b02      	ldr	r3, [pc, #8]	; (8005fdc <raise+0xc>)
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	f7ff bfd3 	b.w	8005f80 <_raise_r>
 8005fda:	bf00      	nop
 8005fdc:	20000010 	.word	0x20000010

08005fe0 <_kill_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4c07      	ldr	r4, [pc, #28]	; (8006000 <_kill_r+0x20>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	f7fd ffa3 	bl	8003f38 <_kill>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d102      	bne.n	8005ffc <_kill_r+0x1c>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	b103      	cbz	r3, 8005ffc <_kill_r+0x1c>
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	200007b8 	.word	0x200007b8

08006004 <_getpid_r>:
 8006004:	f7fd bf96 	b.w	8003f34 <_getpid>

08006008 <_vsiprintf_r>:
 8006008:	b500      	push	{lr}
 800600a:	b09b      	sub	sp, #108	; 0x6c
 800600c:	9100      	str	r1, [sp, #0]
 800600e:	9104      	str	r1, [sp, #16]
 8006010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006014:	9105      	str	r1, [sp, #20]
 8006016:	9102      	str	r1, [sp, #8]
 8006018:	4905      	ldr	r1, [pc, #20]	; (8006030 <_vsiprintf_r+0x28>)
 800601a:	9103      	str	r1, [sp, #12]
 800601c:	4669      	mov	r1, sp
 800601e:	f000 fb97 	bl	8006750 <_svfiprintf_r>
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	b01b      	add	sp, #108	; 0x6c
 800602a:	f85d fb04 	ldr.w	pc, [sp], #4
 800602e:	bf00      	nop
 8006030:	ffff0208 	.word	0xffff0208

08006034 <vsiprintf>:
 8006034:	4613      	mov	r3, r2
 8006036:	460a      	mov	r2, r1
 8006038:	4601      	mov	r1, r0
 800603a:	4802      	ldr	r0, [pc, #8]	; (8006044 <vsiprintf+0x10>)
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f7ff bfe3 	b.w	8006008 <_vsiprintf_r>
 8006042:	bf00      	nop
 8006044:	20000010 	.word	0x20000010

08006048 <__swbuf_r>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	460e      	mov	r6, r1
 800604c:	4614      	mov	r4, r2
 800604e:	4605      	mov	r5, r0
 8006050:	b118      	cbz	r0, 800605a <__swbuf_r+0x12>
 8006052:	6983      	ldr	r3, [r0, #24]
 8006054:	b90b      	cbnz	r3, 800605a <__swbuf_r+0x12>
 8006056:	f000 fa0b 	bl	8006470 <__sinit>
 800605a:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <__swbuf_r+0x98>)
 800605c:	429c      	cmp	r4, r3
 800605e:	d12a      	bne.n	80060b6 <__swbuf_r+0x6e>
 8006060:	686c      	ldr	r4, [r5, #4]
 8006062:	69a3      	ldr	r3, [r4, #24]
 8006064:	60a3      	str	r3, [r4, #8]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	071a      	lsls	r2, r3, #28
 800606a:	d52e      	bpl.n	80060ca <__swbuf_r+0x82>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	b363      	cbz	r3, 80060ca <__swbuf_r+0x82>
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	6963      	ldr	r3, [r4, #20]
 8006078:	b2f6      	uxtb	r6, r6
 800607a:	4283      	cmp	r3, r0
 800607c:	4637      	mov	r7, r6
 800607e:	dc04      	bgt.n	800608a <__swbuf_r+0x42>
 8006080:	4621      	mov	r1, r4
 8006082:	4628      	mov	r0, r5
 8006084:	f000 f98a 	bl	800639c <_fflush_r>
 8006088:	bb28      	cbnz	r0, 80060d6 <__swbuf_r+0x8e>
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	3b01      	subs	r3, #1
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	701e      	strb	r6, [r3, #0]
 8006098:	6963      	ldr	r3, [r4, #20]
 800609a:	3001      	adds	r0, #1
 800609c:	4283      	cmp	r3, r0
 800609e:	d004      	beq.n	80060aa <__swbuf_r+0x62>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	07db      	lsls	r3, r3, #31
 80060a4:	d519      	bpl.n	80060da <__swbuf_r+0x92>
 80060a6:	2e0a      	cmp	r6, #10
 80060a8:	d117      	bne.n	80060da <__swbuf_r+0x92>
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 f975 	bl	800639c <_fflush_r>
 80060b2:	b190      	cbz	r0, 80060da <__swbuf_r+0x92>
 80060b4:	e00f      	b.n	80060d6 <__swbuf_r+0x8e>
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <__swbuf_r+0x9c>)
 80060b8:	429c      	cmp	r4, r3
 80060ba:	d101      	bne.n	80060c0 <__swbuf_r+0x78>
 80060bc:	68ac      	ldr	r4, [r5, #8]
 80060be:	e7d0      	b.n	8006062 <__swbuf_r+0x1a>
 80060c0:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <__swbuf_r+0xa0>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	bf08      	it	eq
 80060c6:	68ec      	ldreq	r4, [r5, #12]
 80060c8:	e7cb      	b.n	8006062 <__swbuf_r+0x1a>
 80060ca:	4621      	mov	r1, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f80d 	bl	80060ec <__swsetup_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0cc      	beq.n	8006070 <__swbuf_r+0x28>
 80060d6:	f04f 37ff 	mov.w	r7, #4294967295
 80060da:	4638      	mov	r0, r7
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060de:	bf00      	nop
 80060e0:	08007488 	.word	0x08007488
 80060e4:	080074a8 	.word	0x080074a8
 80060e8:	08007468 	.word	0x08007468

080060ec <__swsetup_r>:
 80060ec:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <__swsetup_r+0xcc>)
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	4606      	mov	r6, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	b125      	cbz	r5, 8006102 <__swsetup_r+0x16>
 80060f8:	69ab      	ldr	r3, [r5, #24]
 80060fa:	b913      	cbnz	r3, 8006102 <__swsetup_r+0x16>
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 f9b7 	bl	8006470 <__sinit>
 8006102:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <__swsetup_r+0xd0>)
 8006104:	429c      	cmp	r4, r3
 8006106:	d10f      	bne.n	8006128 <__swsetup_r+0x3c>
 8006108:	686c      	ldr	r4, [r5, #4]
 800610a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800610e:	b29a      	uxth	r2, r3
 8006110:	0715      	lsls	r5, r2, #28
 8006112:	d42c      	bmi.n	800616e <__swsetup_r+0x82>
 8006114:	06d0      	lsls	r0, r2, #27
 8006116:	d411      	bmi.n	800613c <__swsetup_r+0x50>
 8006118:	2209      	movs	r2, #9
 800611a:	6032      	str	r2, [r6, #0]
 800611c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295
 8006126:	e03e      	b.n	80061a6 <__swsetup_r+0xba>
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <__swsetup_r+0xd4>)
 800612a:	429c      	cmp	r4, r3
 800612c:	d101      	bne.n	8006132 <__swsetup_r+0x46>
 800612e:	68ac      	ldr	r4, [r5, #8]
 8006130:	e7eb      	b.n	800610a <__swsetup_r+0x1e>
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <__swsetup_r+0xd8>)
 8006134:	429c      	cmp	r4, r3
 8006136:	bf08      	it	eq
 8006138:	68ec      	ldreq	r4, [r5, #12]
 800613a:	e7e6      	b.n	800610a <__swsetup_r+0x1e>
 800613c:	0751      	lsls	r1, r2, #29
 800613e:	d512      	bpl.n	8006166 <__swsetup_r+0x7a>
 8006140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006142:	b141      	cbz	r1, 8006156 <__swsetup_r+0x6a>
 8006144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006148:	4299      	cmp	r1, r3
 800614a:	d002      	beq.n	8006152 <__swsetup_r+0x66>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff fb97 	bl	8005880 <_free_r>
 8006152:	2300      	movs	r3, #0
 8006154:	6363      	str	r3, [r4, #52]	; 0x34
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800615c:	81a3      	strh	r3, [r4, #12]
 800615e:	2300      	movs	r3, #0
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f043 0308 	orr.w	r3, r3, #8
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	b94b      	cbnz	r3, 8006186 <__swsetup_r+0x9a>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617c:	d003      	beq.n	8006186 <__swsetup_r+0x9a>
 800617e:	4621      	mov	r1, r4
 8006180:	4630      	mov	r0, r6
 8006182:	f000 fa23 	bl	80065cc <__smakebuf_r>
 8006186:	89a2      	ldrh	r2, [r4, #12]
 8006188:	f012 0301 	ands.w	r3, r2, #1
 800618c:	d00c      	beq.n	80061a8 <__swsetup_r+0xbc>
 800618e:	2300      	movs	r3, #0
 8006190:	60a3      	str	r3, [r4, #8]
 8006192:	6963      	ldr	r3, [r4, #20]
 8006194:	425b      	negs	r3, r3
 8006196:	61a3      	str	r3, [r4, #24]
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	b953      	cbnz	r3, 80061b2 <__swsetup_r+0xc6>
 800619c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80061a4:	d1ba      	bne.n	800611c <__swsetup_r+0x30>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	0792      	lsls	r2, r2, #30
 80061aa:	bf58      	it	pl
 80061ac:	6963      	ldrpl	r3, [r4, #20]
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	e7f2      	b.n	8006198 <__swsetup_r+0xac>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e7f7      	b.n	80061a6 <__swsetup_r+0xba>
 80061b6:	bf00      	nop
 80061b8:	20000010 	.word	0x20000010
 80061bc:	08007488 	.word	0x08007488
 80061c0:	080074a8 	.word	0x080074a8
 80061c4:	08007468 	.word	0x08007468

080061c8 <__register_exitproc>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	4d2c      	ldr	r5, [pc, #176]	; (8006280 <__register_exitproc+0xb8>)
 80061ce:	682c      	ldr	r4, [r5, #0]
 80061d0:	4607      	mov	r7, r0
 80061d2:	460e      	mov	r6, r1
 80061d4:	4691      	mov	r9, r2
 80061d6:	4698      	mov	r8, r3
 80061d8:	b934      	cbnz	r4, 80061e8 <__register_exitproc+0x20>
 80061da:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <__register_exitproc+0xbc>)
 80061dc:	4c2a      	ldr	r4, [pc, #168]	; (8006288 <__register_exitproc+0xc0>)
 80061de:	602c      	str	r4, [r5, #0]
 80061e0:	b113      	cbz	r3, 80061e8 <__register_exitproc+0x20>
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	2b1f      	cmp	r3, #31
 80061ec:	dd3d      	ble.n	800626a <__register_exitproc+0xa2>
 80061ee:	4b27      	ldr	r3, [pc, #156]	; (800628c <__register_exitproc+0xc4>)
 80061f0:	b91b      	cbnz	r3, 80061fa <__register_exitproc+0x32>
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fa:	208c      	movs	r0, #140	; 0x8c
 80061fc:	f7ff fb04 	bl	8005808 <malloc>
 8006200:	4604      	mov	r4, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d0f5      	beq.n	80061f2 <__register_exitproc+0x2a>
 8006206:	2300      	movs	r3, #0
 8006208:	682a      	ldr	r2, [r5, #0]
 800620a:	6002      	str	r2, [r0, #0]
 800620c:	6043      	str	r3, [r0, #4]
 800620e:	6028      	str	r0, [r5, #0]
 8006210:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8006214:	b30f      	cbz	r7, 800625a <__register_exitproc+0x92>
 8006216:	f44f 7084 	mov.w	r0, #264	; 0x108
 800621a:	f7ff faf5 	bl	8005808 <malloc>
 800621e:	2800      	cmp	r0, #0
 8006220:	d0e7      	beq.n	80061f2 <__register_exitproc+0x2a>
 8006222:	2300      	movs	r3, #0
 8006224:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8006228:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800622c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8006230:	6862      	ldr	r2, [r4, #4]
 8006232:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8006236:	2301      	movs	r3, #1
 8006238:	4093      	lsls	r3, r2
 800623a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800623e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8006242:	431a      	orrs	r2, r3
 8006244:	2f02      	cmp	r7, #2
 8006246:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800624a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800624e:	bf02      	ittt	eq
 8006250:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8006254:	4313      	orreq	r3, r2
 8006256:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	3302      	adds	r3, #2
 8006260:	6062      	str	r2, [r4, #4]
 8006262:	2000      	movs	r0, #0
 8006264:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8006268:	e7c5      	b.n	80061f6 <__register_exitproc+0x2e>
 800626a:	2f00      	cmp	r7, #0
 800626c:	d0f5      	beq.n	800625a <__register_exitproc+0x92>
 800626e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8006272:	2800      	cmp	r0, #0
 8006274:	d1dc      	bne.n	8006230 <__register_exitproc+0x68>
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <__register_exitproc+0xc4>)
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ba      	beq.n	80061f2 <__register_exitproc+0x2a>
 800627c:	e7cb      	b.n	8006216 <__register_exitproc+0x4e>
 800627e:	bf00      	nop
 8006280:	20000370 	.word	0x20000370
 8006284:	00000000 	.word	0x00000000
 8006288:	200002e4 	.word	0x200002e4
 800628c:	08005809 	.word	0x08005809

08006290 <__sflush_r>:
 8006290:	898a      	ldrh	r2, [r1, #12]
 8006292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006296:	4605      	mov	r5, r0
 8006298:	0710      	lsls	r0, r2, #28
 800629a:	460c      	mov	r4, r1
 800629c:	d458      	bmi.n	8006350 <__sflush_r+0xc0>
 800629e:	684b      	ldr	r3, [r1, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dc05      	bgt.n	80062b0 <__sflush_r+0x20>
 80062a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dc02      	bgt.n	80062b0 <__sflush_r+0x20>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d0f9      	beq.n	80062aa <__sflush_r+0x1a>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062bc:	682f      	ldr	r7, [r5, #0]
 80062be:	6a21      	ldr	r1, [r4, #32]
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	d032      	beq.n	800632a <__sflush_r+0x9a>
 80062c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	075a      	lsls	r2, r3, #29
 80062ca:	d505      	bpl.n	80062d8 <__sflush_r+0x48>
 80062cc:	6863      	ldr	r3, [r4, #4]
 80062ce:	1ac0      	subs	r0, r0, r3
 80062d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062d2:	b10b      	cbz	r3, 80062d8 <__sflush_r+0x48>
 80062d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062d6:	1ac0      	subs	r0, r0, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	4602      	mov	r2, r0
 80062dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062de:	6a21      	ldr	r1, [r4, #32]
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b0      	blx	r6
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	d106      	bne.n	80062f8 <__sflush_r+0x68>
 80062ea:	6829      	ldr	r1, [r5, #0]
 80062ec:	291d      	cmp	r1, #29
 80062ee:	d848      	bhi.n	8006382 <__sflush_r+0xf2>
 80062f0:	4a29      	ldr	r2, [pc, #164]	; (8006398 <__sflush_r+0x108>)
 80062f2:	40ca      	lsrs	r2, r1
 80062f4:	07d6      	lsls	r6, r2, #31
 80062f6:	d544      	bpl.n	8006382 <__sflush_r+0xf2>
 80062f8:	2200      	movs	r2, #0
 80062fa:	6062      	str	r2, [r4, #4]
 80062fc:	04d9      	lsls	r1, r3, #19
 80062fe:	6922      	ldr	r2, [r4, #16]
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	d504      	bpl.n	800630e <__sflush_r+0x7e>
 8006304:	1c42      	adds	r2, r0, #1
 8006306:	d101      	bne.n	800630c <__sflush_r+0x7c>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b903      	cbnz	r3, 800630e <__sflush_r+0x7e>
 800630c:	6560      	str	r0, [r4, #84]	; 0x54
 800630e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006310:	602f      	str	r7, [r5, #0]
 8006312:	2900      	cmp	r1, #0
 8006314:	d0c9      	beq.n	80062aa <__sflush_r+0x1a>
 8006316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800631a:	4299      	cmp	r1, r3
 800631c:	d002      	beq.n	8006324 <__sflush_r+0x94>
 800631e:	4628      	mov	r0, r5
 8006320:	f7ff faae 	bl	8005880 <_free_r>
 8006324:	2000      	movs	r0, #0
 8006326:	6360      	str	r0, [r4, #52]	; 0x34
 8006328:	e7c0      	b.n	80062ac <__sflush_r+0x1c>
 800632a:	2301      	movs	r3, #1
 800632c:	4628      	mov	r0, r5
 800632e:	47b0      	blx	r6
 8006330:	1c41      	adds	r1, r0, #1
 8006332:	d1c8      	bne.n	80062c6 <__sflush_r+0x36>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0c5      	beq.n	80062c6 <__sflush_r+0x36>
 800633a:	2b1d      	cmp	r3, #29
 800633c:	d001      	beq.n	8006342 <__sflush_r+0xb2>
 800633e:	2b16      	cmp	r3, #22
 8006340:	d101      	bne.n	8006346 <__sflush_r+0xb6>
 8006342:	602f      	str	r7, [r5, #0]
 8006344:	e7b1      	b.n	80062aa <__sflush_r+0x1a>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	e7ad      	b.n	80062ac <__sflush_r+0x1c>
 8006350:	690f      	ldr	r7, [r1, #16]
 8006352:	2f00      	cmp	r7, #0
 8006354:	d0a9      	beq.n	80062aa <__sflush_r+0x1a>
 8006356:	0793      	lsls	r3, r2, #30
 8006358:	680e      	ldr	r6, [r1, #0]
 800635a:	bf08      	it	eq
 800635c:	694b      	ldreq	r3, [r1, #20]
 800635e:	600f      	str	r7, [r1, #0]
 8006360:	bf18      	it	ne
 8006362:	2300      	movne	r3, #0
 8006364:	eba6 0807 	sub.w	r8, r6, r7
 8006368:	608b      	str	r3, [r1, #8]
 800636a:	f1b8 0f00 	cmp.w	r8, #0
 800636e:	dd9c      	ble.n	80062aa <__sflush_r+0x1a>
 8006370:	4643      	mov	r3, r8
 8006372:	463a      	mov	r2, r7
 8006374:	6a21      	ldr	r1, [r4, #32]
 8006376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006378:	4628      	mov	r0, r5
 800637a:	47b0      	blx	r6
 800637c:	2800      	cmp	r0, #0
 800637e:	dc06      	bgt.n	800638e <__sflush_r+0xfe>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e78e      	b.n	80062ac <__sflush_r+0x1c>
 800638e:	4407      	add	r7, r0
 8006390:	eba8 0800 	sub.w	r8, r8, r0
 8006394:	e7e9      	b.n	800636a <__sflush_r+0xda>
 8006396:	bf00      	nop
 8006398:	20400001 	.word	0x20400001

0800639c <_fflush_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	690b      	ldr	r3, [r1, #16]
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	b1db      	cbz	r3, 80063de <_fflush_r+0x42>
 80063a6:	b118      	cbz	r0, 80063b0 <_fflush_r+0x14>
 80063a8:	6983      	ldr	r3, [r0, #24]
 80063aa:	b90b      	cbnz	r3, 80063b0 <_fflush_r+0x14>
 80063ac:	f000 f860 	bl	8006470 <__sinit>
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <_fflush_r+0x48>)
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d109      	bne.n	80063ca <_fflush_r+0x2e>
 80063b6:	686c      	ldr	r4, [r5, #4]
 80063b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063bc:	b17b      	cbz	r3, 80063de <_fflush_r+0x42>
 80063be:	4621      	mov	r1, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c6:	f7ff bf63 	b.w	8006290 <__sflush_r>
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <_fflush_r+0x4c>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d101      	bne.n	80063d4 <_fflush_r+0x38>
 80063d0:	68ac      	ldr	r4, [r5, #8]
 80063d2:	e7f1      	b.n	80063b8 <_fflush_r+0x1c>
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <_fflush_r+0x50>)
 80063d6:	429c      	cmp	r4, r3
 80063d8:	bf08      	it	eq
 80063da:	68ec      	ldreq	r4, [r5, #12]
 80063dc:	e7ec      	b.n	80063b8 <_fflush_r+0x1c>
 80063de:	2000      	movs	r0, #0
 80063e0:	bd38      	pop	{r3, r4, r5, pc}
 80063e2:	bf00      	nop
 80063e4:	08007488 	.word	0x08007488
 80063e8:	080074a8 	.word	0x080074a8
 80063ec:	08007468 	.word	0x08007468

080063f0 <std>:
 80063f0:	2300      	movs	r3, #0
 80063f2:	b510      	push	{r4, lr}
 80063f4:	4604      	mov	r4, r0
 80063f6:	e9c0 3300 	strd	r3, r3, [r0]
 80063fa:	6083      	str	r3, [r0, #8]
 80063fc:	8181      	strh	r1, [r0, #12]
 80063fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006400:	81c2      	strh	r2, [r0, #14]
 8006402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006406:	6183      	str	r3, [r0, #24]
 8006408:	4619      	mov	r1, r3
 800640a:	2208      	movs	r2, #8
 800640c:	305c      	adds	r0, #92	; 0x5c
 800640e:	f7ff fa2f 	bl	8005870 <memset>
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <std+0x38>)
 8006414:	6263      	str	r3, [r4, #36]	; 0x24
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <std+0x3c>)
 8006418:	62a3      	str	r3, [r4, #40]	; 0x28
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <std+0x40>)
 800641c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800641e:	4b05      	ldr	r3, [pc, #20]	; (8006434 <std+0x44>)
 8006420:	6224      	str	r4, [r4, #32]
 8006422:	6323      	str	r3, [r4, #48]	; 0x30
 8006424:	bd10      	pop	{r4, pc}
 8006426:	bf00      	nop
 8006428:	08006941 	.word	0x08006941
 800642c:	08006963 	.word	0x08006963
 8006430:	0800699b 	.word	0x0800699b
 8006434:	080069bf 	.word	0x080069bf

08006438 <_cleanup_r>:
 8006438:	4901      	ldr	r1, [pc, #4]	; (8006440 <_cleanup_r+0x8>)
 800643a:	f000 b885 	b.w	8006548 <_fwalk_reent>
 800643e:	bf00      	nop
 8006440:	0800639d 	.word	0x0800639d

08006444 <__sfmoreglue>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	1e4a      	subs	r2, r1, #1
 8006448:	2568      	movs	r5, #104	; 0x68
 800644a:	4355      	muls	r5, r2
 800644c:	460e      	mov	r6, r1
 800644e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006452:	f7ff fa63 	bl	800591c <_malloc_r>
 8006456:	4604      	mov	r4, r0
 8006458:	b140      	cbz	r0, 800646c <__sfmoreglue+0x28>
 800645a:	2100      	movs	r1, #0
 800645c:	e9c0 1600 	strd	r1, r6, [r0]
 8006460:	300c      	adds	r0, #12
 8006462:	60a0      	str	r0, [r4, #8]
 8006464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006468:	f7ff fa02 	bl	8005870 <memset>
 800646c:	4620      	mov	r0, r4
 800646e:	bd70      	pop	{r4, r5, r6, pc}

08006470 <__sinit>:
 8006470:	6983      	ldr	r3, [r0, #24]
 8006472:	b510      	push	{r4, lr}
 8006474:	4604      	mov	r4, r0
 8006476:	bb33      	cbnz	r3, 80064c6 <__sinit+0x56>
 8006478:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800647c:	6503      	str	r3, [r0, #80]	; 0x50
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <__sinit+0x58>)
 8006480:	4a12      	ldr	r2, [pc, #72]	; (80064cc <__sinit+0x5c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6282      	str	r2, [r0, #40]	; 0x28
 8006486:	4298      	cmp	r0, r3
 8006488:	bf04      	itt	eq
 800648a:	2301      	moveq	r3, #1
 800648c:	6183      	streq	r3, [r0, #24]
 800648e:	f000 f81f 	bl	80064d0 <__sfp>
 8006492:	6060      	str	r0, [r4, #4]
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f81b 	bl	80064d0 <__sfp>
 800649a:	60a0      	str	r0, [r4, #8]
 800649c:	4620      	mov	r0, r4
 800649e:	f000 f817 	bl	80064d0 <__sfp>
 80064a2:	2200      	movs	r2, #0
 80064a4:	60e0      	str	r0, [r4, #12]
 80064a6:	2104      	movs	r1, #4
 80064a8:	6860      	ldr	r0, [r4, #4]
 80064aa:	f7ff ffa1 	bl	80063f0 <std>
 80064ae:	2201      	movs	r2, #1
 80064b0:	2109      	movs	r1, #9
 80064b2:	68a0      	ldr	r0, [r4, #8]
 80064b4:	f7ff ff9c 	bl	80063f0 <std>
 80064b8:	2202      	movs	r2, #2
 80064ba:	2112      	movs	r1, #18
 80064bc:	68e0      	ldr	r0, [r4, #12]
 80064be:	f7ff ff97 	bl	80063f0 <std>
 80064c2:	2301      	movs	r3, #1
 80064c4:	61a3      	str	r3, [r4, #24]
 80064c6:	bd10      	pop	{r4, pc}
 80064c8:	08007430 	.word	0x08007430
 80064cc:	08006439 	.word	0x08006439

080064d0 <__sfp>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <__sfp+0x70>)
 80064d4:	681e      	ldr	r6, [r3, #0]
 80064d6:	69b3      	ldr	r3, [r6, #24]
 80064d8:	4607      	mov	r7, r0
 80064da:	b913      	cbnz	r3, 80064e2 <__sfp+0x12>
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff ffc7 	bl	8006470 <__sinit>
 80064e2:	3648      	adds	r6, #72	; 0x48
 80064e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	d503      	bpl.n	80064f4 <__sfp+0x24>
 80064ec:	6833      	ldr	r3, [r6, #0]
 80064ee:	b133      	cbz	r3, 80064fe <__sfp+0x2e>
 80064f0:	6836      	ldr	r6, [r6, #0]
 80064f2:	e7f7      	b.n	80064e4 <__sfp+0x14>
 80064f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064f8:	b16d      	cbz	r5, 8006516 <__sfp+0x46>
 80064fa:	3468      	adds	r4, #104	; 0x68
 80064fc:	e7f4      	b.n	80064e8 <__sfp+0x18>
 80064fe:	2104      	movs	r1, #4
 8006500:	4638      	mov	r0, r7
 8006502:	f7ff ff9f 	bl	8006444 <__sfmoreglue>
 8006506:	6030      	str	r0, [r6, #0]
 8006508:	2800      	cmp	r0, #0
 800650a:	d1f1      	bne.n	80064f0 <__sfp+0x20>
 800650c:	230c      	movs	r3, #12
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4604      	mov	r4, r0
 8006512:	4620      	mov	r0, r4
 8006514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <__sfp+0x74>)
 8006518:	6665      	str	r5, [r4, #100]	; 0x64
 800651a:	e9c4 5500 	strd	r5, r5, [r4]
 800651e:	60a5      	str	r5, [r4, #8]
 8006520:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006524:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006528:	2208      	movs	r2, #8
 800652a:	4629      	mov	r1, r5
 800652c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006530:	f7ff f99e 	bl	8005870 <memset>
 8006534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800653c:	e7e9      	b.n	8006512 <__sfp+0x42>
 800653e:	bf00      	nop
 8006540:	08007430 	.word	0x08007430
 8006544:	ffff0001 	.word	0xffff0001

08006548 <_fwalk_reent>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	4680      	mov	r8, r0
 800654e:	4689      	mov	r9, r1
 8006550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006554:	2600      	movs	r6, #0
 8006556:	b914      	cbnz	r4, 800655e <_fwalk_reent+0x16>
 8006558:	4630      	mov	r0, r6
 800655a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800655e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006562:	3f01      	subs	r7, #1
 8006564:	d501      	bpl.n	800656a <_fwalk_reent+0x22>
 8006566:	6824      	ldr	r4, [r4, #0]
 8006568:	e7f5      	b.n	8006556 <_fwalk_reent+0xe>
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d907      	bls.n	8006580 <_fwalk_reent+0x38>
 8006570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006574:	3301      	adds	r3, #1
 8006576:	d003      	beq.n	8006580 <_fwalk_reent+0x38>
 8006578:	4629      	mov	r1, r5
 800657a:	4640      	mov	r0, r8
 800657c:	47c8      	blx	r9
 800657e:	4306      	orrs	r6, r0
 8006580:	3568      	adds	r5, #104	; 0x68
 8006582:	e7ee      	b.n	8006562 <_fwalk_reent+0x1a>

08006584 <__swhatbuf_r>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	460e      	mov	r6, r1
 8006588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658c:	2900      	cmp	r1, #0
 800658e:	b096      	sub	sp, #88	; 0x58
 8006590:	4614      	mov	r4, r2
 8006592:	461d      	mov	r5, r3
 8006594:	da07      	bge.n	80065a6 <__swhatbuf_r+0x22>
 8006596:	2300      	movs	r3, #0
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	89b3      	ldrh	r3, [r6, #12]
 800659c:	061a      	lsls	r2, r3, #24
 800659e:	d410      	bmi.n	80065c2 <__swhatbuf_r+0x3e>
 80065a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065a4:	e00e      	b.n	80065c4 <__swhatbuf_r+0x40>
 80065a6:	466a      	mov	r2, sp
 80065a8:	f000 fa30 	bl	8006a0c <_fstat_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dbf2      	blt.n	8006596 <__swhatbuf_r+0x12>
 80065b0:	9a01      	ldr	r2, [sp, #4]
 80065b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065ba:	425a      	negs	r2, r3
 80065bc:	415a      	adcs	r2, r3
 80065be:	602a      	str	r2, [r5, #0]
 80065c0:	e7ee      	b.n	80065a0 <__swhatbuf_r+0x1c>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	2000      	movs	r0, #0
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	b016      	add	sp, #88	; 0x58
 80065ca:	bd70      	pop	{r4, r5, r6, pc}

080065cc <__smakebuf_r>:
 80065cc:	898b      	ldrh	r3, [r1, #12]
 80065ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065d0:	079d      	lsls	r5, r3, #30
 80065d2:	4606      	mov	r6, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d507      	bpl.n	80065e8 <__smakebuf_r+0x1c>
 80065d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	2301      	movs	r3, #1
 80065e2:	6163      	str	r3, [r4, #20]
 80065e4:	b002      	add	sp, #8
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	ab01      	add	r3, sp, #4
 80065ea:	466a      	mov	r2, sp
 80065ec:	f7ff ffca 	bl	8006584 <__swhatbuf_r>
 80065f0:	9900      	ldr	r1, [sp, #0]
 80065f2:	4605      	mov	r5, r0
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff f991 	bl	800591c <_malloc_r>
 80065fa:	b948      	cbnz	r0, 8006610 <__smakebuf_r+0x44>
 80065fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006600:	059a      	lsls	r2, r3, #22
 8006602:	d4ef      	bmi.n	80065e4 <__smakebuf_r+0x18>
 8006604:	f023 0303 	bic.w	r3, r3, #3
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	e7e3      	b.n	80065d8 <__smakebuf_r+0xc>
 8006610:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <__smakebuf_r+0x7c>)
 8006612:	62b3      	str	r3, [r6, #40]	; 0x28
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	6020      	str	r0, [r4, #0]
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	9b00      	ldr	r3, [sp, #0]
 8006620:	6163      	str	r3, [r4, #20]
 8006622:	9b01      	ldr	r3, [sp, #4]
 8006624:	6120      	str	r0, [r4, #16]
 8006626:	b15b      	cbz	r3, 8006640 <__smakebuf_r+0x74>
 8006628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662c:	4630      	mov	r0, r6
 800662e:	f000 f9ff 	bl	8006a30 <_isatty_r>
 8006632:	b128      	cbz	r0, 8006640 <__smakebuf_r+0x74>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	431d      	orrs	r5, r3
 8006644:	81a5      	strh	r5, [r4, #12]
 8006646:	e7cd      	b.n	80065e4 <__smakebuf_r+0x18>
 8006648:	08006439 	.word	0x08006439

0800664c <__malloc_lock>:
 800664c:	4770      	bx	lr

0800664e <__malloc_unlock>:
 800664e:	4770      	bx	lr

08006650 <_realloc_r>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	4607      	mov	r7, r0
 8006654:	4614      	mov	r4, r2
 8006656:	460e      	mov	r6, r1
 8006658:	b921      	cbnz	r1, 8006664 <_realloc_r+0x14>
 800665a:	4611      	mov	r1, r2
 800665c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006660:	f7ff b95c 	b.w	800591c <_malloc_r>
 8006664:	b922      	cbnz	r2, 8006670 <_realloc_r+0x20>
 8006666:	f7ff f90b 	bl	8005880 <_free_r>
 800666a:	4625      	mov	r5, r4
 800666c:	4628      	mov	r0, r5
 800666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006670:	f000 fa00 	bl	8006a74 <_malloc_usable_size_r>
 8006674:	42a0      	cmp	r0, r4
 8006676:	d20f      	bcs.n	8006698 <_realloc_r+0x48>
 8006678:	4621      	mov	r1, r4
 800667a:	4638      	mov	r0, r7
 800667c:	f7ff f94e 	bl	800591c <_malloc_r>
 8006680:	4605      	mov	r5, r0
 8006682:	2800      	cmp	r0, #0
 8006684:	d0f2      	beq.n	800666c <_realloc_r+0x1c>
 8006686:	4631      	mov	r1, r6
 8006688:	4622      	mov	r2, r4
 800668a:	f7ff f8cd 	bl	8005828 <memcpy>
 800668e:	4631      	mov	r1, r6
 8006690:	4638      	mov	r0, r7
 8006692:	f7ff f8f5 	bl	8005880 <_free_r>
 8006696:	e7e9      	b.n	800666c <_realloc_r+0x1c>
 8006698:	4635      	mov	r5, r6
 800669a:	e7e7      	b.n	800666c <_realloc_r+0x1c>

0800669c <__ssputs_r>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	688e      	ldr	r6, [r1, #8]
 80066a2:	429e      	cmp	r6, r3
 80066a4:	4682      	mov	sl, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	4690      	mov	r8, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	d837      	bhi.n	800671e <__ssputs_r+0x82>
 80066ae:	898a      	ldrh	r2, [r1, #12]
 80066b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066b4:	d031      	beq.n	800671a <__ssputs_r+0x7e>
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	6909      	ldr	r1, [r1, #16]
 80066ba:	1a6f      	subs	r7, r5, r1
 80066bc:	6965      	ldr	r5, [r4, #20]
 80066be:	2302      	movs	r3, #2
 80066c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80066c8:	f109 0301 	add.w	r3, r9, #1
 80066cc:	443b      	add	r3, r7
 80066ce:	429d      	cmp	r5, r3
 80066d0:	bf38      	it	cc
 80066d2:	461d      	movcc	r5, r3
 80066d4:	0553      	lsls	r3, r2, #21
 80066d6:	d530      	bpl.n	800673a <__ssputs_r+0x9e>
 80066d8:	4629      	mov	r1, r5
 80066da:	f7ff f91f 	bl	800591c <_malloc_r>
 80066de:	4606      	mov	r6, r0
 80066e0:	b950      	cbnz	r0, 80066f8 <__ssputs_r+0x5c>
 80066e2:	230c      	movs	r3, #12
 80066e4:	f8ca 3000 	str.w	r3, [sl]
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f8:	463a      	mov	r2, r7
 80066fa:	6921      	ldr	r1, [r4, #16]
 80066fc:	f7ff f894 	bl	8005828 <memcpy>
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	6126      	str	r6, [r4, #16]
 800670e:	6165      	str	r5, [r4, #20]
 8006710:	443e      	add	r6, r7
 8006712:	1bed      	subs	r5, r5, r7
 8006714:	6026      	str	r6, [r4, #0]
 8006716:	60a5      	str	r5, [r4, #8]
 8006718:	464e      	mov	r6, r9
 800671a:	454e      	cmp	r6, r9
 800671c:	d900      	bls.n	8006720 <__ssputs_r+0x84>
 800671e:	464e      	mov	r6, r9
 8006720:	4632      	mov	r2, r6
 8006722:	4641      	mov	r1, r8
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	f7ff f88a 	bl	800583e <memmove>
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	1b9b      	subs	r3, r3, r6
 800672e:	60a3      	str	r3, [r4, #8]
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	441e      	add	r6, r3
 8006734:	6026      	str	r6, [r4, #0]
 8006736:	2000      	movs	r0, #0
 8006738:	e7dc      	b.n	80066f4 <__ssputs_r+0x58>
 800673a:	462a      	mov	r2, r5
 800673c:	f7ff ff88 	bl	8006650 <_realloc_r>
 8006740:	4606      	mov	r6, r0
 8006742:	2800      	cmp	r0, #0
 8006744:	d1e2      	bne.n	800670c <__ssputs_r+0x70>
 8006746:	6921      	ldr	r1, [r4, #16]
 8006748:	4650      	mov	r0, sl
 800674a:	f7ff f899 	bl	8005880 <_free_r>
 800674e:	e7c8      	b.n	80066e2 <__ssputs_r+0x46>

08006750 <_svfiprintf_r>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	461d      	mov	r5, r3
 8006756:	898b      	ldrh	r3, [r1, #12]
 8006758:	061f      	lsls	r7, r3, #24
 800675a:	b09d      	sub	sp, #116	; 0x74
 800675c:	4680      	mov	r8, r0
 800675e:	460c      	mov	r4, r1
 8006760:	4616      	mov	r6, r2
 8006762:	d50f      	bpl.n	8006784 <_svfiprintf_r+0x34>
 8006764:	690b      	ldr	r3, [r1, #16]
 8006766:	b96b      	cbnz	r3, 8006784 <_svfiprintf_r+0x34>
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	f7ff f8d7 	bl	800591c <_malloc_r>
 800676e:	6020      	str	r0, [r4, #0]
 8006770:	6120      	str	r0, [r4, #16]
 8006772:	b928      	cbnz	r0, 8006780 <_svfiprintf_r+0x30>
 8006774:	230c      	movs	r3, #12
 8006776:	f8c8 3000 	str.w	r3, [r8]
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	e0c8      	b.n	8006912 <_svfiprintf_r+0x1c2>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	2300      	movs	r3, #0
 8006786:	9309      	str	r3, [sp, #36]	; 0x24
 8006788:	2320      	movs	r3, #32
 800678a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800678e:	2330      	movs	r3, #48	; 0x30
 8006790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006794:	9503      	str	r5, [sp, #12]
 8006796:	f04f 0b01 	mov.w	fp, #1
 800679a:	4637      	mov	r7, r6
 800679c:	463d      	mov	r5, r7
 800679e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067a2:	b10b      	cbz	r3, 80067a8 <_svfiprintf_r+0x58>
 80067a4:	2b25      	cmp	r3, #37	; 0x25
 80067a6:	d13e      	bne.n	8006826 <_svfiprintf_r+0xd6>
 80067a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80067ac:	d00b      	beq.n	80067c6 <_svfiprintf_r+0x76>
 80067ae:	4653      	mov	r3, sl
 80067b0:	4632      	mov	r2, r6
 80067b2:	4621      	mov	r1, r4
 80067b4:	4640      	mov	r0, r8
 80067b6:	f7ff ff71 	bl	800669c <__ssputs_r>
 80067ba:	3001      	adds	r0, #1
 80067bc:	f000 80a4 	beq.w	8006908 <_svfiprintf_r+0x1b8>
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	4453      	add	r3, sl
 80067c4:	9309      	str	r3, [sp, #36]	; 0x24
 80067c6:	783b      	ldrb	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 809d 	beq.w	8006908 <_svfiprintf_r+0x1b8>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f04f 32ff 	mov.w	r2, #4294967295
 80067d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	9307      	str	r3, [sp, #28]
 80067dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067e0:	931a      	str	r3, [sp, #104]	; 0x68
 80067e2:	462f      	mov	r7, r5
 80067e4:	2205      	movs	r2, #5
 80067e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80067ea:	4850      	ldr	r0, [pc, #320]	; (800692c <_svfiprintf_r+0x1dc>)
 80067ec:	f7f9 fd10 	bl	8000210 <memchr>
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	b9d0      	cbnz	r0, 800682a <_svfiprintf_r+0xda>
 80067f4:	06d9      	lsls	r1, r3, #27
 80067f6:	bf44      	itt	mi
 80067f8:	2220      	movmi	r2, #32
 80067fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067fe:	071a      	lsls	r2, r3, #28
 8006800:	bf44      	itt	mi
 8006802:	222b      	movmi	r2, #43	; 0x2b
 8006804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006808:	782a      	ldrb	r2, [r5, #0]
 800680a:	2a2a      	cmp	r2, #42	; 0x2a
 800680c:	d015      	beq.n	800683a <_svfiprintf_r+0xea>
 800680e:	9a07      	ldr	r2, [sp, #28]
 8006810:	462f      	mov	r7, r5
 8006812:	2000      	movs	r0, #0
 8006814:	250a      	movs	r5, #10
 8006816:	4639      	mov	r1, r7
 8006818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800681c:	3b30      	subs	r3, #48	; 0x30
 800681e:	2b09      	cmp	r3, #9
 8006820:	d94d      	bls.n	80068be <_svfiprintf_r+0x16e>
 8006822:	b1b8      	cbz	r0, 8006854 <_svfiprintf_r+0x104>
 8006824:	e00f      	b.n	8006846 <_svfiprintf_r+0xf6>
 8006826:	462f      	mov	r7, r5
 8006828:	e7b8      	b.n	800679c <_svfiprintf_r+0x4c>
 800682a:	4a40      	ldr	r2, [pc, #256]	; (800692c <_svfiprintf_r+0x1dc>)
 800682c:	1a80      	subs	r0, r0, r2
 800682e:	fa0b f000 	lsl.w	r0, fp, r0
 8006832:	4318      	orrs	r0, r3
 8006834:	9004      	str	r0, [sp, #16]
 8006836:	463d      	mov	r5, r7
 8006838:	e7d3      	b.n	80067e2 <_svfiprintf_r+0x92>
 800683a:	9a03      	ldr	r2, [sp, #12]
 800683c:	1d11      	adds	r1, r2, #4
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	9103      	str	r1, [sp, #12]
 8006842:	2a00      	cmp	r2, #0
 8006844:	db01      	blt.n	800684a <_svfiprintf_r+0xfa>
 8006846:	9207      	str	r2, [sp, #28]
 8006848:	e004      	b.n	8006854 <_svfiprintf_r+0x104>
 800684a:	4252      	negs	r2, r2
 800684c:	f043 0302 	orr.w	r3, r3, #2
 8006850:	9207      	str	r2, [sp, #28]
 8006852:	9304      	str	r3, [sp, #16]
 8006854:	783b      	ldrb	r3, [r7, #0]
 8006856:	2b2e      	cmp	r3, #46	; 0x2e
 8006858:	d10c      	bne.n	8006874 <_svfiprintf_r+0x124>
 800685a:	787b      	ldrb	r3, [r7, #1]
 800685c:	2b2a      	cmp	r3, #42	; 0x2a
 800685e:	d133      	bne.n	80068c8 <_svfiprintf_r+0x178>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	9203      	str	r2, [sp, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	bfb8      	it	lt
 800686c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006870:	3702      	adds	r7, #2
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	4d2e      	ldr	r5, [pc, #184]	; (8006930 <_svfiprintf_r+0x1e0>)
 8006876:	7839      	ldrb	r1, [r7, #0]
 8006878:	2203      	movs	r2, #3
 800687a:	4628      	mov	r0, r5
 800687c:	f7f9 fcc8 	bl	8000210 <memchr>
 8006880:	b138      	cbz	r0, 8006892 <_svfiprintf_r+0x142>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	1b40      	subs	r0, r0, r5
 8006886:	fa03 f000 	lsl.w	r0, r3, r0
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	4303      	orrs	r3, r0
 800688e:	3701      	adds	r7, #1
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	7839      	ldrb	r1, [r7, #0]
 8006894:	4827      	ldr	r0, [pc, #156]	; (8006934 <_svfiprintf_r+0x1e4>)
 8006896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800689a:	2206      	movs	r2, #6
 800689c:	1c7e      	adds	r6, r7, #1
 800689e:	f7f9 fcb7 	bl	8000210 <memchr>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d038      	beq.n	8006918 <_svfiprintf_r+0x1c8>
 80068a6:	4b24      	ldr	r3, [pc, #144]	; (8006938 <_svfiprintf_r+0x1e8>)
 80068a8:	bb13      	cbnz	r3, 80068f0 <_svfiprintf_r+0x1a0>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	3307      	adds	r3, #7
 80068ae:	f023 0307 	bic.w	r3, r3, #7
 80068b2:	3308      	adds	r3, #8
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b8:	444b      	add	r3, r9
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	e76d      	b.n	800679a <_svfiprintf_r+0x4a>
 80068be:	fb05 3202 	mla	r2, r5, r2, r3
 80068c2:	2001      	movs	r0, #1
 80068c4:	460f      	mov	r7, r1
 80068c6:	e7a6      	b.n	8006816 <_svfiprintf_r+0xc6>
 80068c8:	2300      	movs	r3, #0
 80068ca:	3701      	adds	r7, #1
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	4619      	mov	r1, r3
 80068d0:	250a      	movs	r5, #10
 80068d2:	4638      	mov	r0, r7
 80068d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d8:	3a30      	subs	r2, #48	; 0x30
 80068da:	2a09      	cmp	r2, #9
 80068dc:	d903      	bls.n	80068e6 <_svfiprintf_r+0x196>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0c8      	beq.n	8006874 <_svfiprintf_r+0x124>
 80068e2:	9105      	str	r1, [sp, #20]
 80068e4:	e7c6      	b.n	8006874 <_svfiprintf_r+0x124>
 80068e6:	fb05 2101 	mla	r1, r5, r1, r2
 80068ea:	2301      	movs	r3, #1
 80068ec:	4607      	mov	r7, r0
 80068ee:	e7f0      	b.n	80068d2 <_svfiprintf_r+0x182>
 80068f0:	ab03      	add	r3, sp, #12
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4622      	mov	r2, r4
 80068f6:	4b11      	ldr	r3, [pc, #68]	; (800693c <_svfiprintf_r+0x1ec>)
 80068f8:	a904      	add	r1, sp, #16
 80068fa:	4640      	mov	r0, r8
 80068fc:	f3af 8000 	nop.w
 8006900:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006904:	4681      	mov	r9, r0
 8006906:	d1d6      	bne.n	80068b6 <_svfiprintf_r+0x166>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	065b      	lsls	r3, r3, #25
 800690c:	f53f af35 	bmi.w	800677a <_svfiprintf_r+0x2a>
 8006910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006912:	b01d      	add	sp, #116	; 0x74
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	ab03      	add	r3, sp, #12
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4622      	mov	r2, r4
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <_svfiprintf_r+0x1ec>)
 8006920:	a904      	add	r1, sp, #16
 8006922:	4640      	mov	r0, r8
 8006924:	f7ff fa0a 	bl	8005d3c <_printf_i>
 8006928:	e7ea      	b.n	8006900 <_svfiprintf_r+0x1b0>
 800692a:	bf00      	nop
 800692c:	08007434 	.word	0x08007434
 8006930:	0800743a 	.word	0x0800743a
 8006934:	0800743e 	.word	0x0800743e
 8006938:	00000000 	.word	0x00000000
 800693c:	0800669d 	.word	0x0800669d

08006940 <__sread>:
 8006940:	b510      	push	{r4, lr}
 8006942:	460c      	mov	r4, r1
 8006944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006948:	f000 f89c 	bl	8006a84 <_read_r>
 800694c:	2800      	cmp	r0, #0
 800694e:	bfab      	itete	ge
 8006950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006952:	89a3      	ldrhlt	r3, [r4, #12]
 8006954:	181b      	addge	r3, r3, r0
 8006956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800695a:	bfac      	ite	ge
 800695c:	6563      	strge	r3, [r4, #84]	; 0x54
 800695e:	81a3      	strhlt	r3, [r4, #12]
 8006960:	bd10      	pop	{r4, pc}

08006962 <__swrite>:
 8006962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006966:	461f      	mov	r7, r3
 8006968:	898b      	ldrh	r3, [r1, #12]
 800696a:	05db      	lsls	r3, r3, #23
 800696c:	4605      	mov	r5, r0
 800696e:	460c      	mov	r4, r1
 8006970:	4616      	mov	r6, r2
 8006972:	d505      	bpl.n	8006980 <__swrite+0x1e>
 8006974:	2302      	movs	r3, #2
 8006976:	2200      	movs	r2, #0
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	f000 f868 	bl	8006a50 <_lseek_r>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	4632      	mov	r2, r6
 800698e:	463b      	mov	r3, r7
 8006990:	4628      	mov	r0, r5
 8006992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	f000 b817 	b.w	80069c8 <_write_r>

0800699a <__sseek>:
 800699a:	b510      	push	{r4, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 f855 	bl	8006a50 <_lseek_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	bf15      	itete	ne
 80069ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80069ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069b6:	81a3      	strheq	r3, [r4, #12]
 80069b8:	bf18      	it	ne
 80069ba:	81a3      	strhne	r3, [r4, #12]
 80069bc:	bd10      	pop	{r4, pc}

080069be <__sclose>:
 80069be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c2:	f000 b813 	b.w	80069ec <_close_r>
	...

080069c8 <_write_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4c07      	ldr	r4, [pc, #28]	; (80069e8 <_write_r+0x20>)
 80069cc:	4605      	mov	r5, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fd faca 	bl	8003f70 <_write>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_write_r+0x1e>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_write_r+0x1e>
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	200007b8 	.word	0x200007b8

080069ec <_close_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4c06      	ldr	r4, [pc, #24]	; (8006a08 <_close_r+0x1c>)
 80069f0:	2300      	movs	r3, #0
 80069f2:	4605      	mov	r5, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	f7fd fae6 	bl	8003fc8 <_close>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_close_r+0x1a>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_close_r+0x1a>
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	200007b8 	.word	0x200007b8

08006a0c <_fstat_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4c07      	ldr	r4, [pc, #28]	; (8006a2c <_fstat_r+0x20>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4605      	mov	r5, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	f7fd fad9 	bl	8003fd0 <_fstat>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	d102      	bne.n	8006a28 <_fstat_r+0x1c>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	b103      	cbz	r3, 8006a28 <_fstat_r+0x1c>
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200007b8 	.word	0x200007b8

08006a30 <_isatty_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4c06      	ldr	r4, [pc, #24]	; (8006a4c <_isatty_r+0x1c>)
 8006a34:	2300      	movs	r3, #0
 8006a36:	4605      	mov	r5, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	f7fd face 	bl	8003fdc <_isatty>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_isatty_r+0x1a>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_isatty_r+0x1a>
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	200007b8 	.word	0x200007b8

08006a50 <_lseek_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4c07      	ldr	r4, [pc, #28]	; (8006a70 <_lseek_r+0x20>)
 8006a54:	4605      	mov	r5, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fd fabe 	bl	8003fe0 <_lseek>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_lseek_r+0x1e>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_lseek_r+0x1e>
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	200007b8 	.word	0x200007b8

08006a74 <_malloc_usable_size_r>:
 8006a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a78:	1f18      	subs	r0, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfbc      	itt	lt
 8006a7e:	580b      	ldrlt	r3, [r1, r0]
 8006a80:	18c0      	addlt	r0, r0, r3
 8006a82:	4770      	bx	lr

08006a84 <_read_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4c07      	ldr	r4, [pc, #28]	; (8006aa4 <_read_r+0x20>)
 8006a88:	4605      	mov	r5, r0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6022      	str	r2, [r4, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f7fd fa5e 	bl	8003f54 <_read>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_read_r+0x1e>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_read_r+0x1e>
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	200007b8 	.word	0x200007b8

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
